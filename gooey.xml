<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Core</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>getcuringinfo</name>
				<script>deleteLine()</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>999</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^Curing Status:</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>enabled</name>
					<script>gooey.vars.serverSettings.curingEnabled = matches[2]
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Enabled:\s+(Yes|No)</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>sip health</name>
					<script>gooey.vars.serverSettings.siphealth = matches[2]</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Sip health at:\s+(\d+)%$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>sip mana</name>
					<script>gooey.vars.serverSettings.sipmana = matches[2]</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Sip mana at:\s+(\d+)%$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>everything else</name>
					<script>deleteLine()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^.*$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>close gate</name>
					<script>setTriggerStayOpen("getcuringinfo", 0)
disableTrigger("getcuringinfo")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string></string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>7</integer>
					</regexCodePropertyList>
				</Trigger>
			</Trigger>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Wilderness Map</name>
				<script>-- Zulah's</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>GMCP Map Catchers</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>return gmcp.Room</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>GMCP Rooms</name>
						<script>if gooey.gui.map.current ~= "Mapper" then
  gooey.gui.map[gooey.gui.map.current]:hide()
end
gooey.gui.map.current = "Mapper"
gooey.gui.map["Mapper"]:show()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>return gmcp.Room.Info.num &lt; 2121028</string>
							<string>return gmcp.Room.Info.num &gt; 0</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>4</integer>
							<integer>4</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>GMCP Wilderness</name>
						<script>if gooey.gui.map.current ~= "Wilderness" then
  gooey.gui.map[gooey.gui.map.current]:hide()
end
gooey.gui.map.current = "Wilderness"
gooey.gui.map["Wilderness"]:show()


--2044146
--2024249
--2106249
--2023249</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>return gmcp.Room.Info.num &gt; 2121028</string>
							<string>return gmcp.Room.Info.coords==""</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>4</integer>
							<integer>4</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Wilderness Catch All</name>
							<script>for i=1, 50 do
	selectString("\^", i) 
	fg("black")
	bg("black")
	resetFormat()
end

for i=1, 50 do
	selectString("\?", i) 
	fg("red")
	bg("black")
	resetFormat()
end


selectCurrentLine()
copy()
appendBuffer("Wilderness")
deleteLine()

</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^[ wnmjSIMXWYx',;#=@~%!\.\^\|\*\?\+\(]+$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>GMCP Oceans</name>
						<script>if gooey.gui.map.current ~= "Ocean" then
  gooey.gui.map[gooey.gui.map.current]:hide()
end
gooey.gui.map.current = "Ocean"
gooey.gui.map["Ocean"]:show() </script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>return gmcp.Room.Info.environment=='Vessel'</string>
							<string>return gmcp.Room.Info.num==-2</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>4</integer>
							<integer>4</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>Ocean Catch All</name>
							<script>selectCurrentLine()

for i=1, 50 do
	 selectString("#", i) 
	 fg("ansiCyan")
	 bg("NavyBlue")
	 resetFormat()
  end

for i=1, 50 do
	selectString("\^", i) 
	fg("black")
	bg("black")
	resetFormat()
end

for i=1, 50 do
	selectString("\?", i) 
	fg("red")
	bg("black")
	resetFormat()
end

for i=1, 50 do
	selectString("S", i) 
	fg("red")
	bg("yellow")
	resetFormat()
end

if maplen == 13 then
  for i=1, 50 do
	 selectString("w", i) 
	 fg("ansiCyan")
	 bg("NavyBlue")
	 resetFormat()
  end
  for i=1, 50 do
	 selectString("(", i) 
	 fg("red")
	 bg("gray")
	 resetFormat()
  end
  for i=1, 50 do
	 selectString("#", i) 
	 fg("blue")
	 bg("gray")
	 resetFormat()
  end
end

selectCurrentLine()
copy()
appendBuffer("Ocean")
deleteLine()
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^[ wnmjSIMXWYx',;#=@~%!\.\^\|\*\?\+\(]+$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</Trigger>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Ship Room Detected</name>
					<script>clearWindow("Wilderness") </script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Quarterdeck</string>
						<string>Main deck</string>
						<string>Side deck</string>
						<string>Stern</string>
						<string>Ship bow</string>
						<string>The ship moves</string>
						<string>The ship drifts</string>
						<string>Crow's nest.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
						<integer>2</integer>
						<integer>2</integer>
						<integer>2</integer>
						<integer>2</integer>
						<integer>2</integer>
						<integer>2</integer>
						<integer>2</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Sea</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Battle Prompt</name>
					<script>if not gooey.vars.sea.gotPrompt then gooey.vars.sea.gotPrompt = true end
--selectCurrentLine()
--gooey.gui.shipPromptConsole:echo(line)
echo("shipPromptConsole", copy2html())
--gooey.gui.shipPromptConsole:paste()
--appendBuffer("shipPromptConsole")
--fg("a_onelevel")
--cinsertText("                             ")
deleteLine()
deselect()

gs = gooey.vars.sea
gs.shipSails = matches[2]
gs.windSpeed = matches[6]
gs.windDir = matches[5]
gs.shipSpeed = matches[8]
gs.shipCourse = matches[7]
gs.seasTranl = matches[9]
gs.shipState = matches[10]
gs.shipAction = matches[11]
gs.seas = nil
gs.myhullis = gs.myhullis or 0
gs.oldhull = gs.oldhull or gs.hull

if string.find(gs.shipState, "Row") then rowing = true
else rowing = false
end

if matches[2] == "Full" then gs.shipSails = "Full"
  elseif matches[2] == "Furl" then gs.shipSails = "Furled"
  else gs.shipSails = tonumber(matches[3])
end

if matches[3] == "full" then gs.sails = 100
elseif matches[3] == "gone" then gs.sails = 0
else gs.sails = tonumber(matches[3])
  if gs.gottaclearrigs and gs.sails &gt; 30 then
    expandAlias("clr")
    gs.gottaclearrigs = false
  end
end

if gs.hull then gs.oldhull = gs.hull end

if matches[4] == "full" then gs.hull = 100
else gs.hull = tonumber(matches[4])
end


if gs.hull &lt; 98 then 
  if  not (gs.repairingHull or gs.startedShooting or gs.clearingSomething) then
    send("ship repair all",true)
    cecho("\n&lt;DarkSlateGray&gt;Crew: &lt;ansiYellow&gt;Starting repairs, captain!")
    gs.repairingHull = true
  end
elseif gs.hull == 100 then
  gs.repairingHull = false
end

if gs.oldhull and type(gs.oldhull) == "number" and gs.hull - gs.oldhull ~= 0 then 
  cecho("\n&lt;DimGrey&gt;Hull: "..(gs.hull - gs.oldhull &gt; 0 and ("&lt;cyan&gt;+"..gs.hull - gs.oldhull) or ("&lt;yellow&gt;"..gs.hull - gs.oldhull))) 
  end

gooey.funcs.showActivity()

if gs.hull &gt; 55 then
alerted50 = false
alerted40 = false
alerted30 = false
alerted20 = false
alerted10 = false
end


if not alerted50 and gs.hull &lt; 50 then 
  playsound("Low hull.wav")
  alerted50 = true
end
if not alerted40 and gs.hull &lt; 40 then 
  playsound("Low hull.wav")
  alerted40 = true
end
if not alerted30 and gs.hull &lt; 30 then 
  playsound("Low hull.wav")
  alerted30 = true
end
if not alerted20 and gs.hull &lt; 20 then 
  playsound("Low hull.wav")
  alerted20 = true
end
if gs.hull &lt; 10 then 
  playsound("Low hull.wav")
  alerted10 = true
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^= Sl (\d+|\w+)%? - hp +(\d+|\w+)%?,Hl: +(\d+|\w+)%?,Wd (\w+)@(\d+\w+),Cr\/Sp (\w+)@(\d+),Sea (\w+),?(.*),?(.*)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>PopOut</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName>HelpPopups</packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="yes" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>poptrig</name>
					<script>if not gooey.gui.popOutConsole then
gooey.gui.build.popOut()
end
gooey.gui.popOutWindow:show()
clearWindow("popOutConsole")
selectCurrentLine()
copy()
gooey.gui.popOutConsole:appendBuffer()
--deleteLine()
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>100</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(.+)</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="yes" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>poptrig2</name>
						<script>setTriggerStayOpen("help1", 1)
selectCurrentLine()
copy()
gooey.gui.popOutConsole:appendBuffer()
--deleteLine()</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>1</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>(.*)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Moar pages</name>
						<script>send("more", false)
gooey.funcs.deletelineP() </script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>[Type MORE if you wish to continue reading. </string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>2</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>poptrig3</name>
						<script>setTriggerStayOpen("poptrig", 0)
deleteLine()
</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string></string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>7</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
			</TriggerGroup>
		</TriggerGroup>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Addon - hunt</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Hunting</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Kill</name>
					<script>if killon == true then
	expandAlias("dor combination &amp;tar slice smash")
end --if</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Your target is now\: (.+) \(a denizen\)</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>stopDOR</name>
					<script>expandAlias("dor")
deleteLine()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>I do not recognise anything called that here.</string>
						<string>Nothing can be seen here by that name.</string>
						<string>You cannot see that being here.</string>
						<string>Ahh, I am truly sorry, but I do not see anyone by that name here.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
						<integer>2</integer>
						<integer>2</integer>
						<integer>2</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
		</TriggerGroup>
		<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>My Prompt</name>
			<script>
   if gmcp and gmcp.Char and gmcp.Char.Vitals and gmcp.Char.Status.name == "Killian" then
      local oldhp
      if gooey.vars.gmcp.old then
       oldhp = gooey.vars.gmcp.old.hp or tonumber(gmcp.Char.Vitals.hp)
      end
      local cprompt = ""
      local lightcolor = ""
      local darkcolor = ""
      --some bufer
      if not gooey.vars.gui.singleprompt then
        cprompt = cprompt .."\n                                    "
        lightcolor = "a_twolevel"
        darkcolor = "a_onelevel"
        --timestamp
        cprompt = cprompt .."&lt;black&gt;"..getTime(true, 'hh:mm:ss')
        deleteLine()
      else
        cprompt = cprompt.."&amp;nbsp;"
        lightcolor = "DarkSeaGreen"
        darkcolor = "dark_olive_green"
        selectCurrentLine()
        replace("")
      end

      
      --target info
      if gmcp.IRE and gmcp.IRE.Target then
      local sstar
        if gmcp.IRE.Target.Set and gmcp.IRE.Target.Set ~= "" then
          sstar = gmcp.IRE.Target.Set
          if sstar == gooey.vars.target then
            cprompt = cprompt.."&lt;"..lightcolor.."&gt;"..gooey.data.gmcp.denizens[sstar].." "..gooey.vars.target
          elseif sstar ~= gooey.vars.target then
            cprompt = cprompt.."&lt;"..lightcolor.."&gt;"..gooey.vars.target..sstar
          end
        elseif gmcp.IRE.Target.Set and gmcp.IRE.Target.Set == "" then
          cprompt = cprompt.."&lt;"..lightcolor.."&gt;[&lt;"..darkcolor.."&gt;"..gooey.vars.target.."&lt;"..lightcolor.."&gt;]"
        end
        if gmcp.IRE.Target.Info and gmcp.IRE.Target.Info.hpperc then
          cprompt = cprompt .."&lt;"..darkcolor.."&gt; @ &lt;"..gooey.funcs.healthColor(tonumber(gmcp.IRE.Target.Info.hpperc), 100).."&gt;"..gmcp.IRE.Target.Info.hpperc.."&lt;DimGrey&gt; |"
        end

      end
      
      --health
      cprompt = cprompt .." &lt;"..gooey.funcs.healthColor().."&gt;"..gmcp.Char.Vitals.hp.."/"..gmcp.Char.Vitals.maxhp.."&lt;"..lightcolor.."&gt;H &lt;"..darkcolor.."&gt;[&lt;"..gooey.funcs.healthColor().."&gt;"..gooey.funcs.round(tonumber(gmcp.Char.Vitals.hp)/tonumber(gmcp.Char.Vitals.maxhp)*100).."&lt;"..darkcolor.."&gt;%&lt;"..lightcolor.."&gt;H&lt;"..darkcolor.."&gt;] "
      --mana
      cprompt = cprompt .."&lt;"..darkcolor.."&gt;["..gooey.funcs.round(tonumber(gmcp.Char.Vitals.mp)/tonumber(gmcp.Char.Vitals.maxmp)*100).."&lt;"..darkcolor.."&gt;%&lt;"..lightcolor.."&gt;M&lt;"..darkcolor.."&gt;] "
      --missing bal or eq?
      if gmcp.Char.Vitals.bal == "0" or gmcp.Char.Vitals.eq == "0" then 
        cprompt = cprompt .."&lt;DimGrey&gt;|"
      end
      --balance
      cprompt = cprompt .."&lt;DimGrey&gt;"..((gmcp.Char.Vitals.bal == "1") and "" or "&lt;DimGrey&gt; -bal")
      --eq
      cprompt = cprompt .."&lt;DimGrey&gt;"..((gmcp.Char.Vitals.eq == "1") and "" or "&lt;DimGrey&gt;-eq")
      --did our health change?
      if oldhp ~= tonumber(gmcp.Char.Vitals.hp) then
        cprompt = cprompt .."&lt;DimGrey&gt; | &lt;DarkSlateGray&gt;("..(tonumber(gmcp.Char.Vitals.hp)-oldhp).."h)"
      end
      oldhp = tonumber(gmcp.Char.Vitals.hp)
    
      if gooey.vars.gui.singleprompt then
      --"&lt;pre style='font-size:16px; color:white; text-align:center; padding:1px; margin:1px;'&gt;"
        gooey.gui.promptConsole:cecho("&lt;pre style='font-size:15px; font-weight: bold;'&gt;"..cprompt.."&lt;/pre&gt;")
       
      else 
        cecho(cprompt)
      end
    end</script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList>
				<string></string>
			</regexCodeList>
			<regexCodePropertyList>
				<integer>7</integer>
			</regexCodePropertyList>
		</Trigger>
		<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Timeout Trigger</name>
			<script>thingstodo = { "ql", "sc" , "look", "cw", "hw", "show gold", "qw" }
tempTimer(math.random(3, 15), 'send(thingstodo[math.random(1, #thingstodo)], true)')
cecho ("\n&lt;black&gt;..............&lt;red&gt;*&lt;black&gt;..........&lt;white&gt;*&lt;black&gt;..........&lt;blue&gt;*&lt;black&gt;...............\n")
cecho ("&lt;black&gt;................&lt;blue&gt;*&lt;black&gt;........&lt;red&gt;*&lt;black&gt;........&lt;white&gt;*&lt;black&gt;.................\n")
cecho ("&lt;black&gt;..................&lt;white&gt;*&lt;black&gt;......&lt;blue&gt;*&lt;black&gt;......&lt;red&gt;*&lt;black&gt;...................\n")
cecho ("&lt;black&gt;....................&lt;red&gt;*&lt;black&gt;....&lt;white&gt;*&lt;black&gt;....&lt;blue&gt;*&lt;black&gt;.....................\n")
cecho ("&lt;black&gt;......................&lt;blue&gt;*&lt;black&gt;..&lt;red&gt;*&lt;black&gt;..&lt;red&gt;*&lt;black&gt;.......................\n")
cecho ("&lt;black&gt;..............&lt;white&gt;*&lt;black&gt; &lt;red&gt;*&lt;black&gt; &lt;blue&gt;*&lt;black&gt; &lt;white&gt;*&lt;black&gt; &lt;red&gt;*&lt;black&gt; &lt;blue&gt;*&lt;black&gt; &lt;white&gt;*&lt;black&gt; &lt;red&gt;*&lt;black&gt; &lt;blue&gt;*&lt;black&gt; &lt;white&gt;*&lt;black&gt; &lt;red&gt;*&lt;black&gt; &lt;blue&gt;*&lt;black&gt; &lt;white&gt;*&lt;black&gt;............\n")
cecho ("&lt;black&gt;......................&lt;red&gt;*&lt;black&gt;..&lt;red&gt;*&lt;black&gt;..&lt;blue&gt;*&lt;black&gt;.......................\n")
cecho ("&lt;black&gt;....................&lt;blue&gt;*&lt;black&gt;....&lt;white&gt;*&lt;black&gt;....&lt;blue&gt;*&lt;black&gt;.....................\n")
cecho ("&lt;black&gt;..................&lt;white&gt;*&lt;black&gt;......&lt;blue&gt;*&lt;black&gt;......&lt;white&gt;*&lt;black&gt;...................\n")
cecho ("&lt;black&gt;................&lt;red&gt;*&lt;black&gt;........&lt;red&gt;*&lt;black&gt;........&lt;red&gt;*&lt;black&gt;.................\n")
cecho ("&lt;black&gt;..............&lt;blue&gt;*&lt;black&gt;..........&lt;white&gt;*&lt;black&gt;..........&lt;blue&gt;*&lt;black&gt;...............\n")




</script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList>
				<string>You will TIMEOUT in 1 minute unless you do something.</string>
			</regexCodeList>
			<regexCodePropertyList>
				<integer>0</integer>
			</regexCodePropertyList>
		</Trigger>
		<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>We're blind, fo'</name>
			<script>send("touch mindseye")</script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList>
				<string>^You\? As blind as a bat. Doing what\?$</string>
			</regexCodeList>
			<regexCodePropertyList>
				<integer>1</integer>
			</regexCodePropertyList>
		</Trigger>
		<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Touch starbrust</name>
			<script>send("touch starburst", false)</script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList>
				<string>^As the starburst tattoo's shape is codified on the \w+ of yourself, the last of the ink leaves the air and you pause for a moment to admire your handiwork.$</string>
				<string>^As the starburst tattoo's shape is codified on your \w+</string>
			</regexCodeList>
			<regexCodePropertyList>
				<integer>1</integer>
				<integer>1</integer>
			</regexCodePropertyList>
		</Trigger>
		<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Not on a ship</name>
			<script>send("CURING PRIORITY DEF Shipwarning RESET")</script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList>
				<string>You must be on a ship to issue that command</string>
			</regexCodeList>
			<regexCodePropertyList>
				<integer>0</integer>
			</regexCodePropertyList>
		</Trigger>
	</TriggerPackage>
	<TimerPackage>
		<TimerGroup isActive="yes" isFolder="yes" isTempTimer="no" isOffsetTimer="no">
			<name>gooey</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<time>00:00:00.000</time>
			<Timer isActive="no" isFolder="no" isTempTimer="no" isOffsetTimer="no">
				<name>ragetimer</name>
				<script>for i = 1, 6, 1 do
  local name = "rageGauge"..i
  local watch = "rageWatch"..i
  if getStopWatchTime("rageWatch"..i) &gt;= tonumber(gooey.data.hunt.myRageTable[i][2]) then
    gooey.gui[name]:setValue(0, tonumber(gooey.data.hunt.myRageTable[i][2]))
    resetStopWatch(watch)
    stopStopWatch(watch)
    gooey.data.hunt.myRageTable[i][5] = 1
    gooey.funcs.hunt.updateRageGauges()
    else
    gooey.gui[name]:setValue(getStopWatchTime(watch), tonumber(gooey.data.hunt.myRageTable[i][2]))
  end
end
</script>
				<command></command>
				<packageName></packageName>
				<time>00:00:00.100</time>
			</Timer>
		</TimerGroup>
	</TimerPackage>
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Core</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>goo</name>
				<script>function gooey.funcs.showHelp(what)
local pre = "\n&lt;white&gt;(&lt;firebrick&gt;gooey&lt;white&gt;)&lt;reset&gt;: "
  if what == "install" then
    gooey.funcs.startup()
  elseif what == "help" or what == "" or not what then
    cechoLink(pre.."Single prompt "..(gooey.vars.gui.singleprompt and "&lt;green&gt;enabled" or "&lt;red&gt;disabled"), [[gooey.funcs.toggleSinglePrompt() gooey.funcs.showHelp()]], "Click to change", true)
    cechoLink(pre.."Preferred room layout &lt;yellow&gt;"..gooey.gui.preferredRoomLayout, [[ gooey.funcs.swapRoomLayout() gooey.funcs.showHelp()]], "Click to change", true)
    for k, v in pairs(gooey.vars.mode) do  
      if v then
        cechoLink(pre.."Mode &lt;yellow&gt;"..k, [[gooey.funcs.toggleGUIMode() gooey.funcs.showHelp()]], "Click to cycle to another mode", true)
      end
    end
    cecho(pre.."      Available modes are ")
    cechoLink("&lt;yellow&gt;sea&lt;reset&gt;,", [[gooey.funcs.toggleGUIMode("sea") gooey.funcs.showHelp()]], "Click to change to sea", true)
    cechoLink("&lt;yellow&gt; hunt&lt;reset&gt;,", [[gooey.funcs.toggleGUIMode("hunt") gooey.funcs.showHelp()]], "Click to change to hunt", true)
    cechoLink("&lt;yellow&gt; combat&lt;reset&gt;. ", [[gooey.funcs.toggleGUIMode("combat") gooey.funcs.showHelp()]], "Click to change to combat", true)
    echo("You can use:")
    cecho(pre.."        - &lt;yellow&gt;goo \&lt;mode\&gt; &lt;reset&gt;to switched to a saved layout")
    cecho(pre.."        - &lt;yellow&gt;goo reset \&lt;mode\&gt; &lt;reset&gt;to go to the default specified mode")
  elseif what:find("reset") or table.contains({"sea", "hunt", "combat"}, what) then
    gooey.funcs.toggleGUIMode(what)
    gooey.funcs.showHelp()
  end  

end
gooey.funcs.showHelp(matches[2])



</script>
				<command></command>
				<packageName></packageName>
				<regex>^goo ?(.*)?$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Toggle pause curing</name>
				<script>if matches[2] == nil or "" then gooey.funcs.pp() 
else gooey.funcs.pp(matches[2]) end</script>
				<command></command>
				<packageName></packageName>
				<regex>^pp ?(o(n|ff))?</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Shipon</name>
				<script>
gooey.funcs.sea.shipo(matches[2])
gooey.funcs.echo(matches[2] == "on" and "We're on a ship!" or "We're not on a ship")</script>
				<command></command>
				<packageName></packageName>
				<regex>^ship(on|off)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Fill up</name>
				<script>if matches[2] then 
  gooey.funcs.fl(matches[2])
else
  gooey.funcs.fl()
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^fl ?( .*)?$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Target</name>
				<script>gooey.funcs.setTarget(matches[2])</script>
				<command></command>
				<packageName></packageName>
				<regex>^t (.+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>popOut</name>
				<script>if not gooey.gui.popOutWindow then 
gooey.gui.build.popOut()
end
gooey.gui.popOutWindow:show()
gooey.gui.popOutConsole:show()
gooey.gui.popOutWindow:add(gooey.gui.popOutConsole)
enableTrigger("trigpop")
send(matches[1])</script>
				<command></command>
				<packageName></packageName>
				<regex>^(help|artsearch|talisman info|talisman set|ldsearch|chelp|hhelp|ahelp|clhelp) (.+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Change gmode</name>
				<script>gooey.funcs.toggleGUIMode(matches[2])</script>
				<command></command>
				<packageName></packageName>
				<regex>^goo ?(hunt|sea|combat)$</regex>
			</Alias>
		</AliasGroup>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Addon - hunt</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Hunting</name>
				<script>-- by Guhem https://forums.achaea.com/discussion/1501/denizen-targeting-script</script>
				<command></command>
				<packageName>Huntingv061</packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Install Hunting</name>
					<script>local sep
local homeDir = getMudletHomeDir()
if string.char(homeDir:byte()) == "/" then 
	sep = "/" else sep = "\\"
end
table.save(homeDir.. sep .. huntVar.fileName..".lua", areaList)
table.save(homeDir.. sep .. huntVar.fileNameFull..".lua", areaList)

cecho("Hunting Table Installed\n")
table.load(homeDir.. sep .. huntVar.fileName..".lua", huntVar.userAreaList)
table.load(homeDir.. sep .. huntVar.fileNameFull..".lua", fixedHuntVar.areaList)

huntVar.currentArea = gmcp.Room.Info.area
fixedHuntVar.areaDenizens = fixedHuntVar.areaList[huntVar.currentArea] or {}
huntVar.userAreaDenizens = huntVar.userAreaList[huntVar.currentArea] or {}
huntTracker:List()</script>
					<command></command>
					<packageName></packageName>
					<regex>^hinstall$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Hunting On/Off</name>
					<script>local toggle = "on"
if matches[2] == nil and huntVar.on then
	toggle = "off"
end
if matches[2] == "off" then
	toggle = "off"
end

huntToggle(toggle)</script>
					<command></command>
					<packageName></packageName>
					<regex>^hunt\s?(on|off)?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Hunting Echo To</name>
					<script>if matches[2] == nil then
	huntVar.echoto = ""
	cecho("&lt;white&gt;Only echoing locally\n")
else
	huntVar.echoto = matches[2]
	cecho("&lt;white&gt;Echoing to: "..matches[2].."\n")
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^hcc\s?(.+)?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Hunting Echo Toggle</name>
					<script>if huntVar.echo then
	huntVar.echo = false
	cecho("&lt;white&gt;Hunting Echo turned off.\n")
else
	huntVar.echo = true
	cecho("&lt;white&gt;Hunting Echo turned on.\n")
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^hecho$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Reloading User Table</name>
					<script>local sep
local homeDir = getMudletHomeDir()
if string.char(homeDir:byte()) == "/" then 
	sep = "/" else sep = "\\"
end
table.load(homeDir.. sep .. huntVar.fileName..".lua", huntVar.userAreaList)
table.load(homeDir.. sep .. huntVar.fileNameFull..".lua", fixedHuntVar.areaList)

huntTableCheck()

huntVar.currentArea = gmcp.Room.Info.area
fixedHuntVar.areaDenizens = fixedHuntVar.areaList[huntVar.currentArea] or {}
huntVar.userAreaDenizens = huntVar.userAreaList[huntVar.currentArea] or {}
huntTracker:List()

cecho("&lt;white&gt;Hunting Table Reloaded\n")</script>
					<command></command>
					<packageName></packageName>
					<regex>^hload$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Show Area Targets</name>
					<script>showHuntTargs()</script>
					<command></command>
					<packageName></packageName>
					<regex>^hshow$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Save Hunting Table</name>
					<script>huntTableCheck()

local sep
local homeDir = getMudletHomeDir()
if string.char(homeDir:byte()) == "/" then 
	sep = "/" else sep = "\\"
end


table.save(homeDir.. sep .. huntVar.fileName..".lua", huntVar.userAreaList)
table.save(homeDir.. sep .. huntVar.fileNameFull..".lua", fixedHuntVar.areaList)
cecho("&lt;white&gt;Hunting System Saved\n")</script>
					<command></command>
					<packageName></packageName>
					<regex>^hsave$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Hunt Add</name>
					<script>addTargets()</script>
					<command></command>
					<packageName></packageName>
					<regex>^hadd$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Hunt Remove</name>
					<script>removeTargets()</script>
					<command></command>
					<packageName></packageName>
					<regex>^hremove$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Kill the thing</name>
					<script>send("setalias gooeykilly stand/kill")
send("queue add eqbal gooeykilly "..gooey.vars.target, false)</script>
					<command></command>
					<packageName></packageName>
					<regex>^k$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Auto Kill</name>
					<script>gooey.funcs.hunt.letUsKill()</script>
					<command></command>
					<packageName></packageName>
					<regex>^ak$</regex>
				</Alias>
			</AliasGroup>
		</AliasGroup>
		<Alias isActive="yes" isFolder="no">
			<name>firework</name>
			<script>-- Function to print a colored string
function printColored(text, color)
    cecho("&lt;" .. color .. "&gt;" .. text .. "&lt;reset&gt;")
end

-- Function to create a better approximation of a round burst of color for a firework
function drawRoundFirework()
    local colors = {"red", "green", "yellow", "blue", "magenta", "cyan", "white"}
    
    local explosion = "*"
    local radius = 10
    
    for i = -radius, radius do
        local spaces = math.ceil(math.sqrt(radius^2 - i^2))
        local fireworksLine = string.rep(" ", spaces) .. explosion
        printColored(fireworksLine, colors[math.random(#colors)])
        os.execute("sleep 0.1")  -- Adjust the sleep duration if needed
        cecho("\n")
    end
end

-- Call the function to draw the improved round firework burst
drawRoundFirework()
</script>
			<command></command>
			<packageName></packageName>
			<regex>^firework</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>see gooey</name>
			<script>clearCmdLine()
appendCmdLine("lua for k, v in pairs("..matches[1]..") do echo(\"\\n\"..k) end")</script>
			<command></command>
			<packageName></packageName>
			<regex>^gooey(.*)?$</regex>
		</Alias>
		<Alias isActive="yes" isFolder="no">
			<name>Format all containers</name>
			<script>gooey.funcs.formatAllContainers()</script>
			<command></command>
			<packageName></packageName>
			<regex>^fac$</regex>
		</Alias>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Core</name>
			<packageName></packageName>
			<script>----------------------------------
--  Heavily inspired by Zulah   --
--  ...and all the people       --
--    cause I can't code.       --
----------------------------------</script>
			<eventHandlerList />
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Extra</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>AdjustableTabWindow</name>
					<packageName></packageName>
					<script>-- Adjustable TabWindow
-- TabWindow code by Mudlet Wiki
-- other functions
-- by Edru 10th October 2020
-- https://github.com/Edru2/AdjustableTabWindow 

Adjustable = Adjustable or {}
Adjustable.TabWindow = Adjustable.TabWindow or Geyser.Container:new({name = "AdjustableTabWindowClass"})
local tab_pos = nil

function Adjustable.TabWindow:createBaseContainers()
    self.tabBar = self.tabBar or Geyser.Label:new({        
        name = self.name.."tabBar",
        x = 0, y = 0,
        width = "100%",
        height = self.tabBarHeight,
    },self)
    self.tabBar:setStyleSheet(self.tabBarStyle)
    
    self.header = self.header or Geyser.HBox:new({
        name = self.name.."header",
        x = 0, y = 0,
        width = "100%",
        height = "100%",
    },self.tabBar)
    
    self.overlay = self.overlay or Geyser.Label:new({
        name = self.name.."overlay",
        x = 0, y = 0,
        width = "100%",
        height = "100%",
    },self.tabBar)
    
    self.overlay:setStyleSheet(self.overlayStyle)
    self.overlay:setMoveCallback(function(event) self:onOverlayMove(event) end)
    self.overlay:setOnLeave(function(event) self:onOverlayLeave(event) end)
    self.overlay:setClickCallback(function(event) self:onOverlayClick(event) end)
    self.overlay:hide()
    
    self.footerContainer = self.footerContainer or Geyser.Container:new({
        name = self.name.."footerContainer",
        x = 0, y = self.tabBarHeight,
        width = "100%",
        height = "-0",
    },self)
    
    self.footer = self.footer or Geyser.Label:new({
        name = self.name.."footer",
        x = 0, y = self.gap,
        width = "100%",
        height = "-0",
    },self.footerContainer)
    
    self.footer:setStyleSheet(self.footerStyle)
end

local function setTabToolTip(tab)
    -- put ToolTip on Label if TabText is to long to display
    local w,h = calcFontSize(tab.adjLabel.fontSize)
    local txt_width = #tab.tabText * w
    if tab.adjLabel:get_width() &lt; txt_width then
        tab.adjLabel:setToolTip(tab.tabText)
    else
        tab.adjLabel:resetToolTip()
    end
end

-- function to create new tabs in tabs table or to rewrite/readjust them
function Adjustable.TabWindow:createTabs()
    for k,v in ipairs(self.tabs) do
        self[v.."center"] = self[v.."center"] or Geyser.Label:new({
            name = v.."center",
            x = 0, y = 0,
            width = "100%",
            height = "100%",
        },self.footer)
        
        self[v.."center"]:setStyleSheet(self.centerStyle)
        
        local tabText = self[v] and self[v].tabText or v
        
        self[v] = self[v] or Adjustable.Container:new({
            name = self.name.." Tab: "..v,
            tabname = v,
            origin = self,
            noLimit = true,
            tabText = tabText,
            padding = 0,
            locked = true,
            autoSave = false,
            autoLoad = false,
            raiseOnClick = false,
            adjLabelstyle = self.inactiveTabStyle,
            titleTxtColor = self.tabTxtColor
            
        }, self.header)
        
        self[v]:setTitle("", self.TabTxtColor)
        self[v].titleText = "&amp;nbsp;&amp;nbsp;"..tabText
        self[v].adjLabel:echo(tabText, self.TabTxtColor)
        self[v]:newLockStyle("tab", 
        function(self)         
            self.Inside:resize("-"..self.padding,"-"..self.padding)
            self.Inside:move(self.padding, self.padding*2) 
        end)
        
        self[v].lockStyle = "tab"
        
        self[v].unlockContainer = function()
            Adjustable.Container.unlockContainer(self[v])
            self[v]:setTitle("", self.tabTxtColor)
            self[v].titleText = ("&amp;nbsp;&amp;nbsp;"..self[v].tabText)
            self[v].adjLabel:echo(self[v].tabText, "nocolor", "c")
        end
        
        
        Adjustable.TabWindow.allTabs[v] = self
        
        self[v]:newCustomItem("Tabify", function() Adjustable.TabWindow.allTabs[v]:createTempWindow(self[v]) end)
        
        self[v].reposition = self.reposition
        local delIndex = table.index_of(Adjustable.Container.all_windows, self[v].name)
        if delIndex then
            table.remove(Adjustable.Container.all_windows, delIndex)
        end
        Adjustable.Container.all[self[v].name] = nil
        self[v].adjLabelstyle = self.inactiveTabStyle
        self[v].titleTxtColor = self.tabTxtColor
        self[v].adjLabel:setStyleSheet(self.inactiveTabStyle)
        
        self[v].adjLabel:echo(self[v].tabText, "nocolor", "c")
        self[v].adjLabel:setClickCallback(function(event) self:onClick(v, event) end)
        self[v].adjLabel:setReleaseCallback(function(event) self:onRelease(v, event) end)
        self[v].adjLabel:setMoveCallback(function(event) self:onMove(v, event) end)
        self[v].adjLabel:setDoubleClickCallback(function(event) self:onDoubleClick(v, event) end)
        self[v].minimizeLabel:setClickCallback(function() self:onMinimizeClick(v) end)
        self[v].minimizeLabel:echo("&lt;center&gt;🗗&lt;/center&gt;")
        self[v].minLabel:setClickCallback(function() self:onMinimizeClick(v) end)
        self[v.."center"]:hide()        
        -- put ToolTip on Label if TabText is to long to display
        setTabToolTip(self[v])
    end
end


--- Sets the amount of space to use between the tabs and the consoles
-- @tparam number gap Number of pixels to keep between the tabs and consoles
function Adjustable.TabWindow:setGap(gap)
    local gapNumber = tonumber(gap)
    local gapType = type(gap)
    assert(gapType == "number", "gap expected as number, got " .. gapType)
    self.gap = gapNumber
    self.footer:move(0, gapNumber)
end

--- Sets the height of the tabs in pixels/percent
-- @tparam number tabHeight the height of the tabs for the object, in pixels/percent
function Adjustable.TabWindow:setTabHeight(tabHeight)
    self.tabBarHeight = tabHeight
    self.tabBar:resize("100%", tabHeight)
    self.footerContainer:move(0, tabHeight)
    self.footerContainer:resize("100%", "-0")
end


--- Sets the CSS to use for the tab box which contains the tabs for the object
-- @tparam string css The css styling to use for the tab box
function Adjustable.TabWindow:setTabBarCSS(css)
    local cssType = type(css)
    assert(cssType == "string", "css as string expected, got " .. cssType)
    self.tabBarStyle = css
    self.tabBar:setStyleSheet(self.tabBarStyle)
end

--- Sets the color to use for the tab box background
-- @param color Color string suitable for decho or hecho, or color name eg "purple", or table of colors {r,g,b}
function Adjustable.TabWindow:setTabBarColor(color)
    self.tabBarColor = color
    self.tabBarStyle = ""
    self.tabBar:setStyleSheet(self.tabBarStyle)
    self.tabBar:setColor(self.tabBarColor)
end

--- Sets the FG color for the active tab
-- @param color Color string suitable for decho or hecho, or color name eg "purple", or table of colors {r,g,b}
function Adjustable.TabWindow:setActiveTabFGColor(color)
    local found
    local add_css
    local r, g, b = Geyser.Color.parse(color)
    local rgb = string.format("rgb(%s, %s, %s)",r,g,b)
    self.activeTabFGColor = color
    self.activeTabStyle, found = string.gsub(" "..self.activeTabStyle, "(%scolor:).-(;)","%1"..rgb.."%2")
    if found == 0 then
        if string.match(self.activeTabStyle,"QLabel{") then
            add_css = "\nQLabel{color:"..rgb..";}"
        else
            add_css = "\ncolor:"..rgb..";"
        end
        self.activeTabStyle = self.activeTabStyle..add_css
    end
    self:adjustTabStyle()
end

--- Sets the FG color for the inactive tab
-- @param color Color string suitable for decho or hecho, or color name eg "purple", or table of colors {r,g,b}
function Adjustable.TabWindow:setInactiveTabFGColor(color)
    local found
    local add_css
    self.inactiveTabFGColor = color
    local r, g, b = Geyser.Color.parse(color)
    local rgb = string.format("rgb(%s, %s, %s)",r,g,b)
    
    self.inactiveTabStyle, found = string.gsub(" "..self.inactiveTabStyle, "(%scolor:).-(;)","%1"..rgb.."%2") 
    if found == 0 then
        if string.match(self.inactiveTabStyle,"QLabel{") then
            add_css = "\nQLabel{color:"..rgb..";}"
        elseif string.match(self.inactiveTabStyle,"QLabel::!hover{") then
            add_css = ""
            self.inactiveTabStyle = string.gsub(self.inactiveTabStyle, "(QLabel::!.-)(})","%1".."color:"..rgb..";".."%2")
        else 
            add_css = "\ncolor:"..rgb..";"
        end
        self.inactiveTabStyle = self.inactiveTabStyle..add_css
    end
    self:adjustTabStyle()
end

--- Sets the BG color for the active tab.
-- &lt;br&gt;NOTE: If you set CSS for the active tab, it will override this setting.
-- @param color Color string suitable for decho or hecho, or color name eg "purple", or table of colors {r,g,b}
function Adjustable.TabWindow:setActiveTabBGColor(color)
    self.activeTabBGColor = color
    local r, g, b = Geyser.Color.parse(color)
    local rgba = string.format("rgba(%s, %s, %s, %s)",r,g,b,"100%%")
    self.activeTabStyle = string.gsub(self.activeTabStyle, "(background%-color:.-).-(;)","%1 "..rgba.."%2")
    self:adjustTabStyle()
end

--- Sets the BG color for the inactive tab.
-- &lt;br&gt;NOTE: If you set CSS for the inactive tab, it will override this setting.
-- @param color Color string suitable for decho or hecho, or color name eg "purple", or table of colors {r,g,b}
function Adjustable.TabWindow:setInactiveTabBGColor(color)
    self.inactiveTabBGColor = color
    local r, g, b = Geyser.Color.parse(color)
    local rgba = string.format("rgba(%s, %s, %s, %s)",r,g,b,"100%%")
    self.inactiveTabStyle = string.gsub(self.inactiveTabStyle, "(background%-color:.-).-(;)","%1 "..rgba.."%2")
    self:adjustTabStyle()
end

function Adjustable.TabWindow:adjustTabStyle()
    local abg_rgb = string.match(self.activeTabBGColor, "%d+.-%d+.-%d+")
    local ibg_rgb = string.match(self.inactiveTabBGColor, "%d+.-%d+.-%d+")
    for k,v in ipairs(self.tabs) do
        if v == self.current then
            self[v].adjLabelstyle = self.activeTabStyle
            self[v].adjLabel:setStyleSheet(self.activeTabStyle)
            if abg_rgb then
                self[v].adjLabel:setColor("&lt;"..abg_rgb.."&gt;")
            else
                self[v].adjLabel:setColor(self.activeTabBGColor)
            end
        else
            self[v].adjLabelstyle = self.inactiveTabStyle
            self[v].adjLabel:setStyleSheet(self.inactiveTabStyle)
            if ibg_rgb then
                self[v].adjLabel:setColor("&lt;"..ibg_rgb.."&gt;")
            else
                self[v].adjLabel:setColor(self.inactiveTabBGColor)
            end
        end
    end
end

--- sets the font for all tabs
--- @tparam string font the font to use.
function Adjustable.TabWindow:setTabFont(font)
    self.tabFont = font
    for k,v in ipairs(self.tabs) do
        self[v].adjLabel:setFont(font)
    end
end

--- sets the font for a single tab. If you use setTabFont this will be overridden
--- @tparam string tabName the tab to change the font of
--- @tparam string font the font to use for that tab
function Adjustable.TabWindow:setSingleTabFont(tabName, font)
    local funcName = "EMCO:setSingleTabFont(tabName, font)"
    if not table.contains(self.tabs, tabName) then
        error("tabName must be an existing tab")
    end
    self[tabName].adjLabel:setFont(font)
end

-- finds the right position to drop the tab into
function Adjustable.TabWindow:findPosition(tab)
    local myWindow = Adjustable.TabWindow.currentWindow or self
    local x, w = myWindow.get_x(), myWindow.get_width()
    local total = w/#myWindow.tabs
    local tab_x = tab.get_x() - x
    local position = (tab_x/total) + 1
    position = math.floor(position + 0.5)
    if position &lt; 1 then
        position = 1
    end
    if position &gt; #myWindow.tabs then
        position = #myWindow.tabs + 1
    end
    return position
end

-- checks if 2 elements collide
local function checkCollision(x1,y1,w1,h1, x2,y2,w2,h2)
    if  x1 &lt; x2+w2 and
    x2 &lt; x1+w1 and
    y1 &lt; y2+h2 and
    y2 &lt; y1+h1 then
        return true
    end
end

local function getFloatingWindows()
    local floatingWindows = {}
    for k,v in pairs(Adjustable.TabWindow.allTabs) do
        if v[k].floating then
            floatingWindows[k] = v[k]
        end
    end
    return floatingWindows
    
end

-- checks if your tab collides with one of the tabwindows
function Adjustable.TabWindow:checkMultiCollision(tab)
    local floatingWindows = getFloatingWindows()
    local x1, y1, w1, h1 = tab:get_x(), tab:get_y(), tab:get_width(), tab:get_height()
    for k,v in pairs(floatingWindows) do
        local x2, y2, w2, h2 = v:get_x(), v:get_y(), v:get_width(), v:get_height()   
        if checkCollision(x1,y1,w1,h1, x2,y2,w2,h2) and v.windowname == self.windowname and not(v.hidden or v.auto_hidden) and not (v == tab) and not v.locked then
            return "floating", v
        end
    end  
    for k,v in pairs(Adjustable.TabWindow.all) do
        local x2, y2, w2, h2 = v:get_x(), v:get_y(), v:get_width(), v:get_height()
        
        if checkCollision(x1,y1,w1,h1, x2,y2,w2,h2) and v.windowname == self.windowname and not(v.hidden or v.auto_hidden) then
            return "TabWindow", v
        end
    end  
end

-- onMove function
-- contains all the functionality to move the tab (collision check, make space ...)
function Adjustable.TabWindow:onMove(tab, event)
    self[tab]:onMove(self[tab].adjLabel, event)
    self[tab].adjLabel:setAlignment("c")
    if self[tab].floating or not Adjustable.TabWindow.clicked then
        return
    end
    local result, value = self:checkMultiCollision(self[tab])
    if Adjustable.TabWindow.currentWindow and Adjustable.TabWindow.currentWindow ~= value and not Adjustable.TabWindow.currentWindow.floating then
        -- reset the tab space
        self:makeSpace(Adjustable.TabWindow.currentWindow, nil, true)
    end
    if result == "TabWindow" then
        Adjustable.TabWindow.currentWindow = value
        tab_pos = value:findPosition(self[tab])
        self:makeSpace(value, tab_pos)
        return
    end
    if result == "floating" and not(value.locked) then
        Adjustable.TabWindow.currentWindow = value
        return
    end    
    if Adjustable.TabWindow.currentWindow then
        Adjustable.TabWindow.currentWindow = nil
    end
end

--- Transforms a floating Tab into a temporary TabWindow
-- @tparam tab the tab which will be transformed
function Adjustable.TabWindow:createTempWindow(tab, tempName)
    if tab and not(tab.floating) then
        return
    end
    
    local rnd_nr = 0
    for i=0,#Adjustable.TabWindow.all_windows do
        if not Adjustable.TabWindow.all["tempTabWindow"..i] then
            rnd_nr = i
            break
        end
    end
    
    local window = tab and tab.windowname ~= "main" and Geyser.windowList[tab.windowname.."Container"].windowList[tab.windowname] or Geyser
    local tempWindowName = tempName and "tempWindow"..string.match(tempName,"%d+") or "tempWindow"..rnd_nr
    local tempTabWindowName = tempName or "tempTabWindow"..rnd_nr
    local x, y, width, height = 0,0,100,100
    if tab then
        x, y, width, height = tab:get_x(), tab:get_y(), tab:get_width(), tab:get_height()
    end
    local tempWindowConf = { name = tempWindowName,
    titleText = "",
    x = x,
    y = y, 
    width = width, 
    height = height,
    autoSave = false,
    autoLoad = false,
}
tempWindowConf = table.union(tempWindowConf, self.tempWindowConf)

local windowCont = Adjustable.Container:new(tempWindowConf)
windowCont:move(x, y)
windowCont:resize(width, height)
table.remove(Adjustable.Container.all_windows, table.index_of(Adjustable.Container.all_windows, windowCont.name ))
Adjustable.Container.all[windowCont.name] = nil

local tabWindow = Adjustable.TabWindow:new({
    name = tempTabWindowName,
    x = 0, 
    y = 0, 
    width = "100%", 
    height = "100%",
    tabTxtColor 		= self.tabTxtColor,
    tabPadding 		    = self.tabPadding,
    activeTabFGColor 	= self.activeTabFGColor,
    inactiveTabFGColor 	= self.inactiveTabFGColor, 
    activeTabBGColor 	= self.activeTabBGColor, 
    inactiveTabBGColor 	= self.inactiveTabBGColor, 
    tabBarColor 		= self.tabBarColor,    
    tabBarStyle 		= self.tabBarStyle, 
    color1 			    = self.color1, 
    color2 			    = self.color2, 
    tabBarHeight 		= self.tabBarHeight, 
    footerStyle 		= self.footerStyle, 
    centerStyle 		= self.centerStyle,
    inactiveTabStyle 	= self.inactiveTabStyle, 
    activeTabStyle 		= self.activeTabStyle, 
    chosenTabStyle 		= self.chosenTabStyle,  
    overlayStyle 		= self.overlayStyle,  
    gap 		 	    = self.gap, 
    temporary = true 
}, windowCont) 

--save name to get the style on loading
tabWindow.tempStyle = self.tempStyle or self.name 
if tab then
    self:restoreTab(tab.tabname, tabWindow)
    tab.tempWindow = windowCont
    tab.tempTabWindow = tabWindow
    tab.tempWindow:changeContainer(window)
    tab.tempWindow:setPercent(true, true)
end
windowCont:show()
windowCont.tabWindow = tabWindow
return windowCont
end

-- mouse movement on the overlay label
function Adjustable.TabWindow:onOverlayMove(event)  
    Adjustable.TabWindow.currentWindow = self
    local tab = Adjustable.TabWindow.clickedTab.name
    if Adjustable.TabWindow.clickedTab ~= self.header.windowList[tab] then
        -- need to feed values to findPosition
        local fakeTab = {}
        fakeTab.get_x = function() return event.x + self.header.get_x() end    
        tab_pos = self:findPosition(fakeTab)
        self:makeSpace(self, tab_pos)
    end
end

-- reset tabspace after mouse leaves overlay label and resets the currentWindow
function Adjustable.TabWindow:onOverlayLeave(event)
    Adjustable.TabWindow.currentWindow = nil
    if not(Adjustable.TabWindow.doubleClick) then
        return
    end
    local tab = Adjustable.TabWindow.clickedTab.name
    if Adjustable.TabWindow.clickedTab ~= self.header.windowList[tab] then
        self:makeSpace(nil, nil, true)
    end
end

-- reset the Overlay label to be hidden
local function resetOverlay()
    local tab = Adjustable.TabWindow.clickedTab
    if Adjustable.TabWindow.overlayTimer then
        killTimer(Adjustable.TabWindow.overlayTimer)
        Adjustable.TabWindow.overlayTimer = nil
    end
    for k,v in pairs(Adjustable.TabWindow.all) do 
        v.overlay:setStyleSheet("background-color: rgba(0,0,0,0%);") 
        v.overlay:hide()
    end  
    if Adjustable.TabWindow.currentWindow then
        Adjustable.TabWindow.currentWindow:makeSpace(nil, nil, true)
    end
    Adjustable.TabWindow.doubleClick = nil
    tab_pos = nil
    
    -- reset Style if overlay is resetet without action
    if tab then
        tab.adjLabel:setStyleSheet(tab.adjLabelstyle)
    end
    
    if Adjustable.TabWindow.MouseEventID then     
        killAnonymousEventHandler(Adjustable.TabWindow.MouseEventID)
        Adjustable.TabWindow.MouseEventID = nil
    end
end

-- handles on overlay click event
function Adjustable.TabWindow:onOverlayClick(event) 
    Adjustable.TabWindow.doubleClick = nil
    local tab = Adjustable.TabWindow.clickedTab
    local container = Adjustable.TabWindow.allTabs[tab.tabname] or self
    tab.adjLabel:setStyleSheet(container.activeTabStyle)
    if container[tab.tabname].floating then
        container:restoreTab(tab.tabname, self)
        self:addTab(tab.tabname, tab_pos)
    else
        container:onRelease(tab.tabname, event)
    end
    resetOverlay()
end

-- if clicked on the minimize label the tab will be 
-- restored to be in a tabwindow again
function Adjustable.TabWindow:onMinimizeClick(tab)  
    local result, value = self:checkMultiCollision(self[tab])
    if result == "floating" then
        value = nil
    end
    self:restoreTab(tab, value)
end

-- activates the tab tab (doesn't deactivate the previous tab)
-- @see Adjustable.TabWindow:deactivateTab()
function Adjustable.TabWindow:activateTab(tab)
    self:deactivateTab()
    tab = self[tab] and tab or self.tabs[1]
    self.current = tab
    if self.current then
        self[tab].adjLabelstyle = self.activeTabStyle
        self[tab].adjLabel:setStyleSheet(self.activeTabStyle)
        self[self.current.."center"]:show()
    end
    self:raiseAll()
end

-- deactivates and hides the current active tab
function Adjustable.TabWindow:deactivateTab()
    if self.current and self[self.current] then  
        self[self.current].adjLabelstyle = self.inactiveTabStyle
        self[self.current].adjLabel:setStyleSheet(self.inactiveTabStyle)
        self[self.current.."center"]:hide()
    end
end

-- handles click event on tab
function Adjustable.TabWindow:onClick(tab, event)
    if Adjustable.TabWindow.doubleClick then
        return
    end
    Adjustable.TabWindow.currentWindow = self
    Adjustable.TabWindow.clicked = true
    Adjustable.TabWindow.clickedTab = self[tab]
    if event.button == "LeftButton" and not self[tab].floating then
        self[tab]:resize(self[tab].get_width(),self[tab].get_height())
        self[tab].container = Geyser
        -- set minimized to true to prevent resizing
        self[tab].minimized = true
        self[tab]:unlockContainer()
        self[tab]:onClick(self[tab].adjLabel, event)
        self[tab].exitLabel:hide()
        self[tab].minimizeLabel:hide()
        Adjustable.TabWindow.clicked = true
        Adjustable.TabWindow.clickedTab = self[tab]
        self[tab].adjLabel:echo(self[tab].tabText, "nocolor", "c")
    end
    
    if self[tab].floating then
        self[tab]:onClick(self[tab].adjLabel, event)
    end
    if not self[tab].floating then
        self:activateTab(tab)
        self[tab].adjLabel:raise(false)
    end
end

-- handles double click event on getAreaTable
-- activates the tab overlay
function Adjustable.TabWindow:onDoubleClick(tab, event)
    Adjustable.TabWindow.currentWindow = self
    Adjustable.TabWindow.doubleClick = true
    Adjustable.TabWindow.clickedTab = self[tab]
    self[tab].adjLabel:setStyleSheet(self.chosenTabStyle)
    for k,v in pairs(Adjustable.TabWindow.all) do
        v.overlay:show()
        v.overlay:raise()
        v.overlay:setStyleSheet(v.overlayStyle)
    end
    Adjustable.TabWindow.overlayTimer = Adjustable.TabWindow.overlayTimer or tempTimer(10, function() resetOverlay() end )
    Adjustable.TabWindow.MouseEventID = Adjustable.TabWindow.MouseEventID or registerAnonymousEventHandler("sysWindowMousePressEvent", "Adjustable.TabWindow.onMouseClick", true)
end

-- handles the mouseclick event 
-- used for sending windows to the main or userwindow after using doubleclick on a tab
function Adjustable.TabWindow.onMouseClick( event, button, x, y, windowname )
    local newContainer = Geyser
    if windowname ~= "main" then
        newContainer = Geyser.windowList[windowname.."Container"].windowList[windowname]
    end 
    local tab = Adjustable.TabWindow.clickedTab
    local container = Adjustable.TabWindow.allTabs[tab.tabname]
    
    container:transformTabContainer(tab.tabname)   
    local width, height = math.min(newContainer.get_width(), tab:get_width()), math.min(newContainer.get_height(), tab:get_height())
    
    tab:changeContainer(newContainer)
    tab:raiseAll()
    local x = math.min(newContainer.get_width() - width, math.max(0, x - width/2))
    local y = math.min(newContainer.get_height() - height, math.max(0, y))
    tab:move(x, y)
    tab:resize(width, height)
    tab:setPercent(true,true)
    killAnonymousEventHandler(Adjustable.TabWindow.MouseEventID)
    Adjustable.TabWindow.MouseEventID = nil
    resetOverlay()
end

-- transforms the tab to a window
function Adjustable.TabWindow:transformTabContainer(tab)
    local myWindow = Adjustable.TabWindow.allTabs[tab] or self
    local container = self[tab]
    if container.windowname == "main" then
        Geyser:add(container)
    else
        Geyser.windowList[container.windowname.."Container"].windowList[container.windowname]:add(container)
    end
    container:unlockContainer()
    container:resize(self.get_width(), self.get_height())
    container:add(self[tab.."center"])
    myWindow:removeTab(tab)
    myWindow:createTabs()
    container:setPadding(self.tabPadding)
    container:show()
    container:raiseAll()
    myWindow[tab].floating = true
    container.raiseOnClick = true
    container.adjLabel:echo(self[tab].tabText, "nocolor", "c")
    container.adjLabel:resetToolTip()
    container.minimized = false
    container:setPercent(true, true)
    myWindow:activateTab(tab)
    if #myWindow.tabs &gt; 0 then
        myWindow:activateTab(myWindow.tabs[1])
    else 
        myWindow.current = nil
    end
    local found
    container.adjLabelstyle, found = string.gsub(self.activeTabStyle, "(qproperty%-alignment%:.-).-(;)","%1 'AlignTop' %2")
    if found == 0 then
        container.adjLabelstyle = container.adjLabelstyle.."\nqproperty-alignment: 'AlignTop' ;\n"
    end
    container.adjLabel:setStyleSheet(container.adjLabelstyle)
    self[tab.."center"]:show()
end

--restores the window to be a tab again
function Adjustable.TabWindow:restoreTab(tab, myWindow)
    myWindow = myWindow or self
    local container = self[tab]
    container.container:remove(container)
    container:remove(self[tab.."center"])
    container:setPadding(0)
    container:lockContainer()
    container:detach()
    container:disconnect()
    container.adjLabel:echo(self[tab].tabText, "nocolor", "c")
    self:changeTabContainer(tab, myWindow)
    self[tab].floating = false
    container.raiseOnClick = false
    tempTimer(0, function() myWindow:activateTab(tab) end)
end

-- function to make a gap where the tab can be dropped in
function Adjustable.TabWindow:makeSpace(myWindow, position, resetSpace)
    myWindow = myWindow or self
    position = position or #myWindow.header.windows
    if position &lt; 1 then position = 1 end
    local current_Tab = Adjustable.TabWindow.clickedTab or {}
    local total_count = #myWindow.header.windows + 1
    -- close the space if resetSpace is true
    if resetSpace then
        position = -1
        total_count = total_count -1
    end
    
    if myWindow == self and current_Tab.name and not(Adjustable.TabWindow.doubleClick) then
        total_count = total_count -1
    end
    local new_width = myWindow.get_width() / total_count
    local new_x = 0
    local counter = 1
    for k,v in ipairs(myWindow.header.windows) do
        if v ~= current_Tab.name then
            if counter == position then
                new_x = new_x + new_width
            end
            myWindow.header.windowList[v]:resize(new_width)
            myWindow.header.windowList[v]:move(new_x)   
            new_x = new_x + new_width
            counter = counter + 1  
        end
    end
end

-- function to change the parent window of the tab 
function Adjustable.TabWindow:changeTabContainer(tab, myWindow, position)
    if self ~= myWindow or self[tab].floating then
        myWindow[tab] = self[tab]
        myWindow[tab.."center"] = self[tab.."center"]
        self[tab].container = not(self[tab].floating) and self.header or Geyser 
        self[tab.."center"]:changeContainer(myWindow.footer)
        self[tab]:changeContainer(myWindow.header)
        if not (self[tab].floating) then
            self:removeTab(tab)
            self:createTabs()
        end
        myWindow:createTabs()
        myWindow[tab]:show()
        if not(myWindow.hidden or myWindow.auto_hidden) then
            myWindow:show()
        end
    end
    myWindow:addTab(tab, position)
    if self.current then
        self[self.current]:show()
    end
    if #self.tabs &gt; 0 then
        if not (self[tab].floating) then
            self:activateTab(self.tabs[1])
        end
    else 
        self.current = nil
    end
    myWindow:activateTab(tab)
end

-- handles the release event
function Adjustable.TabWindow:onRelease(tab, event, position)
    if Adjustable.TabWindow.doubleClick then
        return
    end
    local myWindow = Adjustable.TabWindow.currentWindow or self
    local floating = self[tab].floating
    if event.button == "LeftButton" and Adjustable.TabWindow.currentWindow and myWindow.type == "adjustabletabwindow" and not floating then
        self[tab]:lockContainer()
        self[tab].container = self.header
        self[tab]:onRelease(self[tab].adjLabel, event)
        self[tab].adjLabel:echo(self[tab].tabText, "nocolor", "c")
        tab_pos = tab_pos or myWindow:findPosition(self[tab])
        if myWindow ~= self then
            self:changeTabContainer(tab, myWindow)
        end  
        myWindow:addTab(tab, tab_pos)
        myWindow:raiseAll()
    end
    
    if event.button == "LeftButton" and myWindow.type == "adjustablecontainer" then
        local tabname = myWindow.tabname
        local tabwindow = Adjustable.TabWindow.allTabs[tabname]
        local mytab = tabwindow[tabname]
        local tempWindow = tabwindow:createTempWindow(mytab)
        self:changeTabContainer(tab, tempWindow.tabWindow)
        tempTimer(0, function() tempWindow.tabWindow:activateTab(tab) end)
        tempWindow:raiseAll()
        self[tab]:onRelease(self[tab].adjLabel, event)
        Adjustable.TabWindow.currentWindow = tempWindow.tabWindow
    end
    
    if event.button == "LeftButton" and not(Adjustable.TabWindow.currentWindow) and not floating then
        self:transformTabContainer(tab)
        self[tab]:onRelease(self[tab].adjLabel, event)
    end
    
    if floating then
        self[tab]:onRelease(self[tab].adjLabel, event)
    end
    
    Adjustable.TabWindow.clicked = false
    Adjustable.TabWindow.currentWindow = nil
    if not (Adjustable.TabWindow.doubleClick) then
        Adjustable.TabWindow.clickedTab = nil
    end
    tab_pos = nil
end

-- change the text a tab displays
function Adjustable.TabWindow:setTabText(which, text)
    assert(type(which) == "string" or type(which) == "number", "setTabText: bad argument #1 type (tab name/position as string or number expected, got "..type(which).."!)")
    assert(type(text) == "string", "setTabText: bad argument #2 type (tab text as string expected, got "..type(text).."!)")
    if not (type(which) == "number" and which &lt;= #self.tabs) then
        which = table.index_of(self.tabs, which)
    end
    
    if which then
        self[self.tabs[which]]:setTitle("")
        self[self.tabs[which]].titleText = "&amp;nbsp;&amp;nbsp;"..text
        self[self.tabs[which]].tabText = text
        self[self.tabs[which]].adjLabel:echo(text, "nocolor", "c")
        setTabToolTip(self[self.tabs[which]])
        return true
    end
    return nil, "setTabText: Couldn't find tab to set a new text"
end

-- removes a tab (this won't be saved)
function Adjustable.TabWindow:removeTab(which)
    assert(type(which) == "string" or type(which) == "number", "removeTab: bad argument #1 type (tab name/position as string or number expected, got "..type(which).."!)")
    local index
    if type(which) == "number" and which &lt;= #self.tabs then
        index = which
    else
        index = table.index_of(self.tabs, which)
    end
    if index then
        local tabname = self.tabs[index]
        self[tabname]:hide()
        self.header:remove(self[tabname])
        self.header:organize()
        table.remove(self.tabs, index)
        self:activateTab(self.tabs[1])
        if self.temporary then
            -- destroy empty tempTabWindow
            if table.is_empty(self.tabs) then
                self[tabname].tempWindow:changeContainer("main")
                Adjustable.TabWindow.all[self.name] = nil
                table.remove(Adjustable.TabWindow.all_windows, table.index_of(Adjustable.TabWindow.all_windows, self))
                self[tabname].tempWindow:detach()
                self[tabname].tempWindow:disconnect()
                self[tabname].tempWindow:hide()
                -- delete all references to this tab to avoid it being sent to nirwana if restored
                for k,v in pairs (Adjustable.TabWindow.allTabs) do
                    if v.name == self.name then
                        local styleOrigin = Adjustable.TabWindow.all[self.tempStyle]
                        Adjustable.TabWindow.allTabs[k] = styleOrigin
                        styleOrigin[k] = styleOrigin[k] or self[k]
                        styleOrigin[k.."center"] = styleOrigin[k.."center"] or self[k.."center"]
                        styleOrigin[k].minimizeLabel:setClickCallback(function() styleOrigin[k]:onMinimizeClick(k) end)
                        styleOrigin[k].minLabel:setClickCallback(function() styleOrigin[k]:onMinimizeClick(k) end)
                    end
                end
            end
            self[tabname].tempWindow = nil
            self[tabname].tempTabWindow = nil
        end
        return true
    end
    return nil, "removeTab: Couldn't find tab to remove"
end

-- adds a tab (this won't be saved)
function Adjustable.TabWindow:addTab(name, pos)
    assert(type(name) == "string", "addTab: bad argument #1 type (tab name as string expected, got "..type(name).."!)")
    pos = pos or #self.tabs
    pos = pos &gt; #self.tabs and #self.tabs or pos
    assert(type(pos) == "number", "addTab: bad argument #2 type (tab position as number expected, got "..type(pos).."!)")
    --check if tabName exists already
    local index = table.index_of(self.tabs, name)
    -- check if postion is valid
    if pos &lt; 1 and #self.tabs ~= 0 then
        return nil, "addTab: not a valid position"
    end
    
    pos = index and pos &gt; #self.tabs and #self.tabs or not(index) and pos == #self.tabs and pos + 1 or pos
    
    -- if tab exists and is at the same position already, do nothing
    if index == pos then
        self.header:organize()
        return true
    end
    
    -- if tab exists and position is different, then change the position
    if index then 
        table.remove(self.tabs, index)
        table.remove(self.header.windows, index)
    end
    table.insert(self.tabs, pos, name)
    
    -- if tab is new create a new Label
    if not index then
        self:createTabs()
    end
    
    --If the container isn't the right one change it (useful if removed in one adj tabwindow and added to another)
    self[name.."center"]:changeContainer(self.footer)
    self[name]:changeContainer(self.header)  
    
    local headername = self[name].name
    -- if name is already in windows delete it to put it into the right position
    local headerIndex = table.index_of(self.header.windows, headername)
    if headerIndex then
        table.remove(self.header.windows, headerIndex)
    end
    table.insert(self.header.windows, pos, headername)
    self.header.windowList[headername] = self[name]
    self[name]:show()
    self.header:organize()
    self:activateTab(name)
    if self.temporary then
        self[name].tempWindow = self.container.container
        self[name].tempTabWindow = self
    end
    
    -- put ToolTip on Label if TabText is to long to display
    setTabToolTip(self[name])
    return true
end

function Adjustable.TabWindow:addToTabWindow(container)
    local name = container.name
    self:addTab(name)
    container:detach()
    container:disconnect()
    container:changeContainer(self[name.."center"])
    container:resize("100%","100%")
    container:move(0,0)
    self[name].tabified = true
    
    if container.type == "adjustablecontainer" then
        container:lockContainer("full")
        if container.autoSave then
            container:disableAutoSave()
        end
        local titleText = string.gsub(container.titleText, "&amp;nbsp;", "")
        self:setTabText(name, titleText)
        self:createTabs()
    end
end

--transforms adjcontainer to a floating tab
function Adjustable.TabWindow:tabify(container)
    local x, y, width, height = container:get_x(), container:get_y(), container:get_width(), container:get_height()
    local parent = container.container
    self:addToTabWindow(container)
    self:transformTabContainer(container.name)
    self[container.name]:move(x,y)
    self[container.name]:resize(width,height)
    self[container.name]:changeContainer(parent)
    self:createTempWindow(self[container.name])
end

function Adjustable.TabWindow:addTabifyMenu(adjcontainer)
    if adjcontainer.type ~= "adjustablecontainer" then
        return "not an adjustable container"
    end
    adjcontainer:newCustomItem("Tabify", function() self:tabify(adjcontainer) end)
end

--- saves your container settings
-- like tab position and some other variables in your Mudlet Profile Dir/ Adjustable.TabWindow
-- to be reliable it is important that every Adjustable.TabWindow has an unique 'name'
-- @see Adjustable.TabWindow:load
function Adjustable.TabWindow:save(slot, dir)
    if type(self) ~= "table" then
        dir = slot
        slot = self
    end
    assert(slot == nil or type(slot) == "string" or type(slot) == "number", "Adjustable.TabWindow.save: bad argument #1 type (slot as string or number expected, got "..type(slot).."!)")
    assert(dir == nil or type(dir) == "string" , "Adjustable.TabWindow.save: bad argument #2 type (directory as string expected, got "..type(dir).."!)")
    
    dir = dir or self.defaultDir
    slot = slot or ""
    local saveDir = string.format("%s%s%s.lua", dir, "TabWindowTabs", slot)
    
    local mytable = {}
    -- save fixed tabs
    for k,v in pairs(Adjustable.TabWindow.all) do
        mytable[k] = {}
        mytable[k].tabs = v.tabs
        mytable[k].current = v.current
        mytable[k].temporary = v.temporary
    end
    -- save floating tabs, tempTabWindows and tabified containers
    for k,v in pairs(Adjustable.TabWindow.allTabs) do
        
        --floating tabs
        if v[k].floating then
            -- save the tabs adjustable container settings
            v[k]:save(slot, dir)
            -- get all floating tabs and their windownames
            mytable[v.name].floatingTabs = mytable[v.name].floatingTabs or {}
            mytable[v.name].floatingTabs[k] = "main"
            if v[k].windowname ~= "main" then
                mytable[v.name].floatingTabs[k] = v[k].windowname
            end
        end
        
        --tempTabWindows
        if v[k].tempWindow then
            --save tempWindow adjustable container settings
            v[k].tempWindow:save(slot, dir)
            mytable[v.name].windowname = v[k].tempWindow.windowname
            --save window where tempStyle came from
            mytable[v.name].tempStyle = v[k].tempTabWindow.tempStyle
        end
        
        --tabified containers
        if v[k].tabified then
            mytable.tabifiedContainers = mytable.tabifiedContainers or {}
            mytable.tabifiedContainers[#mytable.tabifiedContainers + 1] = k
        end
    end
    
    if not(io.exists(dir)) then lfs.mkdir(dir) end
    table.save(saveDir, mytable)
end


--- restores/loads the before saved settings 
-- it is very important to load after all TabWindows are created
-- @see Adjustable.TabWindow:save
function Adjustable.TabWindow:load(slot, dir)
    if type(self) ~= "table" then
        dir = slot
        slot = self
    end
    assert(slot == nil or type(slot) == "string" or type(slot) == "number", "Adjustable.TabWindow.load: bad argument #1 type (slot as string or number expected, got "..type(slot).."!)")
    assert(dir == nil or type(dir) == "string" , "Adjustable.TabWindow.load: bad argument #2 type (directory as string expected, got "..type(dir).."!)")
    dir = dir or self.defaultDir
    local slot = slot or ""
    local loadDir = string.format("%s%s%s.lua", dir, "TabWindowTabs", slot)
    local mytable = {}
    if io.exists(loadDir) then
        table.load(loadDir, mytable)
    else
        return "No saved settings found at: "..loadDir
    end
    
    -- find the tabified container by name
    local function findWindow(cont, name)
        cont = cont or Geyser
        for k, v in pairs(cont.windowList) do
            if name == v.name then
                return v
            end
            if findWindow(v, name) then
                return findWindow(v, name)
            end
        end
    end
    
    -- create Tabified Windows
    if mytable.tabifiedContainers then 
        for k,v in ipairs (mytable.tabifiedContainers) do
            local container = findWindow(nil, v)
            if not (Adjustable.TabWindow.allTabs[v]) then 
                Adjustable.TabWindow.all[Adjustable.TabWindow.all_windows[1]]:addToTabWindow(container)
            end
        end
        mytable.tabifiedContainers = nil
    end
    -- create TempWindows and TempTabWindows
    for k,v in pairs (mytable) do
        if v.temporary then
            if not Adjustable.TabWindow.all[k] then
                local tempStyleWindow = Adjustable.TabWindow.all[v.tempStyle]
                tempStyleWindow:createTempWindow(nil, k)
            end
            Adjustable.TabWindow.all[k].container.container:load(slot, dir)
            if v.windowname ~= "main" then
                Adjustable.TabWindow.all[k].container.container:changeContainer(Geyser.windowList[v.windowname.."Container"].windowList[v.windowname])
            end
        end
    end
    
    
    for k,v in pairs(mytable) do
        -- load fixed Tabs
        local myWindow = Adjustable.TabWindow.all[k]
        for k1,v1 in ipairs(v.tabs) do
            local myTabWindow = Adjustable.TabWindow.allTabs[v1]
            if myTabWindow then
                local myTab = myTabWindow[v1]
                if myTab.floating then
                    myTabWindow:restoreTab(v1)
                end
                if not myWindow.header.windowList[v1] then
                    myTabWindow:changeTabContainer(v1, myWindow)
                end
                myWindow:addTab(v1,k1)
            end
        end
        if myWindow then
            myWindow:deactivateTab()
            myWindow.current = v.current
            tempTimer(0, function() myWindow:activateTab(v.current) end)
            myWindow:raiseAll() 
        end
        -- load floating Tabs
        if v.floatingTabs then
            for k1, v1 in pairs(v.floatingTabs) do
                local myTabWindow = Adjustable.TabWindow.allTabs[k1]
                local styleTabWindow = Adjustable.TabWindow.all[k]
                if myTabWindow and styleTabWindow  then
                    local myTab = myTabWindow[k1]
                    if myTabWindow ~= styleTabWindow then
                      myTabWindow:changeTabContainer(k1, styleTabWindow)
                      myTabWindow = styleTabWindow
                    end
                    myTabWindow:transformTabContainer(k1)
                    -- send my Tab to a UserWindow if saved there
                    if v1 ~= "main" then
                        myTab:changeContainer(Geyser.windowList[v1.."Container"].windowList[v1])
                    end
                    -- load Adjustable Container settings
                    myTab:load(slot, dir)
                end
            end
        end        
    end
end

-- EMCO by demonnic https://github.com/demonnic/EMCO
function Adjustable.TabWindow:transferEMCO(emco)
    local EMCO = EMCO or require("MDK-1.EMCO")
    emco:hide()
    local emco_tabs = emco.tabs
    local emco_tabwindows = emco.consoles
    local emco_windows = emco.mc
    
    -- xEcho override
    local myXEcho = 
    function(s, tabName, message, xtype, excludeAll)
        s.currentTab = self.current        
        if s.blink and tabName ~= s.currentTab then
            if not (s.allTabName == s.currentTab and not s.blinkFromAll) then
                s.tabsToBlink[tabName] = true
            end
        end   
        EMCO.xEcho(s, tabName, message, xtype, excludeAll)
    end
    
    -- Flash override
    local myFlash = 
    function(s)
        Geyser.Container.flash(s) 
        raiseWindow(s.name .."_dimensions_flash")
    end
    -- doBlink override
    local myDoBlink =
    function(s)
        s.currentTab = self.current
        if s.blink then
            if s.allTab and not s.blinkFromAll and (s.currentTab == s.allTabName or self[s.allTabName.."center"].hidden == false) then
                s.tabsToBlink = {}
            elseif s.tabsToBlink[s.currentTab] then
                s.tabsToBlink[s.currentTab] = nil
            end
        end    
        for tab,_ in pairs(s.tabsToBlink) do
            if not self[tab].floating and self[tab.."center"].hidden then
                s.tabs[tab]:flash()
            else
                s.tabsToBlink[tab] = nil
            end
        end
    end
    
    --function for transfering tab and console
    local function transferTab(tabwindow)
        emco_windows[tabwindow]:show()
        emco_windows[tabwindow]:changeContainer(self[tabwindow.."center"])
        emco_tabs[tabwindow]:changeContainer(self[tabwindow])
        emco_tabs[tabwindow]:move(0,0)
        emco_tabs[tabwindow]:resize("100%","100%")
        emco_tabs[tabwindow]:hide()
        emco_tabs[tabwindow].flash = myFlash
        if emco_tabs[tabwindow].font then
            self[tabwindow].adjLabel:setFont(emco_tabs[tabwindow].font)
        end  
    end
    
    --addTab override
    local myAddTab =
    function(s, tabName, position)
        EMCO.addTab(s, tabName)
        self:addTab(tabName, position)
        transferTab(tabName)
        self:activateTab(tabName)
    end
    
    --removeTab override
    local myRemoveTab =
    function(s, tabName)
        EMCO.removeTab(s, tabName)
        if self[tabName].floating then
            self:restoreTab(tabName)
        end
        Adjustable.TabWindow.allTabs[tabName]:removeTab(tabName)
    end
    
    --transfering process
    self.tabs = table.n_union(self.tabs, emco_tabwindows)
    self:createTabs()
    for k,v in ipairs(emco_tabwindows) do
        transferTab(v)
    end
    self:activateTab(emco.currentTab)
    emco.reset = function() end
    emco.removeTab = myRemoveTab
    emco.addTab = myAddTab
    emco.xEcho = myXEcho
    emco.doBlink = myDoBlink
    emco.setGap = function(s, gap) EMCO.setGap(s, gap) self:setGap(math.max(2,gap) -2) end
    emco.setTabHeight = function(s, height) EMCO.setTabHeight(s, height) self:setTabHeight(height+2) end
    emco.setTabBoxColor = function(s, color) EMCO.setTabBarColor(s, color) self:setTabBarColor(color) end
    emco.setTabBoxCSS = function(s, css) EMCO.setTabBoxCSS(s, css) self:setTabBarCSS(css) end
    emco.setActiveTabBGColor = function(s, color) self:setActiveTabBGColor(color) EMCO.setActiveTabBGColor(s, color) end
    emco.setInactiveTabBGColor = function(s, color) self:setInactiveTabBGColor(color) EMCO.setInactiveTabBGColor(s, color) end
    emco.setActiveTabFGColor = function(s, color) EMCO.setActiveTabFGColor(s, color) self:setActiveTabFGColor(color) end
    emco.setInactiveTabFGColor = function(s, color) EMCO.setInactiveTabFGColor(s, color) self:setInactiveTabFGColor(color) end
    emco.setSingleTabFont = function(s, tab, font) EMCO.setSingleTabFont(s, tab, font) self:setSingleTabFont(tab, font) end
    emco.setTabFont = function(s, font) EMCO.setTabFont(s, font) self:setTabFont(font) end
    emco.save = function(s, slot, dir) EMCO.save(s) self:save(slot, dir) end
    emco.load = function(s, slot, dir) EMCO.load(s) self:load(slot, dir) end
end

-- EMCO by demonnic https://github.com/demonnic/EMCO
-- convert EMCO to Adjustable TabWindow
function Adjustable.TabWindow.convertEMCO(emco)
    if emco.myTabWindow then
        return
    end
    emco.myTabWindow = emco.myTabWindow or Adjustable.TabWindow:new({
        name = emco.name.."TabWindow", 
        x = emco.x, 
        y = emco.y, 
        width = emco.width, 
        height = emco.height,
        centerStyle = "background-color: rgba(0,0,0,0);",
        footerStyle = "background-color: rgba(0,0,0,0);",
        activeTabStyle = emco.activeTabCSS,
        inactiveTabStyle = emco.inactiveTabCSS,
        tabBarHeight  = emco.tabHeight + 2,
        gap = emco.gap - 2,
    },emco.container)
    emco.myTabWindow:setActiveTabFGColor(emco.activeTabFGColor)
    emco.myTabWindow:setInactiveTabFGColor(emco.inactiveTabFGColor)
    emco.myTabWindow:setActiveTabBGColor(emco.activeTabBGColor)
    emco.myTabWindow:setInactiveTabBGColor(emco.inactiveTabBGColor)
    emco.myTabWindow:transferEMCO(emco)
    emco.hide = function() Geyser.Container.hide(emco.myTabWindow) end
    emco.show = function() Geyser.Container.show(emco.myTabWindow) end
    emco:show()
end

-- Save a reference to our parent constructor
Adjustable.TabWindow.parent = Geyser.Container
-- Create table to put every Adjustable.TabWindow in it
Adjustable.TabWindow.all = Adjustable.TabWindow.all or {}
Adjustable.TabWindow.all_windows = Adjustable.TabWindow.all_windows or {}
Adjustable.TabWindow.allTabs = Adjustable.TabWindow.allTabs or {}

-- tabwindow constructor
function Adjustable.TabWindow:new(cons, container)
    Geyser.HBox.organize = Geyser.HBox.organize or Geyser.HBox.reposition
    local me = self.parent:new(cons, container)
    cons = cons or {}
    setmetatable(me, self)
    self.__index = self
    me.type = "adjustabletabwindow"
    me.defaultDir = me.defaultDir or getMudletHomeDir().."/AdjustableTabWindow/"
    me.tabs = me.tabs or {}
    me.tabTxtColor = me.tabTxtColor or "white"
    me.tabPadding = me.tabPadding or 12
    me.color1 = me.color1 or "rgb(0,0,100)"
    me.color2 = me.color2 or "rgb(0,0,70)"
    me.activeTabBGColor = me.activeTabBGColor or me.color1
    me.inactiveTabBGColor = me.inactiveTabBGColor or me.color2
    me.tabBarHeight = me.tabBarHeight or "35"
    me.gap = me.gap or 0
    me.footerStyle = me.footerStyle or [[
    background-color: ]]..me.color1..[[;
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 10px;
    ]]
    
    me.centerStyle = me.centerStyle or [[
    background-color: ]]..me.color2..[[;
    border-radius: 10px;
    margin: 5px;
    ]]
    
    me.inactiveTabStyle = me.inactiveTabStyle or [[QLabel::hover{
        background-color: ]]..me.activeTabBGColor..[[;
        color: ]]..me.tabTxtColor..[[;
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
        margin-right: 1px;
        margin-left: 1px;
        qproperty-alignment: 'AlignVCenter';
    }
    QLabel::!hover{
        background-color: ]]..me.inactiveTabBGColor..[[;
        color: ]]..me.tabTxtColor..[[;
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
        margin-right: 1px;
        margin-left: 1px;
        qproperty-alignment: 'AlignVCenter';
    }
    ]]
    
    me.activeTabStyle = me.activeTabStyle or [[
    background-color: ]]..me.activeTabBGColor..[[;
    color: ]]..me.tabTxtColor..[[;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    margin-right: 1px;
    margin-left: 1px;
    qproperty-alignment: 'AlignVCenter';
    ]]
    
    me.chosenTabStyle = me.chosenTabStyle or [[
    background-color: rgba(255,30,0,60%);
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    margin-right: 1px;
    margin-left: 1px;
    color: ]]..me.tabTxtColor..[[;
    
    ]]
    
    
    me.overlayStyle = me.overlayStyle or [[
    background-color: rgba(0,0,0,0%);
    border: 2px solid white;]]
    
    me.tabBarStyle = me.tabBarStyle or [[
    background-color: rgba(0,0,0,0%);
    ]]
    
    me.tempWindowConf = me.tempWindowConf or 
    {
        buttonsize = "12",
        buttonFontSize = "7",
        padding = 9,
        buttonstyle = [[
        QLabel{ border-radius: 4px; background-color: rgba(80,80,80,80%);}
        QLabel::hover{ background-color: rgba(60,60,60,50%);}
        ]],
        adjLabelstyle = [[background-color: rgba(0,0,0,90%); border: 2px solid rgb(50,50,50);]]
    }
    
    me:createBaseContainers()
    me:createTabs()
    
    if me.tabBarColor then 
        me:setTabBarColor(me.tabBarColor)
    else
        me.tabBarColor = "black"
    end
    
    local found = string.match(" "..me.activeTabStyle, "(%scolor:).-(;)")
    if not(found) then
        me.activeTabFGColor = me.activeTabFGColor or me.tabTxtColor
    end
    
    found = string.match(" "..me.inactiveTabStyle, "(%scolor:).-(;)")
    if not(found) then
        me.inactiveTabFGColor = me.inactiveTabFGColor or me.tabTxtColor
    end
    
    if me.activeTabFGColor then 
        me:setActiveTabFGColor(me.activeTabFGColor)
    end
    if me.inactiveTabFGColor then
        me:setInactiveTabFGColor(me.inactiveTabFGColor)
    end
    
    me.current = me.current or me.tabs[#me.tabs]
    
    if me.tabs[1] then
        me:activateTab(me.tabs[1])
    end
    tempTimer(0, 
    function()
        local tabNr = #me.tabs 
        if me.tabs[1] and tabNr &gt; 1 then 
            me[me.tabs[tabNr].."center"]:hide()
        end 
    end )
    
    if not Adjustable.TabWindow.all[me.name] then
        Adjustable.TabWindow.all_windows[#Adjustable.TabWindow.all_windows + 1] = me.name
    end
    Adjustable.TabWindow.all[me.name] = me
    
    return me
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<Script isActive="yes" isFolder="no">
				<name>Gooey Variables</name>
				<packageName></packageName>
				<script>gooey = gooey or {}

gooey.gui = gooey.gui or {} --gui elements, containers and crap
gooey.vars = gooey.vars or {} --variables
gooey.funcs = gooey.funcs or {} --functions
gooey.data = gooey.data or {} --tables
gooey.triggers = gooey.triggers or {} --triggers
gooey.timers = gooey.timers or {} --triggers

-- Built-in modules:
----sea
----hunt
----combat
----serverSettings --stores personal server-side settings, command separator, pagelength, curing
----gmcp --info from GMCP
----localSettings - local settings (module folder, sound etc)

gooey.gui.styles = gooey.gui.styles or {}
gooey.gui.fontSize = gooey.gui.fontSize or {}
gooey.gui.vars = gooey.gui.vars or {}
gooey.gui.build = gooey.gui.build or {} --exception that houses the functions to build the gui

gooey.vars.sea = gooey.vars.sea or {}
gooey.vars.hunt = gooey.vars.hunt or {}
gooey.vars.combat = gooey.vars.combat or {}
gooey.vars.mode = { ["sea"] = false, ["hunt"] = true, ["combat"] = false, }
gooey.vars.serverSettings = gooey.vars.serverSettings or {}
gooey.vars.gmcp = gooey.vars.gmcp or {}
  gooey.vars.gmcp.old = gooey.vars.gmcp.old or {}
gooey.vars.gui = gooey.vars.gui or {}
gooey.vars.localSettings = gooey.vars.localSettings or {}

gooey.funcs.sea = gooey.funcs.sea or {}
gooey.funcs.hunt = gooey.funcs.hunt or {}
gooey.funcs.combat = gooey.funcs.combat or {}
gooey.funcs.serverSettings = gooey.funcs.serverSettings or {} 
gooey.funcs.gmcp = gooey.funcs.gmcp or {}

gooey.data.sea = gooey.data.sea or {}
gooey.data.hunt = gooey.data.hunt or {}
gooey.data.combat = gooey.data.combat or {}
gooey.data.serverSettings = gooey.data.serverSettings or {} 
gooey.data.gmcp = gooey.data.gmcp or {} 

gooey.triggers.sea = gooey.triggers.sea or {}
gooey.triggers.hunt = gooey.triggers.hunt or {}
gooey.triggers.combat = gooey.triggers.combat or {}
gooey.triggers.serverSettings = gooey.triggers.serverSettings or {}
gooey.triggers.gmcp = gooey.triggers.gmcp or {}

--adjust fonts here

gooey.gui.fontSize.peopleConsole = 10
gooey.gui.fontSize.topright = 10
gooey.gui.fontSize.denizensConsole = 10
gooey.gui.fontSize.people = 10
gooey.gui.fontSize.midleft = 10
gooey.gui.fontSize.chatClans = 10
gooey.gui.fontSize.roomContainer = 10
gooey.gui.fontSize.popOutWindow = 10
gooey.gui.fontSize.rageContainer = 10
gooey.gui.fontSize.topleft = 10
gooey.gui.fontSize.activityStatusContainer = 10
gooey.gui.fontSize.chatTells = 10
gooey.gui.fontSize.chatShip = 10
gooey.gui.fontSize.shipPromptConsole = 10
gooey.gui.fontSize.bottomright = 10
gooey.gui.fontSize.chatMisc = 10
gooey.gui.fontSize.chatMarket = 10
gooey.gui.fontSize.denizens = 10
gooey.gui.fontSize.chatHouse = 10
gooey.gui.fontSize.promptContainer = 10
gooey.gui.fontSize.chatAll = 10
gooey.gui.fontSize.bottomleft = 10
gooey.gui.fontSize.chatCity = 10
gooey.gui.fontSize.chatContainer = 10
gooey.gui.fontSize.activityStatusConsole = 10
gooey.gui.fontSize.promptConsole = 10
gooey.gui.fontSize.bottom = 10
gooey.gui.fontSize.popOutConsole = 10
gooey.gui.fontSize.chatParty = 10
gooey.gui.fontSize.top = 10
gooey.gui.fontSize.gaugeContainer = 10
--to update
--lua for k, v in pairs(gooey.gui) do if gooey.gui[k].type == "miniConsole" or gooey.gui[k].type == "adjustablecontainer" or gooey.gui[k].type == "label" then echo("\ngooey.gui.fontSize."..gooey.gui[k].name.." = 10") end end



--change this if you want to have a single prompt, instead of one every line
gooey.vars.gui.singleprompt = gooey.vars.gui.singleprompt or false

--determines if the players and the items consoles are one next to the other or one above the other. Options are "vertical" or "horizontal"
gooey.gui.preferredRoomLayout = gooey.gui.preferredRoomLayout or "vertical" 


--define some styles 
gooey.gui.styles = {
basic = { adjLabel = "background-color:rgba(20,20,20,100%); border: 2px inset dimgray; border-color: rgba(128, 128, 128, 100%);", 
          buttonstyle = [[QLabel{ background-color: rgba(20,20,20,100%);}
                        QLabel::hover{ background-color: rgba(160,160,160,50%); border-color: rgba(102, 102, 102, 1);} ]],
        },
basic2 = { adjLabel = "background-color:rgba(51, 51, 51, 1); border: 2px inset dimgray; border-color: rgba(85, 85, 85, 1); color: rgba(204, 204, 204, 1);",
          buttonstyle = [[QLabel{ background-color: rgba(51, 51, 51, 1);border-color: rgba(85, 85, 85, 1); color:rgba(204, 204, 204, 1) }
                        QLabel::hover{background-color: rgba(68, 68, 68, 1); border-color: rgba(102, 102, 102, 1);} ]]
        }
}

--change this to your prefered style
gooey.gui.myStyle = "basic"

</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Build Main</name>
				<packageName></packageName>
				<script>local myadjlabel = gooey.gui.styles[gooey.gui.myStyle].adjLabel
local mybuttonstyle = gooey.gui.styles[gooey.gui.myStyle].buttonstyle

function gooey.gui.build.frame()
--main skeleton
gooey.gui.top = --gooey.gui.top or 
  Adjustable.Container:new({ name = "top", y="0%", height = "10%", 
  buttonFontSize = 7, buttonsize = 10, padding = 2, 
  adjLabelstyle = myadjlabel, buttonstyle = mybuttonstyle, })
  
  local botheight
  if gooey.vars.gui.singleprompt then 
    botheight = "10%"
  else 
    botheight = "8%"
  end
gooey.gui.bottom = gooey.gui.bottom or 
  Adjustable.Container:new({ name = "bottom", height = "30%", y = "-10%", 
  buttonFontSize = 7, buttonsize = 10, padding = 2, 
  adjLabelstyle = myadjlabel, buttonstyle = mybuttonstyle,})
  
gooey.gui.topright = gooey.gui.topright or 
  Adjustable.Container:new({ name = "topright", y = "0%", height = "50%", x = "-20%", width = "30%", 
  buttonFontSize = 7, buttonsize = 10, padding = 2, 
  adjLabelstyle = myadjlabel, buttonstyle = mybuttonstyle, })
gooey.gui.bottomright = gooey.gui.bottomright or 
  Adjustable.Container:new({ name = "bottomright", y = "50%", height = "50%", x = "-20%", width = "30%", 
  buttonFontSize = 7, buttonsize = 10, padding = 2, 
  adjLabelstyle = myadjlabel, buttonstyle = mybuttonstyle,})
gooey.gui.topleft = gooey.gui.topleft or 
  Adjustable.Container:new({ name = "topleft", x = "0%", y = "0%", height = "33%", width = "20%", 
  buttonFontSize = 7, buttonsize = 10, padding = 2, 
  adjLabelstyle = myadjlabel, buttonstyle = mybuttonstyle,})
gooey.gui.midleft = gooey.gui.midleft or 
  Adjustable.Container:new({ name = "midleft", x = "0%", y = "33%", height = "33%", width = "20%", 
  buttonFontSize = 7, buttonsize = 10, padding = 2,
  adjLabelstyle = myadjlabel, buttonstyle = mybuttonstyle, })
gooey.gui.bottomleft = gooey.gui.bottomleft or 
  Adjustable.Container:new({ name = "bottomleft", x = "0%", y = "66%", height = "34%", width = "20%", 
  buttonFontSize = 7, buttonsize = 10, padding = 2, 
  adjLabelstyle = myadjlabel, buttonstyle = mybuttonstyle, })


gooey.gui.top:attachToBorder("top")
gooey.gui.bottom:attachToBorder("bottom")

gooey.gui.topright:attachToBorder("right")
gooey.gui.bottomright:attachToBorder("right")

gooey.gui.topleft:attachToBorder("left")
gooey.gui.midleft:attachToBorder("left")
gooey.gui.bottomleft:attachToBorder("left")

gooey.gui.top:connectToBorder("left")
gooey.gui.top:connectToBorder("right")
gooey.gui.bottom:connectToBorder("left")
gooey.gui.bottom:connectToBorder("right")

gooey.gui.topleft:connectToBorder("left")
gooey.gui.midleft:connectToBorder("left")
gooey.gui.bottomleft:connectToBorder("left")
gooey.gui.topright:connectToBorder("right")
gooey.gui.bottomright:connectToBorder("right")

end

registerAnonymousEventHandler("sysLoadEvent", "gooey.gui.build.frame")


</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Room build</name>
					<packageName></packageName>
					<script>local myadjlabel = gooey.gui.styles[gooey.gui.myStyle].adjLabel
local mybuttonstyle = gooey.gui.styles[gooey.gui.myStyle].buttonstyle


function gooey.gui.build.room()
--room info - VBox to separate the room name console from the denizens and people consoles
gooey.gui.roomVBox = gooey.gui.roomVBox or 
  Geyser.VBox:new({ name="roomVBox", x = 0, y = "0%", width = "100%", height = "100%"}, 
  gooey.gui.topleft)

gooey.gui.roomNameLabel = gooey.gui.roomNameLabel or 
    Geyser.Label:new({name = "roomNameLabel", x = "0%", y="0%", height = "12%", width = "100%", 
    color = "black", v_policy=Geyser.Fixed }, 
      gooey.gui.roomVBox )

gooey.gui.roomNameLabel: setStyleSheet( [[background-color:rgba(20,20,20,100%); border: 2px inset; border-color:rgba(128, 128, 128, 100%);]])

if gooey.vars.gmcp and gooey.vars.gmcp.roomname then gooey.gui.roomNameLabel:echo(gooey.vars.gmcp.roomname, "ansiYellow", "c13") end

gooey.gui.roomContainer = gooey.gui.roomContainer or 
  Adjustable.Container:new({
    name = "roomContainer", y = "0%", x = "0%", width = "75%", height = "100%",
    buttonFontSize = 7, buttonsize = 10, padding = 6, 
    adjLabelstyle = myadjlabel, buttonstyle = mybuttonstyle,}, 
      gooey.gui.roomVBox)

gooey.gui.denizens = gooey.gui.denizens or 
  Adjustable.Container:new({
    name = "denizens", y = "0%", x = "0%", width = "75%", height = "100%",
    buttonFontSize = 7, buttonsize = 10, padding = 6, 
    adjLabelstyle = myadjlabel, buttonstyle = mybuttonstyle,}, 
      gooey.gui.roomContainer)
      
gooey.gui.people = gooey.gui.people or 
  Adjustable.Container:new({
    name = "people", y = "0%", x = "0%", width = "25%", height = "100%",
    buttonFontSize = 7, buttonsize = 10, padding = 6, 
    adjLabelstyle = myadjlabel, buttonstyle = mybuttonstyle,}, 
      gooey.gui.roomContainer)

  gooey.gui.denizensConsole = gooey.gui.denizensConsole or 
      Geyser.MiniConsole:new({name = "denizensConsole", x = "0%", y="1%", height = "100%", width = "100%", 
      color = "black", autoWrap = true, padding = 3}, 
        gooey.gui.denizens )
        
  gooey.gui.peopleConsole = gooey.gui.peopleConsole or 
      Geyser.MiniConsole:new({name = "peopleConsole", x = "0%", y="1%", height = "100%", width = "100%", 
      color = "black", autoWrap = true, padding = 3}, 
        gooey.gui.people )
        
  if gooey.gui.preferredRoomLayout then 
    gooey.funcs.swapRoomLayout(gooey.gui.preferredRoomLayout) 
  end
end   

</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Mid Left build</name>
					<packageName></packageName>
					<script>local myadjlabel = gooey.gui.styles[gooey.gui.myStyle].adjLabel
local mybuttonstyle = gooey.gui.styles[gooey.gui.myStyle].buttonstyle

function gooey.gui.build.midleft()

gooey.gui.activityStatusContainer = gooey.gui.activityStatusContainer or 
  Adjustable.Container:new({
    name = "activityStatusContainer", y = 0, x = "0%", height = "100%", width = "100%", 
    buttonFontSize = 7, buttonsize = 10, padding = 6, 
    adjLabelstyle = myadjlabel, buttonstyle = mybuttonstyle,}, 
      gooey.gui.midleft)
      
gooey.gui.activityStatusConsole = gooey.gui.activityStatusConsole or 
    Geyser.MiniConsole:new({name = "activityStatusConsole", x = "0%", y="0%", height = "100%", width = "100%", 
    color = "black", autoWrap = true, padding = 3}, 
      gooey.gui.activityStatusContainer ) 
      
-- gooey.gui.affdeffLabel = gooey.gui.affdeffLabel or 
    -- Geyser.Label:new({name = "affdeffLabel", x = "28%", y="1%", height = "100%", width = "72%", 
    -- color = "black" , padding = 3}, 
      -- gooey.gui.activityStatusConsole )
-- 
-- gooey.gui.affdeffLabel:setStyleSheet([[
  -- background-color: rgba(0,0,0,0%);]])     
-- gooey.gui.affdeffLabel:setAlignment("r")
      
gooey.gui.activityKogman = gooey.gui.activityKogman or 
    Geyser.Label:new({name = "activityKogman", x = "0%", y="1%", height = "98%", width = "30%", 
    color = "firebrick", padding = 3}, 
      gooey.gui.activityStatusConsole )
      


if gooey.vars.gmcp.gender then 
  gooey.funcs.getKogman()
end
  
end

function gooey.funcs.getKogman()
  local image = ""

  if gooey.vars.gmcp.gender == "female" or "fae" then
    image = gooey.vars.localSettings.gooeyFolder.."babygurl2.png"
  else
    image = gooey.vars.localSettings.gooeyFolder.."babyboi3.png"
  end  
  
  if gooey.vars.mode.hunt or gooey.vars.mode.combat then
    gooey.gui.activityKogman:setStyleSheet([[
      border-image: url("]]..image..[[");
      background-repeat: no-repeat; background-position: top left; background-origin: margin; 
    ]])  
  end 
end</script>
					<eventHandlerList />
					<Script isActive="no" isFolder="no">
						<name>my afflictions</name>
						<packageName></packageName>
						<script></script>
						<eventHandlerList />
					</Script>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Map build</name>
					<packageName></packageName>
					<script>local myadjlabel = gooey.gui.styles[gooey.gui.myStyle].adjLabel
local mybuttonstyle = gooey.gui.styles[gooey.gui.myStyle].buttonstyle

function gooey.gui.build.map()

gooey.gui.map = gooey.gui.map or {}
gooey.gui.map.current = "Mapper"


gooey.gui.map.container = gooey.gui.map.container or 
  Adjustable.Container:new({
    name = "gooey.gui.map.container", y = 0, x = "0%", height = "100%", width = "100%", 
    buttonFontSize = 7, buttonsize = 10, padding = 6, 
    adjLabelstyle = myadjlabel, buttonstyle = mybuttonstyle,}, 
      gooey.gui.bottomleft)
      
gooey.gui.map.Mapper = gooey.gui.map.Mapper or 
  Geyser.Mapper:new({x = 0, y = 0, width = "100%", height = "100%", name="Mapper"}, gooey.gui.map.container)
showWindow("Mapper")

gooey.gui.map.Ocean = Geyser.MiniConsole:new({
    name = "Ocean",
    x = 0, y = 0,
    width = "100%",
    height = "100%", padding = 3, color = "black"
  },gooey.gui.map.container)  
--setBackgroundColor("Ocean", 0,0,0,255)
hideWindow("Ocean")
setConsoleBufferSize("Ocean", 100, 1000) 
  
gooey.gui.map.Wilderness = Geyser.MiniConsole:new({
    name = "Wilderness",
    x = 0, y = 0,
    width = "100%",
    height = "100%", padding = 3, color = "black"
  },gooey.gui.map.container)  
--setBackgroundColor("Wilderness", 0,0,0,255)  
hideWindow("Wilderness")
  
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Bottom build</name>
					<packageName></packageName>
					<script>local myadjlabel = gooey.gui.styles[gooey.gui.myStyle].adjLabel
local mybuttonstyle = gooey.gui.styles[gooey.gui.myStyle].buttonstyle



function gooey.gui.build.bottom()

  gooey.gui.shipPromptContainer = gooey.gui.shipPromptContainer or 
    Adjustable.Container:new({ name = "promptContainer", x = "0%", y= "0%", width = "100%", height = "25%",
    buttonFontSize = 7, buttonsize = 10, padding = 0, v_policy = Geyser.Dynamic,
    adjLabelstyle = myadjlabel, buttonstyle = mybuttonstyle, }, gooey.gui.bottom)
  
    gooey.gui.shipPromptConsole = gooey.gui.shipPromptConsole or 
        Geyser.Label:new({name = "shipPromptConsole", x = "0%", y= "0%", height = "100%", width = "100%", 
        color = "black", padding = 0, margin = 0 },
          gooey.gui.shipPromptContainer)
  
  gooey.gui.promptContainer = gooey.gui.rageContainer or 
    Adjustable.Container:new({ name = "promptContainer", x = "0%", y="0%", width = "100%", height = "25%", 
    buttonFontSize = 7, buttonsize = 10, padding = 1, v_policy = Geyser.Dynamic,
    adjLabelstyle = myadjlabel, buttonstyle = mybuttonstyle, }, gooey.gui.bottom)

    gooey.gui.promptConsole = gooey.gui.promptConsole or 
        Geyser.Label:new({name = "promptConsole", x = "0%", y= "0%", height = "100%", width = "100%", 
        color = "black", padding = 0, margin = 0 }, gooey.gui.promptContainer )

  if not gooey.vars.gui.singleprompt then 
    gooey.gui.promptContainer:hide()
  end
        
  gooey.gui.rageContainer = gooey.gui.rageContainer or 
    Adjustable.Container:new({ name = "rageContainer", x = "0%", y = -65, height = "27px", width = "100%", 
    buttonFontSize = 7, buttonsize = 10, padding = 0, v_policy = Geyser.Fixed,
    adjLabelstyle = myadjlabel, buttonstyle = mybuttonstyle, }, gooey.gui.bottom)
      
  gooey.gui.gaugeContainer = gooey.gui.gaugeContainer or 
      Adjustable.Container:new({ name = "gaugeContainer", x = "0%", y = -30, height = "26px", width = "100%",
      color = "red", padding = 0, margin = 0, v_policy = Geyser.Fixed,
      adjLabelstyle = myadjlabel, buttonstyle = mybuttonstyle, }, 
        gooey.gui.bottom)
  
end

</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>rage</name>
						<packageName></packageName>
						<script>local myadjlabel = gooey.gui.styles[gooey.gui.myStyle].adjLabel
local mybuttonstyle = gooey.gui.styles[gooey.gui.myStyle].buttonstyle


--on cooldown
onCooldown = "background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #444444, stop: 0.1 #444444, stop: 0.49 #333333, stop: 0.5 #333333, stop: 1 #444444);"

--ok to use
Rage = "background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #40453B, stop: 0.1 #373B32, stop: 0.49 #2E322A, stop: 0.5 #2E322A, stop: 1 #40453B);"

--no cooldown no rage
NopeSkill = "background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #1E1E23, stop: 0.1 #18181C, stop: 0.49 #121215, stop: 0.5 #121215, stop: 1 #1E1E23);"

ragefrontCSS = Geyser.StyleSheet:new([[
  background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #3C3B45, stop: 0.1 #242329, stop: 0.49 #1E1E23, stop: 0.5 #1E1E23, stop: 1 #3C3B45);
  border-style: solid;
  border-color: "grey";
  border-width: 1px;
  margin: 0px;
  font-weight: 400;
  text-align: center;
  padding: 1px;
]])

ragebackCSS = Geyser.StyleSheet:new([[
  background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #555555, stop: 0.1 #555555, stop: 0.49 #333333, stop: 0.5 #333333, stop: 1 #555555);
  border-style: solid;
  border-color: "grey";
  border-width: 1px;
  margin: 0px;
  font-weight: 400;
  text-align: center;
  padding: 1px;
]])

rageAmtCSS = Geyser.StyleSheet:new([[
  background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #1A1A17, stop: 0.49 #20201D, stop: 0.5 #20201D, stop: 1 #1A1A17);
  border-style: solid;
  border-color: "gray";
  border-width: 1px;
  margin: 0px;
  font-weight: bold;
  padding = 1px;
]])

function gooey.gui.build.rage()

  gooey.gui.rageHBox = gooey.gui.rageHBox or
    Geyser.HBox:new({  name = "rageHBox", x = "0%", y = "0%", height = "100%", width = "100%", padding = 0,
    },gooey.gui.rageContainer )
  
  gooey.gui.rageAmt = Geyser.Label:new({name = "rageAmt", width = 40 , h_policy=Geyser.Fixed, }, gooey.gui.rageHBox)
  gooey.gui.rageAmt:setFontSize(9)
  gooey.gui.rageAmt:setStyleSheet(rageAmtCSS:getCSS())
  gooey.gui.rageAmt:setFormat("cb")
  gooey.gui.rageAmt:echo(gooey.vars.gmcp.rage or "100")
  gooey.gui.rageAmt:setFgColor("#9BA191")
  for i = 1, 6, 1 do
    local gname = "rageGauge"..i
    local lname = "rageLabel"..i
    local sname = "rageWatch"..i
    local fkey
    gooey.gui[gname] = --gooey.gui[lname] or
      Geyser.Gauge:new({name = gname}, gooey.gui.rageHBox)
    gooey.gui[gname]:setFormat("cb")
    gooey.gui[gname]:setFgColor("grey")
    gooey.gui[gname].back:setStyleSheet(ragebackCSS:getCSS())
    gooey.gui[gname].front:setStyleSheet(ragefrontCSS:getCSS())

    gooey.gui[gname]:echo("&lt;pre style='font-size:16px; color: #E1E3DE; text-align:center; padding:1px; margin:1px;'&gt; Rage skill name&lt;span style='font-size:13px; color:grey; text-align: right;'&gt;  fkey&lt;/span&gt;&lt;/pre&gt;&lt;pre style='font-size:14px; color:grey; text-align:center; padding:1px; margin:1px;'&gt; Details &lt;\pre&gt;")

    gooey.gui[lname] = 
      Geyser.Label:new({name = lname, x = "0%", y = "0%", height = "100%", width = "100%" }, gooey.gui[gname])
    gooey.gui[lname]:setStyleSheet([[background-color:rgba(0,0,0,0%); qproperty-wordWrap: true;]]) 
    gooey.gui[lname]:setClickCallback(function() local attstr = string.gsub(gooey.data.hunt.myRageTable[i][6], "myTarget", gooey.vars.target) send(attstr) end)
    
    createStopWatch(sname)
    stopStopWatch(sname)
    resetStopWatch(sname)
  
  end
gooey.funcs.hunt.updateRageGauges()
end

--lua gooey.gui.rageLabel1:echo("&lt;pre style='font-size:20px; color:red; text-align:center; padding:1px; margin:1px;'&gt;something&lt;/pre&gt;&lt;pre style='font-size:15px; color:grey; text-align:center; padding:1px; margin:1px;'&gt;something else&lt;\pre&gt;")</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>gauges</name>
						<packageName></packageName>
						<script>local gaugeBorder = a_onelevel
local gaugeText = a_onelevel

local gaugeColors = {
healthBarBgCol =    "background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #812422, stop: 0.1 #812422, stop: 0.49 #A12D2B, stop: 0.5 #A12D2B, stop: 1 #812422);",
--healthBarBgCol =    "background-color: QLinearGradient( x1: 0, y1: 0, x2: 0.2, y2: 2, stop: 0 #652D28, stop: 0.1 #7C1216, stop: 0.49 #9C5C56, stop: 0.5 #7C1216, stop: 1 #652D28);",
--healthBarBgCol =    "background-color: QLinearGradient( x1: 0.2, y1: 0, x2: 0, y2: 1, stop: 0 #658083, stop: 0.1 #9B5C55, stop: 0.69 #652D28, stop: 0.8 #9B5C55, stop: 1 #658083);", 
--healthBarCol = "#B8BDB2",
--manaBarBgCol =      "background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #0A4742, stop: 0.1 #0A4742, stop: 0.49 #0D5953, stop: 0.5 #0D5953, stop: 1 #0A4742);",
manaBarBgCol =      "background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #0A364A, stop: 0.1 #1F4E6E, stop: 0.49 #2F576D, stop: 0.5 #1F4E6E, stop: 1 #0A364A);",
enduranceBarBgCol = "background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #56520C, stop: 0.1 #56520C, stop: 0.49 #6C660F, stop: 0.5 #6C660F, stop: 1 #56520C);",
willpowerBarBgCol = "background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #7C2742, stop: 0.1 #7C2742, stop: 0.49 #9B3153, stop: 0.5 #9B3153, stop: 1 #7C2742);",
expBarBgCol =       "background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #5A6156, stop: 0.1 #5A6156, stop: 0.49 #71796B, stop: 0.5 #71796B, stop: 1 #5A6156);",
}


gaugeBackCSS = Geyser.StyleSheet:new([[
  background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #1A1A17, stop: 0.49 #20201D, stop: 0.5 #20201D, stop: 1 #1A1A17);
  border-style: solid;
  border-color: "grey";
  border-width: 1px;
  margin: 0px;
  font-size: 13px; 
  font-weight: bold;
  padding = 1px;
  text-align: center;
]])

gaugeFrontCSS = Geyser.StyleSheet:new([[
  border-style: solid;
  border-color: "grey";
  border-width: 1px;
  margin: 0px;
  font-size: 13px; 
  font-weight: bold;
  padding = 1px;
  text-align: center;
]])

epbalonCSS = Geyser.StyleSheet:new([[
  background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #1A1A17, stop: 0.49 #20201D, stop: 0.5 #20201D, stop: 1 #1A1A17);
  border-style: solid;
  border-color: "grey";
  border-width: 1px;
  margin: 0px;
  font-weight: bold;
]])

epbaloffCSS = Geyser.StyleSheet:new([[
  background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #323232, stop: 0.49 #1F1F1F, stop: 0.5 #1F1F1F, stop: 1 #323232);
  border-style: solid;
  border-color: "grey";
  border-width: 1px;
  margin: 0px;
  font-weight: bold;
]])

gooey.vars.target = gooey.vars.target or "Glory&amp;Riches"

function gooey.gui.build.gauges()

gooey.gui.botomGaugeHbox = gooey.gui.botomGaugeHbox or 
  Geyser.HBox:new({ name = "botomGaugeHbox", x = "0%", y = "0%", width = "100%", height = "100%", padding = 0, margin = 0}, 
  gooey.gui.gaugeContainer)
  
gooey.gui.botomGaugeVbox = gooey.gui.botomGaugeVbox or 
  Geyser.VBox:new({ name = "botomGaugeVbox", x = "0%", y = "0%", width = "3%", height = "100%", h_policy=Geyser.Fixed, padding = 0, margin = 0}, 
  gooey.gui.botomGaugeHbox)

gooey.gui.eqBar = Geyser.Label:new({name = "eq", width = 20, w_policy=Geyser.Fixed, margin = 0, }, gooey.gui.botomGaugeVbox)
gooey.gui.eqBar:setFontSize(7)
gooey.gui.eqBar:setFgColor("#9BA191")
gooey.gui.balBar = Geyser.Label:new({name = "balBar", width = 20, w_policy=Geyser.Fixed, margin = 0, }, gooey.gui.botomGaugeVbox)
gooey.gui.balBar:setFontSize(7)
gooey.gui.balBar:setFgColor("#9BA191")

gooey.gui.eqBar:setStyleSheet(epbalonCSS:getCSS())
gooey.gui.balBar:setStyleSheet(epbalonCSS:getCSS())

gooey.gui.eqBar:echo("EQ")
gooey.gui.balBar:echo("BAL")

local gaugeList = { "healthBar", "manaBar", "enduranceBar", "willpowerBar", "expBar"}

for i = 1, #gaugeList, 1 do

  gooey.gui[gaugeList[i]] = Geyser.Gauge:new({ name = gaugeList[i], }, gooey.gui.botomGaugeHbox)
  gooey.gui[gaugeList[i]].back:setStyleSheet(gaugeBackCSS:getCSS())
  local myCSS = gaugeList[i].."BgCol"
  gaugeFrontCSS:setCSS(gaugeColors[myCSS])
  gooey.gui[gaugeList[i]].front:setStyleSheet(gaugeFrontCSS:getCSS())

  gooey.gui[gaugeList[i]]:setFontSize(10.5)
  --gooey.gui[gaugeList[i]]:setAlignment("center")
  gooey.gui[gaugeList[i]]:setFormat("cb")
  --local myColor = gaugeList[i].."Col"
  gooey.gui[gaugeList[i]]:setFgColor("#E1E3DE")
  gooey.gui[gaugeList[i]]:echo(gaugeList[i])
  
  
end

end</script>
						<eventHandlerList />
					</Script>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>chat build</name>
					<packageName></packageName>
					<script>local myadjlabel = gooey.gui.styles[gooey.gui.myStyle].adjLabel
local mybuttonstyle = gooey.gui.styles[gooey.gui.myStyle].buttonstyle


function gooey.gui.build.chat()

gooey.gui.chatContainer = gooey.gui.chatContainer or 
  Adjustable.Container:new({
    name = "chatContainer", y = "0%", x = "0%", width = "100%", height = "100%",
    buttonFontSize = 7, buttonsize = 10, padding = 6, 
    adjLabelstyle = myadjlabel, buttonstyle = mybuttonstyle,}, 
      gooey.gui.topright)

gooey.gui.chatTabWindow = gooey.gui.chatTabWindow or
  Adjustable.TabWindow:new({name = "chatTabWindow", y = "0%", x = "0%", width = "100%", height = "100%",
    buttonFontSize = 7, buttonsize = 10, padding = 6, 
    adjLabelstyle = myadjlabel, buttonstyle = mybuttonstyle,
    tabBarHeight = 30,
    tabs = {"All", "City", "House", "Party", "Clans", "Market", "Tells", "Misc", "Ship"},
    color1 = "rgb(51, 51, 51)",
    color2 = "rgb(5, 5, 5)",
    }, gooey.gui.chatContainer )

for k, v in pairs(gooey.gui.chatTabWindow.tabs) do  
  local chatname = "chat"..v
  gooey.gui[chatname] = gooey.gui[chatname] or
    Geyser.MiniConsole:new({ name = chatname,  x = "0%", y="0%", height = "100%", width = "100%", 
      color = "black", padding = 2, margin = 2, autoWrap = true
    }, gooey.gui.chatTabWindow[v.."center"])

end

gooey.gui.chatTabWindow:activateTab("All")

end
</script>
					<eventHandlerList />
				</Script>
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Track server stuff core</name>
				<packageName></packageName>
				<script>local gfs = gooey.funcs.serverSettings
local gfg = gooey.funcs.gmcp

--Function to pick up the server-side command separator, config pagelength, and curing settings
function gfs.getServerSettings(forced) 
  if not forced then
    if not gooey.vars.serverSettings.comsep then
      tempTrigger("You can set a separator to be able to send multiple commands to Achaea at once.", [[deleteLine()]], 1)
      send("config commandseparator", false)
    end
    if not gooey.vars.serverSettings.pagelength then
      tempRegexTrigger("^Pagelength is the maximum number of lines that will be displayed to you at once.*", [[deleteLine()]], 1)
      tempTrigger("Usage:", [[deleteLine()]], 1)
      tempTrigger("   CONFIG PAGELENGTH &lt;# of lines&gt;", [[deleteLine()]], 1)
      tempLineTrigger(1, 3, [[if isPrompt() then deleteLine() end]])
      send("config pagelength", false)
    end
    if not gooey.vars.serverSettings.siphealth or not gooey.vars.serverSettings.sipmana then
      enableTrigger("getcuringinfo")
      send("curing status", false) 
    end
  end
  local gts = gooey.triggers.serverSettings
  local gvs = gooey.vars.serverSettings
  gts.curingTrigger = gts.curingTrigger or
  tempRegexTrigger("^Curing (disabled|activated)\.$", [[gooey.vars.serverSettings.curingEnabled = (matches[2] == "activated" and "Yes" or "No")]])
  gts.comSepTrigger = gts.comSepTrigger or
  tempRegexTrigger("^Your current separator is: (.*)$", [[gooey.vars.serverSettings.comsep = matches[2] ]])
  gts.pageLengthTrigger = gts.pageLengthTrigger or
  tempRegexTrigger("^Your current pagelength: (.*)$", [[if gooey.vars.serverSettings.pagelength and gooey.vars.serverSettings.pagelength ~= matches[2] then gooey.vars.serverSettings.oldpagelentgh = gooey.vars.serverSettings.pagelength end gooey.vars.serverSettings.pagelength = matches[2] ]])
  send("ql", false)
end

--gotta delay the getServerSettings cause otherwise it'll spam like a bitch
function gfs.delayGettingInfo()
  if not gooey.vars.alreadyGettingInfoCalmDown then
    gooey.vars.alreadyGettingInfoCalmDown = true
    tempTimer(5, [[gooey.funcs.serverSettings.getServerSettings()]])
  end
end

registerAnonymousEventHandler("gmcp.Char", "gooey.funcs.serverSettings.delayGettingInfo")

--Function that gets info about the player from gmcp
function gfg.char()
  if gmcp.Char and gmcp.Char.Vitals then
    for k, v in pairs (gmcp.Char.Vitals) do
      if k == "charstats" then
        gooey.vars.gmcp.bleed = tonumber(string.split(v[1], ":")[2])
        if gooey.vars.gmcp.rage ~= tonumber(string.split(v[2], ":")[2]) then
        gooey.vars.gmcp.rage = tonumber(string.split(v[2], ":")[2])
        gooey.gui.rageAmt:echo(gooey.vars.gmcp.rage)
        gooey.funcs.hunt.updateRageGauges()
        end
      elseif k ~= "string" then
        if gooey.vars.gmcp[k] and gooey.vars.gmcp[k] ~= tonumber(v) then
          gooey.vars.gmcp.old[k] = gooey.vars.gmcp[k]
        end
        gooey.vars.gmcp[k] = tonumber(v)
      end
    end
  end 
  if gmcp.Char and gmcp.Char.Status then
    for k, v in pairs(gmcp.Char.Status) do
      if k == "name" then 
        k = "charname"
      end
      if gooey.vars.gmcp[k] and gooey.vars.gmcp[k] ~= v then
        gooey.vars.gmcp.old[k] = gooey.vars.gmcp[k]
      end
      gooey.vars.gmcp[k] = v
    end
  end
 
end

function gfg.target()

end

registerAnonymousEventHandler("gmcp.Char", "gooey.funcs.gmcp.char")

--Function that tracks information about the room
function gfg.room()
  gooey.vars.gmcp = gooey.vars.gmcp or {}
  gooey.vars.gmcp.old = gooey.vars.gmcp.old or {}
  
  if gmcp.Room and gmcp.Room.Info then
    for k, v in pairs(gmcp.Room.Info) do
      if table.contains({"area", "name", "num"}, k) then
        if k == "name" then 
          k = "roomname"
          if gooey.gui then 
            gooey.gui.roomNameLabel:echo(gooey.vars.gmcp.roomname, "ansiYellow", "c13") 
          end
        end
        if gooey.vars.gmcp[k] and gooey.vars.gmcp[k] ~= v then
          gooey.vars.gmcp.old[k] = gooey.vars.gmcp[k]
        end
        gooey.vars.gmcp[k] = v
      end
    end
  end
end

registerAnonymousEventHandler("gmcp.Room", "gooey.funcs.gmcp.room")

--Function to get the suff in the room
function gfg.itemsList()
  gooey.data.gmcp.denizens = gooey.data.gmcp.denizens or {}
  gooey.data.gmcp.items = gooey.data.gmcp.items or {}
  
  if gmcp and gmcp.Char and gmcp.Char.Items then
  	if gmcp.Char.Items.List.location == "room" then
  		gooey.data.gmcp.items = {} 
      gooey.data.gmcp.denizens = {}
      for k, v in pairs(gmcp.Char.Items.List.items) do
        if v.attrib =="m" then
          gooey.data.gmcp.denizens[v.id] = v.name
          if gooey.dendb then gooey.dendb.managedb(v.name) end
        else
          gooey.data.gmcp.items[v.id] = {v.name, v.attrib or ""}
        end
      end
    tempTimer(0, [[gooey.funcs.gmcp.displayItems()]])
    raiseEvent("updatedDenizens")
    end
  end
end

--Funtion to handle item addition
function gfg.addItems()
  if gmcp.Char.Items.Add.location == "room" then
		local value = gmcp.Char.Items.Add.item
	  if value.attrib == "m" then
	    gooey.data.gmcp.denizens[gmcp.Char.Items.Add.item.id] = gmcp.Char.Items.Add.item.name
      if gooey.dendb then 
        gooey.dendb.managedb(gmcp.Char.Items.Add.item.name) 
      end
    else
      gooey.data.gmcp.items[gmcp.Char.Items.Add.item.id] = {gmcp.Char.Items.Add.item.name, gmcp.Char.Items.Add.item.attrib or ""}
    end
    tempTimer(0, [[gooey.funcs.gmcp.displayItems()]])
    raiseEvent("updatedDenizens")
	end
end

--Function to handle item removal
function gfg.removeItems()
	if gmcp.Char.Items.Remove.location == "room" then
    if gooey.data.gmcp.denizens[gmcp.Char.Items.Remove.item.id] then
      gooey.data.gmcp.denizens[gmcp.Char.Items.Remove.item.id] = nil
    elseif gooey.data.gmcp.items[gmcp.Char.Items.Remove.item.id] then
      gooey.data.gmcp.items[gmcp.Char.Items.Remove.item.id] = nil
  	end
  gooey.funcs.gmcp.displayItems()
  raiseEvent("updatedDenizens")
  end
end

--Function to display items in the room 
function gfg.displayItems()
  local console = "denizensConsole"
  local gv = gooey.vars
    
  clearWindow(console)
  
  --if we're on a ship, we want weapons first
  local function getWeapons(key, value)
    if string.find(value[1], "ballista") or 
       string.find(value[1], "thrower") or
       string.find(value[1], "onager") 
    then return true
    end
  end
  
  local weapons = table.collect(gooey.data.gmcp.items, getWeapons) 
  
  if gooey.vars.mode.sea then
    cechoLink(console,"&lt;DarkSlateGray&gt;[&lt;SteelBlue&gt;"..((gv.expandWeap and "-") or "+").."&lt;DarkSlateGray&gt;] &lt;SteelBlue&gt;"..table.size(weapons).."&lt;DarkSlateGray&gt; weapons\n", [[gooey.vars.expandWeap = not gooey.vars.expandWeap gooey.funcs.gmcp.displayItems()]], "Expand or collapse this category", true)
    if gv.expandWeap == nil then 
      gv.expandWeap = true 
    end
    if gv.expandWeap then
      for id, value in pairs(weapons) do
      cechoPopup(console, " ".. value[1] .. "\n", {[[send("probe ]] .. id .. [[")]]}, {"Probe"}, true)
      end
    end
  end
  
  --if we're not on a ship, deal with denizens first, if there are any
  if table.size(gooey.data.gmcp.denizens) ~= 0 then
  cechoLink(console,"&lt;DarkSlateGray&gt;[&lt;SteelBlue&gt;"..((gv.expandDen and "-") or "+").."&lt;DarkSlateGray&gt;] &lt;SteelBlue&gt;"..table.size(gooey.data.gmcp.denizens).."&lt;DarkSlateGray&gt; denizens\n", [[gooey.vars.expandDen = not gooey.vars.expandDen gooey.funcs.gmcp.displayItems()]], "Expand or collapse this category", true)
    if gv.expandDen then
      for id, value in pairs(gooey.data.gmcp.denizens) do
        cechoPopup(console, " "..(gooey.funcs.getMobHighlight(id) or "").. value .. "\n", {[[gooey.funcs.setTarget("]] .. id .. [[", "]] ..value..[[")]], [[send("p ]] .. id .. [[")]], [[send("greet ]] .. id .. [[")]]}, {"Target", "Probe", "Greet"}, true)
      end
    end
  end
  
  --deal with items - sigils
  local function getSigils(key, value)
    if string.find(value[1], "sigil") then
    return true
    end
  end
  
  local sigils = table.collect(gooey.data.gmcp.items, getSigils) 
  
  if table.size(sigils) ~= 0 then
    cechoLink(console,"&lt;DarkSlateGray&gt;[&lt;SteelBlue&gt;"..((gv.expandSigils and "-") or "+").."&lt;DarkSlateGray&gt;] &lt;SteelBlue&gt;"..table.size(sigils).."&lt;DarkSlateGray&gt; sigils\n", [[gooey.vars.expandSigils = not gooey.vars.expandSigils gooey.funcs.gmcp.displayItems()]], "Expand or collapse this category", true)
    if gv.expandSigils then
      for id, value in pairs(sigils) do
        cechoPopup(console, " &lt;light_blue&gt;".. value[1] .. "\n", {[[send("probe ]] .. id .. [[")]], [[send("get ]] .. id .. [[")]]}, {"Probe", "Get"}, true)
      end
    end
  end
  
  --deal with misc items (not sigils or gold or corpses)
  local function getMiscItems(key, value)
    if not getSigils(key, value) and 
      not string.find(value[1], "sovereign") and
      not string.find(value[1], "sign") and
      not string.find(value[1], "journal") and
      not string.find(value[1], "poster") and
      not string.starts(value[1], "the corpse of") and
      not getWeapons(key, value)
    then return true
    end
  end
  
  local miscItems = table.collect(gooey.data.gmcp.items, getMiscItems) 
  
  if table.size(miscItems) ~= 0 then
  cechoLink(console,"&lt;DarkSlateGray&gt;[&lt;SteelBlue&gt;"..((gv.expandMiscItems and "-") or "+").."&lt;DarkSlateGray&gt;] &lt;SteelBlue&gt;"..table.size(miscItems).."&lt;DarkSlateGray&gt; misc items\n", [[gooey.vars.expandMiscItems = not gooey.vars.expandMiscItems gooey.funcs.gmcp.displayItems()]], "Expand or collapse this category", true)
    if gv.expandMiscItems then
      for id, value in pairs(miscItems) do
        cechoPopup(console, " ".. value[1] .. "\n", {[[send("probe ]] .. id .. [[")]], [[send("get ]] .. id .. [[")]]}, {"Probe", "Get"}, true)
      end
    end
  end
  
  --readables
  local function getReadableItems(key, value)
    if string.find(value[1], "sign") or
      string.find(value[1], "journal") or
      string.find(value[1], "poster") or
      string.find(value[1], "letter") 
    then return true
    end
  end
  
  local readableItems = table.collect(gooey.data.gmcp.items, getReadableItems) 
  
  if table.size(readableItems) ~= 0 then
  cechoLink(console,"&lt;DarkSlateGray&gt;[&lt;SteelBlue&gt;"..((gv.expandReadableItems and "-") or "+").."&lt;DarkSlateGray&gt;] &lt;SteelBlue&gt;"..table.size(readableItems).."&lt;DarkSlateGray&gt; misc items\n", [[gooey.vars.expandreadableItems = not gooey.vars.expandreadableItems gooey.funcs.gmcp.displayItems()]], "Expand or collapse this category", true)
    if gv.expandReadableItems then
      for id, value in pairs(readableItems) do
        cechoPopup(console, " ".. value[1] .. "\n", {[[send("probe ]] .. id .. [[")]], [[send("get ]] .. id .. [[")]], [[send("read ]] .. id .. [[")]]}, {"Probe", "Get", "Read"}, true)
      end
    end
  end
  
  --deal with corpses
  local function getCorpses(key, value)
    if string.starts(value[1], "the corpse of") and 
      value[2] ~= "t"
    then return true
    end
  end
  
  local corpses = table.collect(gooey.data.gmcp.items, getCorpses) 
    
  local function getBodies(key, value)
    if string.starts(value[1], "the corpse of") and 
    value[2] == "t"
    then return true
    end
  end
  
  local bodies = table.collect(gooey.data.gmcp.items, getBodies) 
  
  if table.size(corpses) ~= 0 or table.size(bodies) ~= 0 then
    cechoLink(console,"&lt;DarkSlateGray&gt;[&lt;SteelBlue&gt;"..((gv.expandCorpses and "-") or "+").."&lt;DarkSlateGray&gt;] &lt;SteelBlue&gt;"..table.size(corpses).."&lt;DarkSlateGray&gt; corpses"..(#bodies ~=0 and (" "..table.size(bodies).." bodies\n") or "\n"), [[gooey.vars.expandCorpses = not gooey.vars.expandCorpses gooey.funcs.gmcp.displayItems()]], "Expand or collapse this category", true)
    if gv.expandCorpses then
      for id, value in pairs(bodies) do
        cechoPopup(console, " &lt;a_twolevel&gt;".. value[1] .. "\n", {[[send("probe ]] .. id .. [[")]], [[send("get ]] .. id .. [[")]]}, {"Probe", "Get"}, true)
      end
      for id, value in pairs(corpses) do
        cechoPopup(console, " &lt;SlateGrey&gt;".. value[1] .. "\n", {[[send("probe ]] .. id .. [[")]], [[send("get ]] .. id .. [[")]]}, {"Probe", "Get"}, true)
      end
    end
  end
  
  --deal with golds
    for id, value in pairs(gooey.data.gmcp.items) do
      if value[1]:find("sovereign") then
      cechoPopup(console, " &lt;gold&gt;".. value[1] .. "\n", {[[send("probe ]] .. id .. [[")]], [[send("get ]] .. id .. [[")]]}, {"Probe", "Get"}, true)
      end
    end
end

-- Function to display the list of people in the room
function gfg.displayRoomPlayers()
  clearUserWindow("peopleConsole")
  local sep 
  
  if gooey.gui.preferredRoomLayout == "horizontal" then
    sep = ", "
  elseif gooey.gui.preferredRoomLayout == "vertical" then
    sep = "\n"
  end
  
  local k = 1
  for key, value in pairs(gooey.data.gmcp.people) do
    if k == #gooey.data.gmcp.people then 
      sep = "" 
    end
    cechoPopup("peopleConsole", value..sep, {[[gooey.funcs.setTarget("]]..value..[[")]], [[send("greet ]]..value..[[")]]}, {"Target", "Greet"}, true)
    k = k+1
  end
end

-- Function to update the players list
function gfg.updatePlayersList()
	gooey.data.gmcp.people = {}
  for k, v in pairs(gmcp.Room.Players) do
		if gmcp.Room.Players[k].name ~= gmcp.Char.Status.name then
 				table.insert(gooey.data.gmcp.people, gmcp.Room.Players[k].name)
		end 
	end 
end

-- Function to handle player addition
function gfg.handlePlayerAddition()
  table.insert(gooey.data.gmcp.people, gmcp.Room.AddPlayer.name)
  gooey.funcs.gmcp.displayRoomPlayers()
end

-- Function to handle player removal
function gfg.handlePlayerRemoval()
  for i, playerName in pairs(gooey.data.gmcp.people) do
    if playerName == gmcp.Room.RemovePlayer then
      table.remove(gooey.data.gmcp.people, i)
    break
    end
  end
  gooey.funcs.gmcp.displayRoomPlayers()
end

-- Function to manage the event handlers for items and people in the room
function gfg.inventoryeventmanager(event)

  if event == "gmcp.Char.Items.List" and gmcp.Char.Items.List.location == "room" then 
    gooey.funcs.gmcp.itemsList()
  elseif event == "gmcp.Char.Items.Add" and gmcp.Char.Items.Add.location == "room" then 
    gooey.funcs.gmcp.addItems()
  elseif event == "gmcp.Char.Items.Remove" and gmcp.Char.Items.Remove.location == "room" then 
    gooey.funcs.gmcp.removeItems()
  elseif event == "gmcp.Room.Players" then
    gooey.funcs.gmcp.updatePlayersList()
    gooey.funcs.gmcp.displayRoomPlayers()
  elseif event == "gmcp.Room.AddPlayer" then 
    gooey.funcs.gmcp.handlePlayerAddition()
  elseif event == "gmcp.Room.RemovePlayer" then 
    gooey.funcs.gmcp.handlePlayerRemoval()
  end

end

registerAnonymousEventHandler("gmcp.Char.Items.List","gooey.funcs.gmcp.inventoryeventmanager")
registerAnonymousEventHandler("gmcp.Char.Items.Add","gooey.funcs.gmcp.inventoryeventmanager")
registerAnonymousEventHandler("gmcp.Char.Items.Remove","gooey.funcs.gmcp.inventoryeventmanager")
registerAnonymousEventHandler("gmcp.Room.Players", "gooey.funcs.gmcp.inventoryeventmanager")
registerAnonymousEventHandler("gmcp.Room.AddPlayer", "gooey.funcs.gmcp.inventoryeventmanager")
registerAnonymousEventHandler("gmcp.Room.RemovePlayer", "gooey.funcs.gmcp.inventoryeventmanager")

--Let us populate the damed gauges
function gooey.funcs.showGauges()
if not gooey.gui.healthBar then gooey.gui.build.gauges() end

gooey.gui.healthBar:setValue(tonumber(gmcp.Char.Vitals.hp), tonumber(gmcp.Char.Vitals.maxhp))
gooey.gui.healthBar:echo("&lt;span style = 'font-weight: bold'&gt;HP "..tonumber(gmcp.Char.Vitals.hp).."/"..tonumber(gmcp.Char.Vitals.maxhp).."    \n"..gooey.funcs.round(tonumber(gmcp.Char.Vitals.hp)*100/tonumber(gmcp.Char.Vitals.maxhp), 2).."%")

if tonumber(gmcp.Char.Vitals.hp) &lt; tonumber(gmcp.Char.Vitals.maxhp)/4 and not gooey.vars.alertedlowhealth and tonumber(gmcp.Char.Vitals.hp) ~= 0 then
  gooey.vars.alertedlowhealth = true
  playsound("Low hull.wav")
  tempTimer(10, [[gooey.vars.alertedlowhealth = false]])
end

gooey.gui.manaBar:setValue(tonumber(gmcp.Char.Vitals.mp), tonumber(gmcp.Char.Vitals.maxmp))--, "&lt;span style = 'font-weight: bold'&gt;&lt;b&gt;&lt;black&gt; MP ".. tonumber(gmcp.Char.Vitals.mp).."/".. tonumber(gmcp.Char.Vitals.maxmp).."    "..gooey.funcs.round(tonumber(gmcp.Char.Vitals.mp)*100/tonumber(gmcp.Char.Vitals.maxmp), 2).."%&lt;/b&gt;")
gooey.gui.manaBar:echo("&lt;span style = 'font-weight: bold'&gt;MP ".. tonumber(gmcp.Char.Vitals.mp).."/".. tonumber(gmcp.Char.Vitals.maxmp).."    "..gooey.funcs.round(tonumber(gmcp.Char.Vitals.mp)*100/tonumber(gmcp.Char.Vitals.maxmp), 2).."%")

gooey.gui.enduranceBar:setValue(tonumber(gmcp.Char.Vitals.ep), tonumber(gmcp.Char.Vitals.maxep))
gooey.gui.enduranceBar:echo("&lt;span style = 'font-weight: bold'&gt;EP "..tonumber(gmcp.Char.Vitals.ep).."/"..tonumber(gmcp.Char.Vitals.maxep).."    "..gooey.funcs.round(tonumber(gmcp.Char.Vitals.ep)*100/tonumber(gmcp.Char.Vitals.maxep), 2).."%")

gooey.gui.willpowerBar:setValue(tonumber(gmcp.Char.Vitals.wp), tonumber(gmcp.Char.Vitals.maxwp))
gooey.gui.willpowerBar:echo("&lt;span style = 'font-weight: bold'&gt;WP "..tonumber(gmcp.Char.Vitals.wp).."/"..tonumber(gmcp.Char.Vitals.maxwp).."    "..gooey.funcs.round(tonumber(gmcp.Char.Vitals.wp)*100/tonumber(gmcp.Char.Vitals.maxwp), 2).."%")

gooey.gui.expBar:setValue(tonumber(gmcp.Char.Vitals.nl), 100)
gooey.gui.expBar:echo("&lt;span style = 'font-weight: bold'&gt;LVL "..gmcp.Char.Status.level.."  "..gooey.vars.target or "GloryAndRiches")

if gmcp.Char.Vitals.eq == "1" then gooey.gui.eqBar:setStyleSheet(epbalonCSS:getCSS()) else gooey.gui.eqBar:setStyleSheet(epbaloffCSS:getCSS()) end
if gmcp.Char.Vitals.bal == "1" then gooey.gui.balBar:setStyleSheet(epbalonCSS:getCSS()) else gooey.gui.balBar:setStyleSheet(epbaloffCSS:getCSS()) end


end
registerAnonymousEventHandler("gmcp.Char.Vitals", "gooey.funcs.showGauges")

function gooey.funcs.showChat()
--gooey.funcs.echo("Got something on the Comm gmcp")
  local shortName = ""
  local chatTab = ""
  local text = ansi2decho(gmcp.Comm.Channel.Text.text)
  for k,v in pairs(gmcp.Comm.Channel.List) do
    shortName = gmcp.Comm.Channel.List[k].command
  end
  local talker = gmcp.Comm.Channel.Text.talker:title()
  local talkercolor = ""
  local rgbcolor = ""
  if ndb and ndb.getcolor(talker) then
  talkercolor = ndb.getcolor(talker)
  elseif Legacy then
  talkercolor = Legacy.NDB.color(talker)
  end
  talkercolor = talkercolor:gsub("&lt;", "")
  talkercolor = talkercolor:gsub("&gt;", "")
  text = text:gsub("&lt;r&gt;", "")
  text = text:gsub("&lt;.&lt;", "")
  local basecolor = string.match(text, "&lt;.-&gt;") or "&lt;reset&gt;"

  if color_table[talkercolor] then
  rgbcolor = "&lt;"..table.concat(color_table[talkercolor], ",").."&gt;"
  end
  
  
  if string.starts(gmcp.Comm.Channel.Start, "says") then
    chatTab = "chatAll"
  elseif string.starts(gmcp.Comm.Channel.Start, "armytell") then
    chatTab = "chatCity"
  elseif string.starts(gmcp.Comm.Channel.Start, "yell") then
    chatTab = "chatMisc"
  elseif string.starts(gmcp.Comm.Channel.Start, "shout") then
    chatTab = "chatMisc"    
  elseif string.starts(gmcp.Comm.Channel.Start, "ct") then
    chatTab = "chatCity"
  elseif string.starts(gmcp.Comm.Channel.Start, "ht") then
    chatTab = "chatHouse"
  elseif string.starts(gmcp.Comm.Channel.Start, "hnt") then
    chatTab = "chatHouse"
  elseif string.starts(gmcp.Comm.Channel.Start, "ot") then
    chatTab = "chatMisc"
  elseif string.starts(gmcp.Comm.Channel.Start, "party") then
    chatTab = "chatParty"
  elseif string.starts(gmcp.Comm.Channel.Start, "clt") then
    chatTab = "chatClans"
  elseif string.starts(gmcp.Comm.Channel.Start, "tell") then
    chatTab = "chatTells"
  elseif string.starts(gmcp.Comm.Channel.Start, "market") then
    chatTab = "chatMarket"    
  elseif string.starts(gmcp.Comm.Channel.Start, "newbie") then
    chatTab = "chatMisc"    
  elseif string.starts(gmcp.Comm.Channel.Start, "intrepid") then
    chatTab = "chatParty"   
  elseif string.starts(gmcp.Comm.Channel.Start, "gt") then
    chatTab = "chatParty"  
  end    

  if color_table[talkercolor] then
    if talker:lower() ~= "you" then
      text = text:gsub(talker, rgbcolor..talker)
    end
  end
  
  text = string.gsub(text, "(%W)("..talker..")(%W)", "%1"..(rgbcolor or "")..talker..(basecolor or "").."%3")

--BECAUSE TARV WANTS IT!
  if gmcp.Char.Status.name == "Tarvius" then  
    for k, v in pairs(gmcp.Comm.Channel.List) do
      if v.name == gmcp.Comm.Channel.Text.channel then
        text = string.gsub(text, string.gsub(v.caption, "The Clan of ", ""), v.command)
      end
    end
  end
  
  if gmcp.Comm.Channel.Text.channel == "shout" then
    if text:find("\"") then
    text = talker.." shouts, \""..text:split("\"")[2].."\""
    end
  end
  
  decho(chatTab, (basecolor or "")..getTime(true, "hh:mm:ss").." "..text.."\n")
  if chatTab ~= "chatAll" then
    decho("chatAll", (basecolor or "")..getTime(true, "hh:mm:ss").." "..text.."\n")
  end

end

registerAnonymousEventHandler("gmcp.Comm.Channel.Start", "gooey.funcs.showChat")


function gooey.funcs.gmcp.listAfflictions()
gooey.data.gmcp.affs = {}
  for k, v in pairs(gmcp.Char.Afflictions.List) do
    table.insert(gooey.data.gmcp.affs, v.name)
  end
gooey.funcs.showActivity()
end

registerAnonymousEventHandler("gmcp.Char.Afflictions.List", "gooey.funcs.gmcp.listAfflictions")

function gfg.lostAff()
gooey.data.gmcp.affs = gooey.data.gmcp.affs or {}
local removeAff = gmcp.Char.Afflictions.Remove[1]
 table.remove(gooey.data.gmcp.affs, table.index_of(gooey.data.gmcp.affs, removeAff))
end

registerAnonymousEventHandler("gmcp.Char.Afflictions.Remove","gooey.funcs.gmcp.lostAff" )

function gfg.gainAff()
gooey.data.gmcp.affs = gooey.data.gmcp.affs or {}
  local addAff = gmcp.Char.Afflictions.Add.name
  table.insert(gooey.data.gmcp.affs, addAff)
end

registerAnonymousEventHandler("gmcp.Char.Afflictions.Add", "gooey.funcs.gmcp.gainAff")

function gooey.funcs.gmcp.listDefences()
gooey.data.gmcp.defs = {}
  for k, v in pairs(gmcp.Char.Defences.List) do
    table.insert(gooey.data.gmcp.defs, v.name)
    end
end

registerAnonymousEventHandler("gmcp.Char.Defences.List", "gooey.funcs.gmcp.listDefences")

function gfg.lostDef()
gooey.data.gmcp.defs = gooey.data.gmcp.defs or {}
local removeDef = gmcp.Char.Defences.Remove[1]
 table.remove(gooey.data.gmcp.defs, table.index_of(gooey.data.gmcp.defs, removeDef))
end

registerAnonymousEventHandler("gmcp.Char.Defences.Remove", "gooey.funcs.gmcp.lostDef")

function gfg.gainDef()
gooey.data.gmcp.defs = gooey.data.gmcp.defs or {}
  local addDef = gmcp.Char.Defences.Add.name
  table.insert(gooey.data.gmcp.defs, addDef)
end

registerAnonymousEventHandler("gmcp.Char.Defences.Add", "gooey.funcs.gmcp.gainDef")</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Sea funcs</name>
				<packageName></packageName>
				<script>local gs = gooey.vars.sea

function gooey.funcs.sea.shipo(state)

if gooey.vars.mode.sea == nil then gooey.vars.mode.sea = false end

if state == "on" then
    enableKey("seafaringkeys")
    disableKey("normalkeys")
    send("nightsight")
    send("get shipaxe from pack")
    if svo then 
      svo.defs.keepup("insomnia", "off", false) 
      else send("curing priority defense insomnia reset")
    end
    send("queue add eqbal relax insomnia")
    send("shipwarning on")
    --gooey.funcs.toggleGUIMode("sea")
    --still gotta deal with shipwarning window and monster hit gauge/cape gauge
    cecho("\n&lt;white&gt;[&lt;ansiCyan&gt;Ship stuff ON&lt;white&gt;]")
    sq.balance = true

--elseif not string.match(gmcp.Room.Info.environment, "Vessel") and shipon == true -- or string.match(gmcp.Room.Info.area, "Margam") 
else 
  enableKey("normalkeys")
  disableKey("seafaringkeys")
  gs.swarn = false
  gs.wbon = false
  if svo then
    svo.defs.keepup("insomnia", "on", false)
  else send("curing priority defense insomnia 25")
  end
  send("put shipaxe in pack")
  --gooey.funcs.toggleGUIMode("hunt")
  --still gotta deal with shipwarning window and monster hit gauge/cape gauge
  cecho("\n&lt;white&gt;[&lt;ansiCyan&gt;Ship stuff OFF&lt;white&gt;]")
  sq.balance = true
end
gooey.funcs.gmcp.displayItems()
end

function gooey.funcs.sea.shipcheck()
  if not gmcp or not gmcp.Room or not gmcp.Room.Info or not gmcp.Room.Info.environment then 
    gooey.funcs.echo("Don't have environment, registering event handler to catch it.")
    oneTimeShipCheck = registerAnonymousEventHandler("gmcp.Room.Info", "gooey.funcs.sea.shipcheck")
  else
    if string.match(gmcp.Room.Info.environment, "Vessel") then
      gooey.funcs.sea.shipo("on")
    else
      gooey.funcs.sea.shipo("off")
    end
    gooey.funcs.echo("Got the environment, checking for oneTimeShipCheck event handler.")
    if oneTimeShipCheck then
      killAnonymousEventHandler(oneTimeShipCheck)
      oneTimeShipCheck = nil
      gooey.funcs.echo("Killed oneTimeShipCheck event handler.")
    else
      gooey.funcs.echo("No oneTimeShipCheck event handler found.")
    end
  end
end
</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>shipQueue</name>
					<packageName></packageName>
					<script>--by Mishgul
sq = sq or {
  balance = true,
  createdTriggers = false,
  actions = {},
  sendingAction = false,
 
}

function sq.shipBalLost()
  sq.balance = false
end

function sq.shipBalGained() --The crew of your ship is now ready to execute another order.
  --echo("\nBalance back!")
  sq.sendingAction = false
  sq.balance = true
  sq.checkQueue()
end

function sq.checkQueue()
  if sq.actions[1] ~= nil then
    sq.sendAction(sq.actions[1])
  end
end

function sq.AddAction(action)
  --cecho("\n&lt;DarkSlateGrey&gt;-&gt;&lt;ansiCyan&gt;[&lt;grey&gt;ShipQueue&lt;ansiCyan&gt;]: Adding &lt;grey&gt;"..action.."&lt;ansiCyan&gt; to ship queue.")
  cecho("\n&lt;DarkSlateGrey&gt;---&gt; Adding "..action.." to the ship queue")
  table.insert(sq.actions, action)
  sq.checkQueue()
end


function sq.sendAction(action)
  if not sq.sendingAction and sq.balance then
    --cecho("\n&lt;DarkSlateGrey&gt;-&gt;&lt;ansiCyan&gt;[&lt;grey&gt;ShipQueue&lt;ansiCyan&gt;]: Ship queue &lt;grey&gt;"..action)
    cecho("\n&lt;DarkSlateGrey&gt;---&gt; Sending "..action)
    sq.sendingAction = true
    send(action)
    oldaction = action
    table.remove(sq.actions, 1)
    tempTimer(1, [[sq.sendingAction = false sq.checkQueue()]])
  end
end

function sq.ClearQueue()
  sq.actions = {}
end

if not sq.createdTriggers then
  tempBeginOfLineTrigger("You order the", [[sq.shipBalLost()]])
  tempBeginOfLineTrigger("You bark out an", [[sq.shipBalLost()]])
  tempExactMatchTrigger("You must wait before issuing another order to the crew.", [[sq.shipBalLost()]])
  tempExactMatchTrigger("The crew of your ship is now ready to execute another order.",[[sq.shipBalGained()]])
  tempExactMatchTrigger("You must wait a short while to use a say-like command again.", [[send(oldaction) deleteLine() tempTimer(2, 'oldaction = nil')]])
  tempBeginOfLineTrigger("The crew scurry to take their place at the large wheel mounted on the side of the crane.", [[sq.shipBalLost()]])
  
  sq.createdTriggers = true
end</script>
					<eventHandlerList />
				</Script>
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Activity funcs (mid left)</name>
				<packageName></packageName>
				<script>local darkcolor = "#303030"

function gooey.funcs.showActivity()

  local gs = gooey.vars.sea
  local gh = gooey.vars.hunt

  gs.shipSails = gs.shipSails or "no info"
  gs.sails = gs.sails or "no info"
  gs.hull = gs.hull or "no info"
  gs.windSpeed = gs.windSpeed or "no info"
  gs.windDir = gs.windDir or "no info"
  gs.shipSpeed = gs.shipSpeed or "no info"
  gs.shipCourse = gs.shipCourse or "no info"
  gs.seasTranl = gs.seasTranl or "no info"
  gs.shipState = gs.shipState or "no info"
  gs.shipAction = gs.shipAction or "no info"
  gs.anchor = gs.anchor or "no info"
  gs.shipshield = gs.shipshield or false
  gs.swarn = gs.swarn or false
  gs.wbon = gs.wbon or false
  gs.ffon = gs.ffon or true
  gs.fires = gs.fires or "No Info"
  gs.fhpower = gs.fhpower or 0
  if gs.figureheadclear == nil then gs.figureheadclear = true end
  if gs.riggingclear == nil then gs.riggingclear = true end
  gs.hooked = gs.hooked or false
  gooey.vars.gui.affDef = gooey.vars.gui.affDef or "aff"

  local console = "activityStatusConsole"
  clearUserWindow(console)
  
  if gooey.vars.mode.sea and gooey.vars.sea.gotPrompt then
    echo(console, "\n")
    local shipwarningstrg = ""..darkcolor.." ShipWarning:"..(gs.swarn and "#00FF00 ON" or "#FF0000 OFF")
    shipwarningstrg = shipwarningstrg..string.rep(" ", 33 - string.len(shipwarningstrg))
    hecho(console, shipwarningstrg) -- green 008000
    if gs.fires == "No" or gs.fires == "No Info" then firecolor = "#00FF00" else firecolor = "#FF0000" end
    hecho(console, darkcolor.."Fires: "..firecolor..""..gs.fires) -- green 008000
    
    local windbooststr = darkcolor.." Windboost:"..(gs.wbon and "#00FF00 ON" or "#FF0000 OFF")
    windbooststr = windbooststr..string.rep(" ", 33 - string.len(windbooststr))
    hecho(console, "\n"..windbooststr)
    hechoLink(console, darkcolor.."Tethered:"..(gs.hooked and "#FF0000 TETHERED" or "#00FF00 Clear"), [[gs.hooked = false gooey.funcs.showActivity()]], "Click to change", true)
    
    local anchorstr = darkcolor.." Anchor: #808000"..gs.anchor
    anchorstr = anchorstr..string.rep(" ", 33 - string.len(anchorstr))
    hecho(console, "\n"..anchorstr)
    hechoLink(console, darkcolor.."Figurehead:"..(gs.figureheadclear and "#00FF00 Clear" or "#FF0000 Bound"), [[gs.figureheadclear = not gs.figureheadclear send("clear figurehead") gooey.funcs.showActivity()]], "Click to clear", true)
    
    gs.shipSails = gs.shipSails or "?"
    local sailsstr = darkcolor.." Sails: #808000"..gs.shipSails
    sailsstr = sailsstr..string.rep(" ", 33 - string.len(sailsstr))
    hecho(console, "\n"..sailsstr)  
    hechoLink(console, darkcolor.."Rigging:"..(gs.riggingclear and "#00FF00 Clear" or "#FF0000 Bound"), [[gs.riggingclear = not gs.riggingclear gooey.funcs.showActivity()]], "Click to change", true)
    
    local sailshstr = darkcolor.." Sails @ "..gooey.funcs.getHealthColorHex(gs.sails)..gs.sails..""..darkcolor.."%"
    sailshstr = sailshstr..string.rep(" ", 40 - string.len(sailshstr))
    hecho(console, "\n"..sailshstr)
    
    hechoLink(console, darkcolor.."Shield:"..(gs.shipshield and "#FF0000 Up" or "#00FF00 Down" ), [[if gs.shipshield == true then gs.shipshield = false else gs.shipshield = true end gooey.funcs.showActivity()]], "click to toggle", true)
    
    local hullstr = darkcolor.." Hull @#808000"..gooey.funcs.getHealthColorHex(gs.hull)..gs.hull..""..darkcolor.."%"
    hullstr = hullstr..string.rep(" ", 46 - string.len(hullstr))
    hecho(console, "\n"..hullstr)
    --hecho(console, "\n"..darkcolor.." Hull @#808000 "..gooey.funcs.getHealthColorHex(gs.hull)..gs.hull..""..darkcolor.."%")
    
    hecho(console, darkcolor.. " Man: ")
    cechoLink(console, "&lt;ansiYellow&gt;"..(shipmanoeuvres or "SI to update"), [[expandAlias("si")]], "Click to update", true)
    
    
    local winddirstr = darkcolor.." Wind:#808000 "..gs.windDir..""..darkcolor.." @#808000"..gs.windSpeed
    winddirstr = winddirstr..string.rep(" ", 46 - string.len(winddirstr))
    hecho(console, "\n"..winddirstr) --darkcolor.." Wind:#808000 "..gs.windDir..""..darkcolor.." @#808000"..gs.windSpeed)
    hechoLink(console, darkcolor.." Figurehead: #8B8B8B"..gs.fhpower, [[send("touch figurehead")]], "Click to check", true)
    
    hecho(console, "\n"..darkcolor.." Course:#808000 "..gs.shipCourse..""..darkcolor.." @#808000"..gs.shipSpeed)
  
    
    hecho(console, "\n"..darkcolor.." Seas:#808000 "..(seas and (seas..".") or "").."".."#808000"..gs.seasTranl)
    hecho(console, "\n"..darkcolor.." "..gs.shipState)
    hecho(console, "\n#8B8B8B"..gs.shipAction)
    
  
    if gs.melded then 
      cecho(console, " &lt;red&gt;[&lt;ansiGreen&gt;M&lt;red&gt;]")
    else 
      cecho(console, " &lt;red&gt;[&lt;firebrick&gt;M&lt;red&gt;]")
    end
      cecho(console, " &lt;red&gt;["..(gs.startedShooting and "&lt;ansiGreen&gt;F" or "&lt;firebrick&gt;F").."&lt;red&gt;]")
    if gs.anchor == "Down" then 
      cecho(console, " &lt;red&gt;[&lt;ansiGreen&gt;A&lt;red&gt;]")
    else 
      cecho(console, " &lt;red&gt;[&lt;firebrick&gt;A&lt;red&gt;]")
    end
      cecho(console, " &lt;red&gt;["..(gs.rowing and "&lt;ansiGreen&gt;R" or "&lt;firebrick&gt;R").."&lt;red&gt;]")
    if gs.shipSails == "Furled" then 
      cecho(console, " &lt;red&gt;[&lt;firebrick&gt;S&lt;red&gt;]")
    else 
      cecho(console, " &lt;red&gt;[&lt;ansiGreen&gt;S"..gs.shipSails.."&lt;red&gt;]")
    end
    if gs.repairingHull then 
      cecho(console, " &lt;red&gt;[&lt;ansiGreen&gt;Repairing&lt;red&gt;]")
    else 
      cecho(console, " &lt;red&gt;[&lt;firebrick&gt;Repairing&lt;red&gt;]")
    end
  
  elseif gooey.vars.mode.sea and not gooey.vars.sea.gotPrompt then
    cecho(console, "&lt;red&gt;Don't have a ship prompt :(")
  
  elseif gooey.vars.mode.hunt or gooey.vars.mode.combat then
    local conslen = gooey.gui.activityStatusConsole:getColumnCount()--3 
    
    echo(console, "\n")
    cechoLink(console, string.rep(" ", conslen - 20)..(gooey.vars.gui.affDef == "aff" and "&lt;yellow&gt;Afflictions&lt;reset&gt;|&lt;white&gt;Defences" or "&lt;white&gt;Afflictions&lt;reset&gt;|&lt;yellow&gt;Defences") , [[ if gooey.vars.gui.affDef == "aff" then gooey.vars.gui.affDef = "def" else gooey.vars.gui.affDef = "aff" end gooey.funcs.showActivity()]], "Click to switch", true)
    --gooey.gui.affdeffLabel:echo(gooey.vars.gui.affDef == "aff" and "   &lt;yellow&gt;Afflictions&lt;reset&gt;|&lt;white&gt;Defences" or "   &lt;white&gt;Afflictions&lt;reset&gt;|&lt;yellow&gt;Defences") 
    
    echo(console, "\n\n")
    if gooey.vars.gui.affDef == "aff" then
      local affcol 
      for k, v in pairs(gooey.data.gmcp.affs) do
        if table.contains({"blindness", "deafness", "insomnia"}, v) then 
          affcol = "&lt;a_twolevel&gt;"
        else 
          affcol = "&lt;white&gt;"
        end
        cecho(console, string.rep(" ", conslen - v:len() -4)..affcol..v.."\n")
      end
    elseif gooey.vars.gui.affDef == "def" then
      local i = 1
      local str = ""
      for k, v in pairs(gooey.data.gmcp.defs) do
        str = str..v..", "
        if i % 2 == 0 then
        cecho(console, string.rep(" ", conslen - str:len())..str)
        str = ""
        --else
        --cecho(console, v..", ")
        end
        i = i + 1
       -- gooey.gui.promptConsole:cecho
       -- gooey.gui.affdeffLabel
      end
    end
  end
end

registerAnonymousEventHandler("gmcp.Char", "gooey.funcs.showActivity")</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Hunting</name>
				<packageName></packageName>
				<script>
function gooey.funcs.hunt.getClass()
  local cls
  local classChanged
  
  if gooey.vars.hunt.class ~= string.gsub(gmcp.Char.Status.class:lower(), "lady", "lord") then
    cls = gooey.vars.hunt.class
  end
  if cls ~= string.gsub(gmcp.Char.Status.class:lower(), "lady", "lord") then
    classChanged = true
    cls = string.gsub(gmcp.Char.Status.class:lower(), "lady", "lord")
    gooey.vars.hunt.class = string.gsub(gmcp.Char.Status.class:lower(), "lady", "lord")
    gooey.data.hunt.myRageTable = {}
    sensiskill = nil
    inhibitskill = nil
  end
    
  if classChanged == true then
      gooey.funcs.hunt.rageTable()
      for i = 1, #gooey.data.hunt.RageTable, 1 do
        if cls == gooey.data.hunt.RageTable[i][1].Class:lower() then
          table.remove(gooey.data.hunt.RageTable[i], 1)
          gooey.data.hunt.myRageTable = table.deepcopy(gooey.data.hunt.RageTable[i])
        end
      end
   
    gooey.data.hunt.rageKeys = {}
    local ragekeys = gooey.data.hunt.rageKeys
    local ab = 1
    for ab = 1, #gooey.data.hunt.myRageTable do
      ragekeys[ab] = gooey.data.hunt.myRageTable[ab][6]
    end
  gooey.funcs.hunt.updateRageGauges() 
  end
end
  registerAnonymousEventHandler("gmcp.Char.Status", "gooey.funcs.hunt.getClass")

--function to deal with using a battlerage ability
function gooey.funcs.hunt.useAbility(ability, atwhat)

gooey.vars.hunt.announcechan = gooey.vars.hunt.announcechan or "pt"
local announcechan = gooey.vars.hunt.announcechan

local skillused
  for k, v in ipairs(gooey.data.hunt.myRageTable) do
    if v[1] == ability then
      skillused = k
      break
    end
  end

local watch = "rageWatch"..skillused
resetStopWatch(watch)
startStopWatch(watch)
enableTimer("ragetimer")
gooey.data.hunt.myRageTable[skillused][5] = 0

local gname = "rageGauge"..skillused
ragebackCSS:setCSS(onCooldown)
gooey.gui[gname].back:setStyleSheet(ragebackCSS:getCSS())

if not string.find(gooey.data.hunt.myRageTable[skillused][7]:lower(), "shieldbreak") and 
  string.find(gooey.data.hunt.myRageTable[skillused][7]:lower(), "aff")
then
  local aff = string.gsub(gooey.data.hunt.myRageTable[skillused][7]:lower(), "aff:","")
  if not atwhat then atwhat = "target" end
  if gooey.vars.hunt.pta == true then 
    send(announcechan.." "..aff.." on "..atwhat) 
  end
  cecho("&lt;yellow&gt; [ &lt;green&gt;"..aff:upper().."&lt;yellow&gt; ]")
end
selectString(line, 1)
fg("a_darkyellow")
gooey.funcs.hunt.updateRageGauges()
end

function gooey.funcs.hunt.updateRageGauges()

local rage = gooey.vars.gmcp.rage
local gname 
local usable 

  if rage then
    for i =1, #gooey.data.hunt.myRageTable, 1 do
      gname = "rageGauge"..i
      if rage &gt;= gooey.data.hunt.myRageTable[i][3] and gooey.data.hunt.myRageTable[i][5] == 1 then -- we have rage
          ragebackCSS:setCSS(Rage)
          gooey.gui[gname].back:setStyleSheet(ragebackCSS:getCSS())
          
      elseif rage &lt; gooey.data.hunt.myRageTable[i][3] and gooey.data.hunt.myRageTable[i][5] == 0 then
          ragebackCSS:setCSS(NopeSkill)
          gooey.gui[gname].back:setStyleSheet(ragebackCSS:getCSS())
      elseif rage &lt; gooey.data.hunt.myRageTable[i][3] then -- we don't have rage
          ragebackCSS:setCSS(onCooldown)
          gooey.gui[gname].back:setStyleSheet(ragebackCSS:getCSS())
      end
      for k, v in ipairs(gooey.data.hunt.rageKeys) do 
        if v == gooey.data.hunt.myRageTable[i][6] then 
          fkey = "F"..k
        end 
      end
      gooey.gui[gname]:echo("&lt;pre style='font-size:15px; color:#9BA191; text-align:center; padding:1px; margin:1px; font-family:Bitstream Vera Sans Mono;'&gt;"..gooey.data.hunt.myRageTable[i][1]:title().."&lt;span style='font-size:13px; color:grey; text-align: right;'&gt;  "..fkey.."&lt;/span&gt;&lt;/pre&gt;&lt;pre style='font-size:14px; color:grey; text-align:center; padding:1px; margin:1px;'&gt;"..gooey.data.hunt.myRageTable[i][7].."&lt;\pre&gt;")
    end
    gooey.gui.rageAmt:echo(rage)
  end
end



--Zulah's rage table

function gooey.funcs.hunt.rageTable()
  gooey.data.hunt.RageTable = {	-- [1]name, [2]cooldown, [3]cost, [4]duration, [5]usable, [6]command, [7]tooltip
    [1] = {
      {["Class"] = "Black Dragon",},
      {"dragonspit",      16, 14,  0, 1, "dragonspit myTarget",								"Dmg over time"},
      {"dragonsting",     27, 25,  8, 1, "dragonsting myTarget",							"Aff:sensi"},
      {"dissolve",         1, 17, 10, 1, "dissolve myTarget",								  "Aff:Shieldbreak"},
      {"override",        23, 36,  0, 1, "override myTarget",								  "Big Dmg"},
      {"corrode",         23, 25,  0, 1, "corrode myTarget",									"Needs: clumsy/aeon"},
      {"dragonfear",      34, 29,  8, 1, "dragonfear myTarget",								"Aff:Fear"},
    },
    [2] = {
      {["Class"] = "Blue Dragon",},
      {"dragonchill",			16, 14,  0, 1, "dragonchill myTarget",							"Small Dmg"},
      {"glaciate",				33, 26,  4, 1, "glaciate myTarget",								  "Aff:Stun"},
      {"frostrive",	 		   1, 17, 10, 1, "frostrive myTarget",								"Aff:Shieldbreak"},
      {"override",				23, 36,  0, 1, "override myTarget",								  "Big Dmg"},
      {"frostwave",			  23, 25,  0, 1, "frostwave myTarget",								"Needs: amnesia/reckless"},
      {"ague",					  23, 14,  7, 1, "ague myTarget",										  "Aff:clumsy"},
    },
    [3] = {
      {["Class"] = "Golden Dragon",},
      {"overwhelm",		   16, 14,  0, 1, "overwhelm myTarget",								  "Small Dmg"},
      {"deaden",			   35, 24,  6, 1, "deaden myTarget",									  "Aff:Aeon"},
      {"psishatter",		  1, 17, 10, 1, "psishatter myTarget",							  "Aff:Shieldbreak"},
      {"psiblast",			 23, 36,  0, 1, "psiblast myTarget",								  "Big Dmg"},
      {"psistorm",			 23, 25,  0, 1, "psistorm myTarget",								  "Needs: weakness/stun"},
      {"psidaze",			   41, 28,  6, 1, "psidaze myTarget",									  "Aff:Amnesia"},
    },
    [4] = {
      {["Class"] = "Green Dragon",},
      {"dragonspit",			16, 14,  0, 1, "dragonspit myTarget",							  "Small Dmg over time"},
      {"scour",					  25, 18,  9, 1, "scour myTarget",									  "Aff:Inhibit"},
      {"deteriorate",			 1, 17, 10, 1, "deteriorate myTarget",						  "Aff:Shieldbreak"},
      {"override",				23, 36,  0, 1, "override myTarget",								  "Big Dmg"},
      {"slaver",				  23, 25,  0, 1, "slaver on myTarget",						    "Needs: sensi/clumsy"},
      {"dragonsap", 			31, 22,  7, 1, "dragonsap myTarget",							  "Aff:Weakness"},
    },
    [5] = {
      {["Class"] = "Red Dragon",},
      {"overwhelm",			16, 14,  0, 1, "overwhelm myTarget",								  "Small Dmg"},
      {"dragontaunt",		19, 18,  8, 1, "dragontaunt myTarget",							  "Aff:reckless"},
      {"melt",					 1, 17, 10, 1, "melt myTarget",										    "Aff:Shieldbreak"},
      {"dragonblaze",		23, 36,  0, 1, "dragonblaze myTarget",							  "Dmg over time"},
      {"flamebath",			23, 25,  0, 1, "flamebath myTarget",								  "Needs: sensi/clumsy"},
      {"scorch",				25, 18,  9, 1, "scorch myTarget",									    "Aff:Inhibit"},
    },
    [6] = {
      {["Class"] = "Silver Dragon",},
      {"overwhelm",			16, 14,  0, 1, "overwhelm myTarget",								  "Small Dmg"},
      {"sizzle",				27, 25,  8, 1, "sizzle myTarget",								    	"Aff:sensi"},
      {"splinter",				 1, 17, 10, 1, "splinter myTarget",								  "Aff:Shieldbreak"},
      {"dragonspark",			23, 36,  0, 1, "dragonspark myTarget",							"Big Dmg"},
      {"stormflare",			23, 25,  0, 1, "stormflare myTarget",								"Needs: fear/amnesia"},
      {"galvanize",			19, 18, 15, 1, "galvanize myTarget",								  "Aff:reckless"},
    },
    [7] = {
      {["Class"] = "Alchemist",},
      {"miasma",				16, 14,  0, 1, "throw miasma at myTarget",						"Small Dmg"},
      {"cadmium",				31, 22,  7, 1, "educe cadmium myTarget",							"Aff:Weakness"},
      {"caustic",				 1, 17, 10, 1, "throw caustic at myTarget",						"Aff:Shieldbreak"},
      {"magnesium",			23, 36,  0, 1, "educe magnesium myTarget",						"Big Dmg"},
      {"pathogen",				23, 25,  0, 1, "throw pathogen at myTarget",				"Needs: reckless/fear"},
      {"hypnotic",				41, 28,  4, 1, "throw hypnotic at myTarget",				"Aff:Amnesia"},
    },
    [8] = {
      {["Class"] = "Apostate",},
      {"convulsions",			16, 14,  0, 1, "stare myTarget convulsions",				"Small Dmg"},
      {"horrify",				34, 29,  8, 1, "stare myTarget horrify",							"Aff:Fear"},
      {"shieldbreak",			 1, 17, 10, 1, "shieldbreak myTarget",							"Aff:Shieldbreak"},
      {"burrow",				23, 36,  0, 1, "daegger burrow myTarget",						  "Big Dmg"},
      {"bloodlet",				23, 25,  8, 1, "bloodlet myTarget",								  "Needs: sensi/stun"},
      {"possess",				43, 32,  4, 1, "possess myTarget",									  "Aff:Charm"},
    },
    [9] = {
      {["Class"] = "Bard",},
      {"moulinet",			16, 14,  0, 1, "moulinet myTarget",								    "Small Dmg"},
      {"trill",					41, 28,  4, 1, "play trill at myTarget",							"Aff:Amnesia"},
      {"resonance",			 1, 17, 10, 1, "play resonance at myTarget",					"Aff:Shieldbreak"},
      {"howlslash",			23, 36,  0, 1, "howlslash myTarget",								  "Big Dmg"},
      {"cyclone",				23, 25,  4, 1, "cyclone myTarget",									  "Needs: clumsy/stun"},
      {"charm",					43, 32,  4, 1, "play charm at myTarget",							"Aff:Charm"},
    },
    [10] = {
      {["Class"] = "Blademaster",},
      {"leapstrike",			16, 14,  0, 1, "leapstrike myTarget",								"Small Dmg"},
      {"daze",					33, 26,  4, 1, "shin daze myTarget",								  "Aff:Stun"},
      {"shatter",			 	 1, 17, 10, 1, "shin shatter myTarget",							  "Aff:Shieldbreak"},
      {"spinslash",			23, 36,  0, 1, "spinslash myTarget",								  "Big Dmg"},
      {"headstrike",			23, 25,  0, 1, "strike myTarget head",							"Needs: reckless/fear"},
      {"nerveslash",			31, 22,  7, 1, "nerveslash myTarget",								"Aff:Weakness"},
    },
    [11] = {
      {["Class"] = "Druid",},
      {"strangle",				16, 14,  0, 1, "strangle myTarget",								  "Small Dmg"},
      {"redeem",				31, 22,  7, 1, "reclamation redeem myTarget",					"Aff:Weakness"},
      {"vinecrack",			 1, 17, 10, 1, "vinecrack myTarget",								  "Aff:Shieldbreak"},
      {"ravage",				23, 36,  0, 1, "ravage myTarget",									    "Big Dmg"},
      {"sear",					23, 25,  0, 1, "sear myTarget",										    "Needs: reckless/stun"},
      {"glare",					23, 14,  4, 1, "quarterstaff glare myTarget",					"Aff:clumsy"},
    },
    [12] = {
      {["Class"] = "Infernal",},
      {"ravage",				16, 14,  0, 1, "ravage myTarget",									    "Small Dmg"},
      {"soulshield",			37, 20,  8, 1, "soulshield",											  "Temporary Dmg shield"},
      {"shiver",				 1, 17, 10, 1, "shive myTarget",									    "Aff:Shieldbreak"},
      {"spike",					23, 36,  0, 1, "spike myTarget",									    "Big Dmg"},
      {"hellstrike",			23, 25,  0, 1, "hellstrike myTarget",								"Needs: reckless/fear"},
      {"deathlink",			43, 30,  5, 1, "deathlink myAlly",									  "Take 50% of ally's Dmg"},
    },
    [13] = {
      {["Class"] = "Jester",},
      {"noogie",				16, 14,  0, 1, "noogie myTarget",									    "Small Dmg"},
      {"dustthrow",			25, 18,  9, 1, "dustthrow myTarget",								  "Aff:Inhibit"},
      {"jacks",					 1, 17, 10, 1, "throw jacks at myTarget",						  "Aff:Shieldbreak"},
      {"ensconce",				23, 36,  0, 1, "ensconce firecracker on myTarget",  "Big Dmg"},
      {"befuddle",				23, 25,  6, 1, "befuddle myTarget",								  "Needs: aeon/amnesia"},
      {"rap",					33, 26,  4, 1, "rap myTarget",										      "Aff:Stun"},
    },
    [14] = {
      {["Class"] = "Magi",},
      {"windlash",				16, 14,  0, 1, "cast windlash at myTarget",				  "Small Dmg"},
      {"dilation",				35, 24,  6, 1, "cast dilation at myTarget",				  "Aff:Aeon"},
      {"disintegrate",		 1, 17, 10, 1, "cast disintegrate at myTarget",		  "Aff:Shieldbreak"},
      {"squeeze",				23, 36,  0, 1, "golem squeeze myTarget",							"Big Dmg"},
      {"firefall",				23, 25,  7, 1, "cast firefall at myTarget",				  "Needs: clumsy/reckless"},
      {"stormbolt",			27, 25,  8, 1, "cast stormbolt at myTarget",					"Aff:sensi"},
    },
    [15] = {
      {["Class"] = "Monk",},
      {"spinningbackfist",	16, 14,  0, 1, "sbp myTarget",										"Small Dmg"},
      {"scramble",			31, 22,  7, 1, "mind scramble myTarget",				      "Aff:clumsy"},
      {"splinterkick",	 1, 17, 10, 1, "spk myTarget",										    "Aff:Shieldbreak"},
      {"tornadokick",		23, 36,  0, 1, "tnk myTarget",										    "Big Dmg"},
      {"mindblast",			23, 25,  0, 1, "mind blast myTarget",								  "Needs: weakness/sensi"},
      {"ripplestrike",	27, 25,  9, 1, "rpst myTarget",										    "Aff:Inhibit"},
    },
    [16] = {
      {["Class"] = "Occultist",},
      {"harry",					16, 14,  0, 1, "harry myTarget",									    "Dmg over time"},
      {"temper",				43, 32,  5, 1, "temper myTarget",									    "Aff:Charm"},
      {"ruin",					 1, 17, 10, 1, "ruin myTarget",										    "Break shield"},
      {"chaosgate",			23, 36,  0, 1, "chaosgate myTarget",								  "Big Dmg"},
      {"fluctuate",			23, 25,  8, 1, "fluctuate myTarget",								  "Needs: fear/amnesia"},
      {"stagnate",			35, 24,  6, 1, "stagnate myTarget",								    "Aff:Aeon"},
    },
    [17] = {
      {["Class"] = "Paladin",},
      {"harrow",				16, 14,  0, 1, "harrow myTarget",									         "Small Dmg"},
      {"regeneration",	53, 33,  8, 1, "perform rite of regeneration",		         "Regenerate health"},
      {"faithrend",			 1, 17, 10, 1, "faithrend myTarget",								       "Aff:Shieldbreak"},
      {"shock",					23, 36,  0, 1, "perform rite of shock at myTarget",	       "Dmg over time"},
      {"punishment",		23, 25,  0, 1, "perform rite of punishment at myTarget",	 "Needs: weakness/clumsy"},
      {"recovery",			44, 31,  6, 1, "perform rite of recovery at myAlly",       "Heal ally for next 6 seconds"},
    },
    [18] = {
      {["Class"] = "Priest",},
      {"torment",				16, 14,  0, 1, "angel torment myTarget",							     "Small Dmg"},
      {"incense",				18, 19, 15, 1, "angel incense myTarget",							     "Aff:reckless"},
      {"crack",					 1, 17, 10, 1, "crack myTarget",									         "Aff:Shieldbreak"},
      {"desolation",		23, 36,  4, 1, "perform rite of desolation on myTarget",	 "Dmg over time"},
      {"hammer",				23, 25,  0, 1, "hammer myTarget",									         "Needs: clumsy/amnesia"},
      {"horrify",				34, 29,  8, 1, "perform rite of horrify on myTarget",      "Aff:Fear"},
    },
    [19] = {
      {["Class"] = "Runewarden",},
      {"collide",				16, 14,  0, 1, "collide myTarget",									  "Small Dmg"},
      {"bulwark",				45, 28, 15, 1, "bulwark",											        "Dmg reduction for self"}, -- 25%
      {"fragment",			 1, 17, 10, 1, "fragment myTarget",								    "Aff:Shieldbreak"},
      {"onslaught",			23, 36,  0, 1, "onslaught myTarget",								  "Big Dmg"},
      {"etch",					23, 25,  0, 1, "etch rune at myTarget",							  "Needs: aeon/stun"},
      {"safeguard",			57, 35, 10, 1, "safeguard myAlly",									  "Dmg reduction for ally"}, --40%
    },
    [20] = {
      {["Class"] = "Sentinel",},
      {"pester",				16, 14,  0, 1, "pester myTarget",									    "Small Dmg"},
      {"tame",					43, 32,  5, 1, "tame myTarget",										    "Aff:Charm"},
      {"bore"		,			 1, 17, 10, 1, "bore myTarget",										      "Aff:Shieldbreak"},
      {"skewer",				23, 36,  0, 1, "skewer myTarget",									    "Big Dmg"},
      {"swarm",					23, 25,  0, 1, "swarm myTarget",									    "Needs: aeon/clumsy"},
      {"goad",					19, 18, 15, 1, "goad myTarget",										    "Aff:reckless"},
    },
    [21] = {
      {["Class"] = "Serpent",},
      {"thrash",				16, 14,  0, 1, "thrash myTarget",									    "Small Dmg"},
      {"flagellate",		27, 25,  6, 1, "flagellate myTarget",								  "Aff:Aeon"},
      {"excoriate",			 1, 17, 10, 1, "excoriate myTarget",								  "Aff:Shieldbreak"},
      {"throatrip",			23, 36,  0, 1, "throatrip myTarget",								  "Big Dmg"},
      {"snare",					23, 25,  5, 1, "snare myTarget",									    "Needs: inhibited/weakness"},
      {"obliviate",			41, 28,  4, 1, "obliviate myTarget",								  "Aff:Amnesia"},
    },
    [22] = {
      {["Class"] = "Shaman",},
      {"corruption",			16, 14,  0, 1, "curse myTarget corruption",			    "Small Dmg"},
      {"korkma",				34, 29,  4, 1, "invoke korkma myTarget",					    "Aff:Fear"},
      {"vulnerability",		 1, 17, 10, 1, "curse myTarget vulnerability",	    "Aff:Shieldbreak"},
      {"haemorrhage",			23, 36,  0, 1, "curse myTarget haemorrhage",		    "Big Dmg over time"},
      {"vurus",					23, 25,  0, 1, "invoke vurus myTarget",							  "Needs: sensi/amnesia"},
      {"cesaret",				19, 18, 15, 1, "invoke cesaret myTarget",						  "Aff:reckless"},
    },
    [23] = {
      {["Class"] = "Sylvan",},
      {"torrent",				16, 14,  0, 1, "cast torrent at myTarget",						"Small Dmg"},
      {"sandstorm",			34, 29,  8, 1, "cast sandstorm at myTarget",					"Aff:Fear"},
      {"shieldbreak",			 1, 17, 10, 1, "shieldbreak myTarget",							"Aff:Shieldbreak"},
      {"stonevine",			23, 36,  0, 1, "stonevine myTarget",								  "Big Dmg"},
      {"leechroot",			23, 25,  0, 1, "leechroot myTarget",								  "Needs: inhibited/weakness"},
      {"rockshot",				41, 28,  4, 1, "cast rockshot at myTarget",				  "Aff:Amnesia"},
    },
    [24] = {
      {["Class"] = "Depthswalker",},
      {"drain",				16, 14,  0, 1, "shadow drain myTarget",						      "Dmg over Time"},
      {"lash",				23, 36,  8, 1, "shadow lash myTarget",						      "Big Dmg"},
      {"curse",				35, 24, 10, 1, "chrono curse myTarget",						      "Aff:Aeon"},
      {"nakail",			 1, 17,  0, 1, "intone nakail myTarget",						    "Shieldbreak"},
      {"erasure",			23, 25,  0, 1, "chrono erasure myTarget",					      "Mid Dmg"},
      {"boinad",			38, 32,  4, 1, "intone boinad myTarget",						    "Aff:Charm"},
    },
    [25] = {
      {["Class"] = "air Elemental Lord",},
      {"bolt",				 16, 14,  0, 1, "manifest bolt myTarget",					      "Small Dmg"},
      {"suffocate",		 23, 36,  8, 1, "aero suffocate myTarget",					    "Aff:Weakness"},
      {"drill",				 35, 24, 10, 1, "manifest drill myTarget",					    "Aff:Shieldbreak"},
      {"pressurewave", 23, 36,  0, 1, "manifest pressurewave myTarget",	      "Big Dmg"},
      {"compress",		 23, 25,  0, 1, "aero compress myTarget",					      "Needs: sensitive/stun"},
      {"vacuum",			 38, 32,  4, 1, "manifest vacuum myTarget",				      "Aff:Inhibit"},
    },
    [26] = {
      {["Class"] = "earth Elemental Lord",},
      {"smash",        16, 14,  0, 1, "terran smash myTarget",               "Small Dmg"},
      {"rockfall",     33, 26,  0, 1, "manifest rockfall myTarget",          "Aff:Stun"},
      {"charge",        0, 17,  0, 1, "terran charge myTarget",              "Aff:Shieldbreak"},
      {"flurry",       23, 36,  0, 1, "terran flurry myTarget",              "Big Dmg"},
      {"magmaburst",   23, 25,  0, 1, "manifest magmaburst myTarget",        "Needs: clumsy/reckless"},
      {"rampart",      40, 30,  0, 1, "terran rampart myAlly",               "Ally:Defended"},  
    },
    [27] = {
      {["Class"] = "Psion",},
      {"barbedblade",	 16, 14,  0, 1, "weave barbedblade myTarget",          "Small Dmg"},
      {"devistate",		 23, 36,  8, 1, "psi devastate myTarget",              "Big Dmg"},
      {"regrowth",		 35, 24, 10, 1, "enact regrowth myTarget",             "Aff:Inhibit"},
      {"pulverise",     1, 17,  0, 1, "weave pulverise myTarget",	           "Aff:Shieldbreak"},
      {"whirlwind",		 23, 25,  0, 1, "weave whirlwind myTarget",            "Mid Dmg"},
      {"terror",			 38, 32,  4, 1, "psi terror myTarget",                 "Aff:Fear"},
    },  
    [28] = {
      {["Class"] = "Pariah",},
      {"boil",	       16, 14,  0, 1, "blood boil myTarget",                 "Small Dmg"},
      {"feast",		     23, 36,  8, 1, "swarm feast myTarget",                "Big Dmg"},
      {"symphony",		 35, 24, 10, 1, "swarm symphony myTarget",             "Aff:Fear"},
      {"scour",         1, 17,  0, 1, "accursed scour myTarget",	           "Aff:Shieldbreak"},
      {"spider",		   23, 25,  0, 1, "trace spider myTarget",               "Needs: inhibited/sensitive"},
      {"wail",			   38, 32,  4, 1, "accursed wail myTarget",              "Aff:clumsy"},
    },    
  }
  end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Misc utils</name>
				<packageName></packageName>
				<script>
    color_table.msGold        = {255,215,0}
    color_table.msSilver      = {160,160,160}
    color_table.a_darkred     = {128, 0, 0}
    color_table.a_darkgreen   = {0, 179, 0}
    color_table.a_brown       = {128, 128, 0}
    color_table.a_darkblue    = {0, 0, 128}
    color_table.a_darkmagenta = {128, 0, 128}
    color_table.a_darkcyan    = {0, 128, 128}
    color_table.a_grey        = {192, 192, 192}
    color_table.a_darkgrey    = {128, 128, 128}
    color_table.a_red         = {255, 0, 0}
    color_table.a_green       = {0, 255, 0}
    color_table.a_yellow      = {255, 255, 0}
    color_table.a_blue        = {0, 85, 255}
    color_table.a_magenta     = {255, 0, 255}
    color_table.a_cyan        = {0, 255, 255}
    color_table.a_white       = {255, 255, 255}
    color_table.a_darkwhite   = {192, 192, 192}
    color_table.a_darkyellow  = {179, 179, 0}
    color_table.a_onelevel    = {45, 46, 46}
    color_table.a_twolevel    = {103, 101, 98}
    color_table.a_threelevel  = {67, 48, 32}
    color_table.a_fourlevel   = {40, 186, 40}
    color_table.a_fivelevel   = {57, 140, 57}
    color_table.a_sixlevel    = {13, 121, 13}
    color_table.blaze_orange  = {255, 102, 0}

--Function that sets the gooey.target variable, can take id and value
function gooey.funcs.setTarget(what, whatname)
  
  send("st "..what, false)
  gooey.vars.target = what
  gooey.funcs.echo("Target: &lt;LightSteelBlue&gt;"..what:title()..(whatname and " &lt;reset&gt;(&lt;LightSteelBlue&gt;"..whatname.."&lt;reset&gt;)" or ""))
  if not tonumber(what) and keneanung then 
    keneanung.bashing.addPossibleTarget("what")   
  end
  if whatname and not tonumber(whatname) == "string" and keneanung then 
    keneanung.bashing.addPossibleTarget("whatname") 
  end
  tempTimer(0.2 , [[gooey.funcs.gmcp.displayItems()]])
end

--Echo things in style 
function gooey.funcs.echo(text) 
  cecho("\n&lt;white&gt;(&lt;firebrick&gt;gooey&lt;white&gt;)&lt;reset&gt;: "..text.."\n")
end

--Function to alert about things in a more visible way than echoes
function gooey.funcs.alert(text, color1, color2) 
  color1 = color1 or "firebrick"
  color2 = color2 or "white"
  
  if not string.starts(color1, "&lt;") and color1 ~= "" then
    color1 = "&lt;"..color1.."&gt;"
  end
  
  if not string.starts(color2, "&lt;") and color2 ~= "" then
    color2 = "&lt;"..color2.."&gt;"
  end

  text = text or "Got asked to send an alert, but wasn't told what... so... BE ALERTED!"
  
  local leng = string.len(text)
    
  --draw the frame of the alert
  echo("\n")
  cecho(color1..string.rep("-", leng+2).."&lt;reset&gt;")
  echo("\n")
  
  --alert
  cecho(" "..color2..text:title().."&lt;reset&gt;")
  
  --bottom frame of the alert
  echo("\n")
  cecho(color1..string.rep("-", leng+2).."&lt;reset&gt;")
  echo("\n")
end

--Delete the line and the prompt following it
function gooey.funcs.deletelineP() 
  deleteLine()
  tempLineTrigger(1, 1, [[if isPrompt() then deleteLine() end]])
end

--List tables with a nice "or" or "and" (degault) at the end
function gooey.funcs.tableConcat(tbl, andor) 
  local index = 1
  local answer = ""
  andor = andor or "and"
    for k, v in pairs(tbl) do
      if type(k) == "number" then
        if index &lt; table.size(tbl)-1  then
          answer = answer..v..", "
          index = index + 1
        elseif index &lt; table.size(tbl)  then
          answer = answer..v.." "
          index = index + 1
        elseif index == table.size(tbl) then
          answer = answer.." "..andor.." "..v
        end
      else
        if index &lt; table.size(tbl)-1  then
          answer = answer..k..", "
          index = index + 1
        elseif index &lt; table.size(tbl)  then
          answer = answer..k.." "
          index = index + 1
        elseif index == table.size(tbl) then
          answer = answer.." "..andor.." "..k.."."
        end
      end
    end
  return answer  
end

--Function to round numbers to a certain number of decimals
function gooey.funcs.round(num, idp)
  local mult = 10^(idp or 0)
  return math.floor(num * mult + 0.5) / mult
end

--Function to toggle curing - except if no curing system it needs a state.
function gooey.funcs.pp(state) 
  if Legacy then
    if not state then
      state = Legacy.Settings.Curing.status
    else state = ((state == "on" and true) or false) 
    end
      send("curing "..(state and "on" or "off"))
      gooey.vars.curing = (state and "on" or "off")
  elseif svo then
    if not state then 
      state = not svo.conf.paused
    else state = (state == "on" and "off" or "on")
    svo.app(state)
    gooey.vars.curing = (state and "off" or "on")
    end
  else --no svo and no Legacy
    if not state then
      state = (gooey.vars.serverSettings.curingEnabled == "Yes" and "off" or "on")
      echo("\nState is "..state)
    end
    send("curing "..state)
    gooey.funcs.echo(""..(state == "on" and "Unp"  or "P").."aused the system") 
    gooey.vars.curing = (state and "on" or "off")
  end
end

--Function to get the appropriate color for health based on health level
function gooey.funcs.healthColor(somehealththing, somehealththingmax)
if not gooey.vars.gui.singleprompt then
  if not somehealththing then
    if tonumber(gmcp.Char.Vitals.hp) &gt;= 2*tonumber(gmcp.Char.Vitals.maxhp)/3 then return "a_onelevel"
      elseif tonumber(gmcp.Char.Vitals.hp) &gt;= tonumber(gmcp.Char.Vitals.maxhp)/3 then return "ansiYellow"
      else return "firebrick"
    end
  else
    if tonumber(somehealththing) &gt;= 2*tonumber(somehealththingmax)/3 then return "a_onelevel"
      elseif tonumber(somehealththing) &gt;= tonumber(somehealththingmax)/3 then return "ansiYellow"
      else return "firebrick"
    end
  end
else
  if not somehealththing then
    if tonumber(gmcp.Char.Vitals.hp) &gt;= 2*tonumber(gmcp.Char.Vitals.maxhp)/3 then return "dark_olive_green"
      elseif tonumber(gmcp.Char.Vitals.hp) &gt;= tonumber(gmcp.Char.Vitals.maxhp)/3 then return "dark_orange"
      else return "orange_red"
    end
  else
    if tonumber(somehealththing) &gt;= 2*tonumber(somehealththingmax)/3 then return "dark_olive_green"
      elseif tonumber(somehealththing) &gt;= tonumber(somehealththingmax)/3 then return "dark_orange"
      else return "orange_red"
    end
  end
end
end


--get hex color codes - mostly used for hull/sails health
function gooey.funcs.getHealthColorHex(thing)
thing = tonumber(thing)
if not thing then
  return
else
  if thing &lt; 40 then return "#FF0000"
  elseif thing &lt; 50 then return "#BD422E"
  elseif thing &lt; 70 then return "#E7A348"
  elseif thing &lt; 90 then return "#F3EC77"
  else return "#808000"
  end
end
end

--Function that gets us to full stats before sending a command (the command is optional)
function gooey.funcs.fl(dooncefull)
  if not gooey.vars.serverSettings.siphealth or not gooey.vars.serverSettings.sipmana then
    gooey.funcs.serverSettings.getServerSettings()
    gooey.funcs.echo("Whoops, gotta check your preferences first, standby...")
    gooey.vars.flwhat = dooncefull
  end
  if gooey.vars.gmcp.hp and gooey.vars.gmcp.hp &gt;= gooey.vars.gmcp.maxhp and gooey.vars.gmcp.mp and gooey.vars.gmcp.mp &gt;= gooey.vars.gmcp.maxmp then 
    if dooncefull == "gooey good to go" or not dooncefull then
      if not gooey.vars.flwhat then 
        gooey.vars.flwhat = "" 
      end
    else gooey.vars.flwhat = dooncefull
    end
    gooey.funcs.echo("We're full stats, yay! Doing &lt;orange&gt;"..(gooey.vars.flwhat == "" and "whatever we want now" or gooey.vars.flwhat).."&lt;reset&gt;.")
    expandAlias(gooey.vars.flwhat)
    gooey.vars.flwhat = nil
  else
    gooey.vars.flwhat = dooncefull
    tempTimer(0, [[gooey.funcs.getfull()]])
    gooey.funcs.echo("Getting full, hang on.")
  end
end

registerAnonymousEventHandler("gooey good to go", "gooey.funcs.fl")

function temp()
echo("gooey good to go was raised")
end
registerAnonymousEventHandler("gooey good to go", "temp")

--Function that sets curing for mana and health to max, so that serverside fills up our bars
function gooey.funcs.getfull()
  gooey.vars.checkVitals = true
  send("curing siphealth 99")
  send("curing sipmana 99") 
  gooey.funcs.goodtogo()
end

--Function that raises an event when we're full stats, and sets the curing back to its original state
function gooey.funcs.goodtogo()
  if gooey.vars.checkVitals then
  if gooey.vars.gmcp.hp and gooey.vars.gmcp.hp &gt;= gooey.vars.gmcp.maxhp and gooey.vars.gmcp.mp and gooey.vars.gmcp.mp &gt;= gooey.vars.gmcp.maxmp then
    raiseEvent("gooey good to go")
    gooey.vars.checkVitals = false
    send("curing siphealth "..gooey.vars.serverSettings.siphealth, false)
    send("curing sipmana "..gooey.vars.serverSettings.sipmana, false)
    gooey.funcs.echo("I set the curing stats back to what they were before.")
  end
  end
end

registerAnonymousEventHandler("gmcp.Char.Vitals", "gooey.funcs.goodtogo")

--Figure out what color to use for a player
function gooey.funcs.getPlayerHighlight(name)
	if name == gooey.vars.target then
		return "&lt;blaze_orange&gt;"
	elseif svo then 
		return ndb.getcolor(name) 
  elseif Legacy then
    return Legacy.NDB.color(name)
	end
end


--Get the color for a mob
function gooey.funcs.getMobHighlight(id)
  if (gooey.vars.target and id == gooey.vars.target) or (keneanung and keneanung.bashing.targetList[1] and id == keneanung.bashing.targetList[1].id) or (gmcp.IRE and gmcp.IRE.Target and id == gmcp.IRE.Target.Set) then 
    return "&lt;blaze_orange&gt;" 
    else return "&lt;green&gt;" 
  end
end

--function to switch between sea, hunting and combat modes
--as arguments it will deal with these three modes or resetsea, resetcombat, resethunt
--the reset modes will load a pre-configured layout, same as if there is no such layout saved with Adjustable.Container:saveAll(mode)
--if no arguments then it will cycle through the available modes
function gooey.funcs.toggleGUIMode(mode)
local modesaved = nil
local resetting = nil

  if mode and mode:find("reset") then
    resetting = true
    for k, v in pairs ({"sea", "combat", "hunt"}) do
      if mode:find(v) then 
        mode = v 
      end
    end
  end
  
  if not mode then 
    for k, v in pairs(gooey.vars.mode) do
      if v == true then 
        if k == "sea" then mode = "hunt"
        elseif k == "hunt" then mode = "combat"
        elseif k == "combat" then mode = "sea"
        end
      end
    end
  end
  

    for k, v in pairs(gooey.vars.mode) do
      if k ~= mode then 
        gooey.vars.mode[k] = false
      else
        gooey.vars.mode[k] = true
      end
    end
    gooey.funcs.echo("Switching to &lt;yellow&gt;"..mode)
    
  if not resetting then
  --check if there's a saved layout by looking at a random container
    if io.exists(Adjustable.Container.all.bottom.defaultDir.."bottom.lua") then
      local actable = {}
      table.load(Adjustable.Container.all.bottom.defaultDir.."bottom.lua", actable)
      if actable.slot and actable.slot[mode] then
        modesaved = true
      else
        modesaved = false
      end
    else
      modesaved = false
    end
  end
  
  if modesaved then 
    Adjustable.Container:loadAll(mode)
    gooey.funcs.echo("Found saved mode: &lt;yellow&gt;"..mode)
  else
    gooey.funcs.echo("Going with default layout for &lt;yellow&gt;"..mode)
  
    if mode == "sea" then
      if gooey.vars.gui.singleprompt then
        gooey.gui.rageContainer:hide()
        gooey.gui.bottom:resize(nil, "9%")
        gooey.gui.bottom:move(nil, "91%")
        gooey.gui.shipPromptContainer:show()
        gooey.gui.bottom:add(gooey.gui.shipPromptContainer)
        gooey.gui.shipPromptConsole:show()
        gooey.gui.shipPromptContainer:add(gooey.gui.shipPromptConsole)
        gooey.gui.shipPromptConsole:resize("100%", "100%")
        gooey.gui.shipPromptContainer:resize("100%", "20%")
        gooey.gui.shipPromptContainer:move("0%", "2%")
        gooey.gui.promptContainer:show()
        gooey.gui.bottom:add(gooey.gui.promptContainer)
        gooey.gui.promptContainer:resize("100%", "28%")
        gooey.gui.promptContainer:move("0%", "28%")
        gooey.gui.gaugeContainer:resize( "100%", "35")
        gooey.gui.gaugeContainer:move( "0%", "-35")
        gooey.gui.bottom:attachToBorder("bottom")
        gooey.gui.promptContainer:add(gooey.gui.promptConsole)
        gooey.gui.activityKogman:hide()
      else
        gooey.gui.bottom:resize(nil, "7%")
        gooey.gui.bottom:move(nil, "93%")
        gooey.gui.rageContainer:hide()
        gooey.gui.shipPromptContainer:show()
        gooey.gui.bottom:add(gooey.gui.shipPromptContainer)
        gooey.gui.shipPromptConsole:show()
        gooey.gui.shipPromptContainer:add(gooey.gui.shipPromptConsole)
        gooey.gui.shipPromptConsole:resize("100%", "100%")
        gooey.gui.shipPromptContainer:resize("100%", "36%")
        gooey.gui.shipPromptContainer:move("0%", "0%")
        gooey.gui.gaugeContainer:resize( "100%", "35") 
        gooey.gui.gaugeContainer:move( "0%", "-35")
        gooey.gui.bottom:attachToBorder("bottom")
        gooey.funcs.activityKogman:hide()
      end
    elseif mode == "hunt"  then
      if gooey.vars.gui.singleprompt then
        gooey.gui.bottom:resize(nil, "11%")
        gooey.gui.bottom:move(nil, "89%")
        gooey.gui.shipPromptConsole:hide()
        gooey.gui.promptContainer:show()
        gooey.gui.promptContainer:resize("100%", "23%")
        gooey.gui.promptContainer:move("0%", "0%")
        gooey.gui.rageContainer:show()
        gooey.gui.rageContainer:resize( "100%", "40%")
        gooey.gui.rageContainer:move("0%", "24%")
        gooey.gui.gaugeContainer:resize( "100%", "36%")
        gooey.gui.gaugeContainer:move( "0%", "-36%")
        gooey.gui.bottom:add(gooey.gui.promptContainer)
        gooey.gui.bottom:attachToBorder("bottom")
        gooey.funcs.getKogman()
        gooey.gui.activityKogman:show()
      else
        gooey.gui.shipPromptConsole:hide()
        gooey.gui.bottom:resize(nil, "8%")
        gooey.gui.bottom:move(nil, "92%")
        gooey.gui.gaugeContainer:resize( "100%", "47%")
        gooey.gui.gaugeContainer:move( "0%", "-47%")
        gooey.gui.rageContainer:show()
        gooey.gui.rageContainer:resize( "100%", "51%")
        gooey.gui.rageContainer:move("0%", "0%")
        gooey.gui.gaugeContainer:add(gooey.gui.botomGaugeHbox)
        gooey.gui.rageContainer:add(gooey.gui.rageHBox)
        gooey.gui.bottom:attachToBorder("bottom")
        gooey.funcs.getKogman()   
        gooey.gui.activityKogman:show() 
      end
    elseif mode == "combat" then
      gooey.gui.rageContainer:hide()
      if gooey.vars.gui.singleprompt then
      gooey.funcs.getKogman()
      gooey.gui.activityKogman:show() 
      else
      gooey.funcs.getKogman()
      gooey.gui.activityKogman:show() 
      end
    end
  end
end

function gooey.funcs.swapRoomLayout(how)
  if not how then
    if gooey.gui.preferredRoomLayout == "vertical" then 
      how = "horizontal"
    elseif gooey.gui.preferredRoomLayout == "horizontal" then
      how = "vertical"
    end 
  end
  gooey.gui.preferredRoomLayout  = how
  if how == "vertical" then 
    gooey.gui.denizens:resize("70%", "100%")
    gooey.gui.denizens:move("0%", "0%")
    gooey.gui.roomContainer:add(gooey.gui.denizens)
    gooey.gui.people:resize("30%", "100%")
    gooey.gui.people:move("-30%", "0%")
    gooey.gui.roomContainer:add(gooey.gui.people)
  elseif how == "horizontal" then
    gooey.gui.denizens:resize("100%", "70%")
    gooey.gui.denizens:move("0%", "-70%")
    gooey.gui.roomContainer:add(gooey.gui.denizens)
    gooey.gui.people:resize("100%", "30%")
    gooey.gui.people:move("0%", "0%")
    gooey.gui.roomContainer:add(gooey.gui.people)
  end
end

function gooey.funcs.toggleSinglePrompt()
  local mode
  gooey.vars.gui.singleprompt = not gooey.vars.gui.singleprompt
  gooey.funcs.echo(gooey.vars.gui.singleprompt and "Switched to single prompt" or "Removing the single prompt")
  
  if gooey.vars.gui.singleprompt then
    gooey.gui.promptContainer:show()
  else 
    gooey.gui.promptContainer:hide()
  end
  
  for k, v in pairs(gooey.vars.mode) do
    if v == true then 
      mode = k
    end
  end
  
  gooey.funcs.toggleGUIMode(mode)
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Gooey Startup</name>
				<packageName></packageName>
				<script>
function gooey.funcs.formatAllContainers()
local myadjlabel = gooey.gui.styles[gooey.gui.myStyle].adjLabel
local mybuttonstyle = gooey.gui.styles[gooey.gui.myStyle].buttonstyle

  for k, v in pairs(gooey.gui) do 
    if type(gooey.gui[k]) ~= "function" then
      if gooey.gui[k].type == "miniConsole" or gooey.gui[k].type == "adjustablecontainer" then 
        local consoleName = gooey.gui[k].name
        gooey.gui.fontSize[consoleName] = gooey.gui.fontSize[consoleName] or 10
        setFontSize(gooey.gui[k].name, gooey.gui.fontSize[consoleName])
      elseif gooey.gui[k].type == "label" then
        gooey.gui[k]:setFontSize(10)
      end
    end
  end

  Adjustable.Container:doAll(function(s) 
    s:lockContainer("border")
    s.adjLabel:setStyleSheet(myadjlabel) 
    s.buttonstyle = mybuttonstyle
    s:setTitle("", "gray") 
    s:changeMenuStyle("dark")
    if gooey.vars.localSettings.gooeyFolder then
    s.defaultDir = gooey.vars.localSettings.gooeyFolder.."AdjContainerSettings/"
    end
    end)
    gooey.gui.roomNameLabel: setStyleSheet(myadjlabel)
    gooey.gui.roomNameLabel: setFormat("c13")

    --set the font sizes

end

function gooey.funcs.coldStartup()
  disableTimer("ragetimer")
  gooey.funcs.load()
  gooey.gui.build.frame()
  gooey.gui.build.bottom()
  gooey.gui.build.midleft()
  for k, v in pairs(gooey.gui.build) do
    if k~= "frame" and k ~= "bottom" and k ~= "midleft" then
      gooey.gui.build[k]()
      cecho("\n&lt;red&gt;gooey.gui.build.&lt;firebrick&gt;"..k)
    end
  end

  Adjustable.Container:doAll(function(s) s:addConnectMenu() end)
  gooey.funcs.formatAllContainers()
  gooey.funcs.sea.shipcheck()
  tempTrigger("Password correct. Welcome to Achaea.", [[gooey.funcs.warmStartup()]], 1)
  
end

registerAnonymousEventHandler("sysLoadEvent", "gooey.funcs.coldStartup")

function gooey.funcs.warmStartup()
  sendGMCP('Core.Supports.Add ["Comm.Channel 1"]')
  sendGMCP('Core.Supports.Add ["IRE.Tasks 1"]')
  sendGMCP('Core.Supports.Add ["IRE.Time 1"]')
  sendGMCP('Core.Supports.Add ["IRE.Misc 1"]')
  sendGMCP('Core.Supports.Add ["IRE.Target 1"]')
  gooey.funcs.serverSettings.getServerSettings()
end

function gooey.funcs.install()
  if enableModuleSync then 
    enableModuleSync('gooey') 
  end
  
  gooey.funcs.coldStartup()
  if gmcp then 
    gooey.funcs.warmStartup()
  end
  
  if getModuleInfo("gooey", "version") == "" then
    setModuleInfo("gooey", "version", "0.0001")
  end
  gooey.vars.localSettings.gooeyFolder = getModulePath("gooey"):gsub("%.xml", "/")

end

registerAnonymousEventHandler("sysInstallModule", "gooey.funcs.install")
registerAnonymousEventHandler("sysLuaInstallModule", "gooey.funcs.install")

function gooey.funcs.checkUpdates()

if updatesexist then --which I have no idea how to check yet, but have high hopes on the setModuleInfo thing
local downloadFolder = getModulePath("gooey")
downloadFile(downloadFolder, "url")
end
end

function gooey.funcs.save()

  if not lfs.attributes(gooey.vars.localSettings.gooeyFolder) then
    if lfs and lfs.mkdir then
      local t, s = lfs.mkdir(gooey.vars.localSettings.gooeyFolder)
      if not t and s ~= "File exists" then
        gooey.funcs.echo("Couldn't make the '" .. gooey.vars.localSettings.gooeyFolder .. "' folder; " .. s)
      return
      end
    else
      gooey.funcs.echo("Sorry, but you need LuaFileSystem (lfs) installed, or have the '" ..gooey.vars.localSettings.gooeyFolder .."' folder exist.")
    return
    end
  end

  for k, v in pairs(gooey) do
    if table.contains({"data", "dendb", "vars"}, k) then
      local filename = k..".lua"
      gooey.funcs.echo("Saving "..gooey.vars.localSettings.gooeyFolder..filename)
      table.save(gooey.vars.localSettings.gooeyFolder..filename, gooey[k])
    end
  end
gooey.funcs.echo("Saved settings here: "..gooey.vars.localSettings.gooeyFolder) 
end

function gooey.funcs.load()
gooey.vars.localSettings.gooeyFolder = getModulePath("gooey"):gsub("%.xml", "/")
for k, v in pairs(gooey) do
  if table.contains({"data", "dendb", "vars"}, k) then
    local filename = k..".lua"
    if io.exists(gooey.vars.localSettings.gooeyFolder..filename) then
      table.load(gooey.vars.localSettings.gooeyFolder..filename, gooey[k])
      gooey.funcs.echo("Loaded settings from: "..gooey.vars.localSettings.gooeyFolder..filename) 
    else
      table.save(gooey.vars.localSettings.gooeyFolder..filename, gooey[k])
      gooey.funcs.echo("Couldn't find a save for "..k.." so made a new one: "..gooey.vars.localSettings.gooeyFolder..filename) 
    end
  end
end
end

function gooey.funcs.playsound()
  gooey.vars.localSettings.gooeyFolder = getModulePath("gooey"):gsub("%.xml", "/")
  local modulepath = gooey.vars.localSettings.gooeyFolder
  gooey.vars.localSettings.soundfolder = modulepath.."Sounds/"
  local soundfolder = gooey.vars.localSettings.soundfolder
  local soundpath

  if not io.exists(soundfolder) then
    gooey.funcs.echo("\n&lt;red&gt;OOPS! &lt;firebrick&gt;Couldn't find your sound folder.")
  else
    soundpath = soundfolder..file
    if vol then 
      playSoundFile(soundpath, vol)
    else
      playSoundFile(soundpath)
    end
  end
end

function gooey.funcs.rebuild()
  gooey.gui.build.frame()
  gooey.gui.build.bottom()
    for k, v in pairs(gooey.gui.build) do
      if k~= "frame" and k ~= "bottom" then
        gooey.gui.build[k]()
      end
    end
end
</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Popup window</name>
				<packageName></packageName>
				<script>local myadjlabel = gooey.gui.styles[gooey.gui.myStyle].adjLabel
local mybuttonstyle = gooey.gui.styles[gooey.gui.myStyle].buttonstyle

function gooey.gui.build.popOut()
gooey.gui.popOutWindow = -- gooey.gui.popOutWindow  or 
  Adjustable.Container:new(
    {name = "popOutWindow", titleText = "Tarv's File Analyzer", titleTxtColor = "white",
      adjLabelstyle = myadjlabel, buttonstyle = mybuttonstyle,
      buttonFontSize = 7, buttonsize = 10, padding = 6,})
      
gooey.gui.popOutConsole = gooey.gui.popOutConsole or 
  Geyser.MiniConsole:new({ name = "popOutConsole", x = 0, y = 0, width = "100%", height = "100%",
  autoWrap = true, color = "black", scrollBar = false,  fontSize = 10, },
    gooey.gui.popOutWindow)

gooey.gui.popOutConsole:enableCommandLine()

local function getScrolls(text)
  enableTrigger("poptrig")
  send(text)
end

gooey.gui.popOutConsole:setCmdAction(getScrolls)
gooey.gui.popOutWindow:hide()
end

</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Gooey exit</name>
				<packageName></packageName>
				<script>function gooey.funcs.shutdown()
disableTimer("ragetimer")
gooey.funcs.save()
end

registerAnonymousEventHandler("sysExitEvent", "gooey.funcs.shutdown")</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Cycle targets</name>
				<packageName></packageName>
				<script>function gooey.funcs.hunt.cycleTargets()
gooey.vars.hunt.cycleTarget = gooey.vars.hunt.cycleTarget or 1
local ct = gooey.vars.hunt.cycleTarget
local target = gooey.funcs.setTarget
gooey.funcs.hunt.getIndexedDenizens()
local targets = gooey.data.gmcp.denizensIndexed

  if gooey.vars.hunt.cycleTarget &gt; table.size(gooey.data.gmcp.denizensIndexed) then
    gooey.vars.hunt.cycleTarget = 1
    target(targets[gooey.vars.hunt.cycleTarget][1], targets[gooey.vars.hunt.cycleTarget][2])
  elseif gooey.vars.hunt.cycleTarget == table.size(gooey.data.gmcp.denizensIndexed) then
    target(targets[gooey.vars.hunt.cycleTarget][1], targets[gooey.vars.hunt.cycleTarget][2])
    gooey.vars.hunt.cycleTarget = 1
  else 
    target(targets[gooey.vars.hunt.cycleTarget][1], targets[gooey.vars.hunt.cycleTarget][2])
    gooey.vars.hunt.cycleTarget = gooey.vars.hunt.cycleTarget + 1    
  end

  if keneanung then 
    keneanung.bashing.manuallyTarget(target)
  end
  gooey.funcs.gmcp.displayItems()
end

function gooey.funcs.hunt.getIndexedDenizens()
gooey.data.gmcp.denizensIndexed = {} 
  
  for k, v in pairs(gooey.data.gmcp.denizens) do 
    table.insert(gooey.data.gmcp.denizensIndexed, {k, v}) 
  end
end

registerAnonymousEventHandler("updatedDenizens", "gooey.funcs.hunt.getIndexedDenizens")

function gooey.funcs.hunt.resetDenizenList()
gooey.data.gmcp.denizensIndexed = {}
end

registerAnonymousEventHandler("gmcp.Room", "gooey.funcs.hunt.resetDenizenList")</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Addon - hunt</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>gooey hunt</name>
				<packageName></packageName>
				<script>

function gooey.funcs.hunt.letUsKill(mode)

if not mode then
  gooey.vars.hunt.ak = not gooey.vars.hunt.ak
else 
  gooey.vars.hunt.ak = mode == "on" 
end
gooey.funcs.echo("Hunting "..(gooey.vars.hunt.ak and "ensuing" or "stopping"))
if gooey.vars.hunt.ak then 
  send("setalias gooeykilly stand/kill", false)
  send("queue add eqbal gooeykilly", false)
  tempTrigger("[System]: Added GOOEYKILLY ", [[echo("gooey.funcs.deletelineP()")]], 1)
  gooey.vars.hunt.killtrig = tempTrigger("[System]: Running queued eb command: GOOEYKILLY", [[echo("gooey.funcs.deletelineP()") send("queue add eqbal gooeykilly")]])
end

end</script>
				<eventHandlerList />
			</Script>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Hunting</name>
				<packageName>Hunting</packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Hunting Variables</name>
					<packageName></packageName>
					<script>huntVar = {
-- Hunting Variables
	on = false,
	targetGone = false,
	currentTarget = "",
	currentPriority = 0,
	previousArea = "",
	currentArea = "",
	targetQueue = {},
	targetPriority = {},
	userAreaList = {},
	userAreaDenizens = {},
	echo = true,
	echoto = "",

	homeDir = getMudletHomeDir(),
	fileName = "huntTable",
	fileNameFull = "fullHuntTable",

-- Geyser Variables
	width = 150,
}

fixedHuntVar = {
	areaList = {},
	areaDenizens = {},
}</script>
					<eventHandlerList />
				</Script>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Hunting Functions</name>
					<packageName></packageName>
					<script>huntTracker = huntTracker or {}</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>roomTrack</name>
						<packageName></packageName>
						<script>function roomTrack(event)
	if huntVar.on then
		local eventMatch = event:match("%w+$")
		local funcMatch = loadstring("huntTracker:"..eventMatch.."()")
		funcMatch()
	end
end</script>
						<eventHandlerList>
							<string>gmcp.Char.Items.Add</string>
							<string>gmcp.Char.Items.Remove</string>
							<string>gmcp.Char.Items.List</string>
							<string>gmcp.Room.Info</string>
							<string>sysLoadEvent</string>
							<string>sysExitEvent</string>
						</eventHandlerList>
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Misc Functions</name>
						<packageName></packageName>
						<script>-- Tracker functions
function huntTracker:Add()
	if gmcp.Char.Items.Add.location == "room" then
		local tempTable = gmcp.Char.Items.Add.item
		if tempTable.attrib == "m" and table.contains(huntVar.userAreaDenizens, tempTable.name) then
			local addID = tempTable.id
			for k, v in ipairs(huntVar.userAreaDenizens) do
				if tempTable.name == v then
					insertID(addID, k)
					break
				end
			end
			if huntVar.targetGone then
				targetSet()
			end
		end
	end
end

function huntTracker:Remove()
	if gmcp.Char.Items.Remove.location == "room" then
		local removeID = gmcp.Char.Items.Remove.item.id
		if huntVar.currentTarget == removeID then
			huntVar.targetGone = true
			if table.size(huntVar.targetQueue) &gt;= 1 then
				targetSet()
			end -- end if table.size
		elseif table.contains(huntVar.targetQueue, removeID) then
			for k,v in pairs(huntVar.targetQueue) do
				if v == removeID then
					table.remove(huntVar.targetQueue, k)
					table.remove(huntVar.targetPriority, k)
					if target ~= huntVar.currentTarget then
						huntVar.targetGone = true
						insertID(huntVar.currentTarget, huntVar.currentPriority)
						targetSet()
					end
					break
				end -- end if v == removeID
			end -- end for k,v
		end -- end if huntVar.currentTarget == removeID
	end -- end if location == "room"
end -- end function huntTracker:Remove()

function huntTracker:List()
	if gmcp.Char.Items.List.location == "room" then	
		local tempTable = gmcp.Char.Items.List
		local size = table.size(tempTable.items)
		local targGot = false
		local targChange = true
		huntVar.targetGone = true
		huntVar.targetQueue = {}
		huntVar.targetPriority = {}
		for k,v in ipairs(tempTable.items) do
			local tempID = v.id
			if v.attrib == "m" and table.contains(huntVar.userAreaDenizens, v.name) then
				for ak, av in ipairs(huntVar.userAreaDenizens) do
					if huntVar.currentTarget == tempID then
						huntVar.targetGone = false
						targChange = false
					end -- end if huntVar.currentTarget
					if v.name == av and huntVar.currentTarget ~=tempID and not table.contains(huntVar.targetQueue, tempID) then
						insertID(tempID, ak)
						break
					end -- end if v.name
				end -- end for ak
			end -- end v.attrib
		end -- end for k
		if targChange then
			targetSet()
		end
	end -- end if location
end -- end function huntTracker:List()

function huntTracker:Info()
	if huntVar.currentArea ~= gmcp.Room.Info.area then
		huntVar.currentArea = gmcp.Room.Info.area
		if not table.contains(huntVar.userAreaList, huntVar.currentArea) and table.contains(fixedHuntVar.areaList, huntVar.currentArea) then
			table.insert(huntVar.userAreaList, huntVar.currentArea)
			huntVar.userAreaList[huntVar.currentArea] = huntTableCopy(fixedHuntVar.areaList[huntVar.currentArea])
		elseif not table.contains(fixedHuntVar.areaList, huntVar.currentArea) then
			fixedHuntVar.areaList[huntVar.currentArea] = fixedHuntVar.areaList[huntVar.currentArea] or {}
			huntVar.userAreaList[huntVar.currentArea] = huntVar.userAreaList[huntVar.currentArea] or {}
		end
		fixedHuntVar.areaDenizens = fixedHuntVar.areaList[huntVar.currentArea]
		huntVar.userAreaDenizens = huntVar.userAreaList[huntVar.currentArea] or {}
		huntTracker:List()
	end
end -- end function huntTracker:Info()

function huntTracker:sysLoadEvent()
	local sep
	local homeDir = getMudletHomeDir()
	if string.char(homeDir:byte()) == "/" then 
		sep = "/" else sep = "\\"
	end
	table.load(homeDir.. sep .. huntVar.fileName..".lua", huntVar.userAreaList)
	table.load(homeDir.. sep .. huntVar.fileNameFull..".lua", fixedHuntVar.areaList)
	huntTableCheck()
	cecho("&lt;white&gt;Hunting System Loaded\n")
end

function huntTracker:sysExitEvent()
	huntTableCheck()
	local sep
	local homeDir = getMudletHomeDir()
	if string.char(homeDir:byte()) == "/" then 
		sep = "/" else sep = "\\"
	end
	table.save(homeDir.. sep .. huntVar.fileName..".lua", huntVar.userAreaList)
	table.save(homeDir.. sep .. huntVar.fileNameFull..".lua", fixedHuntVar.areaList)
	cecho("&lt;white&gt;Hunting System Saved\n")
end

function insertID(id, priority)
	local tableSize = table.size(huntVar.targetPriority)
	local inserted = false
	if not table.contains(huntVar.targetQueue, id) then
		if tableSize == 0 then
			table.insert(huntVar.targetQueue, id)
			table.insert(huntVar.targetPriority, priority)
		end
		if tableSize &gt; 0 then
			for i = 1, tableSize do
				if priority &lt; huntVar.targetPriority[i] then
					table.insert(huntVar.targetQueue, i, id)
					table.insert(huntVar.targetPriority, i, priority)
					inserted = true
					break
				end -- end if priority
			end -- end for
			if not inserted then
				table.insert(huntVar.targetQueue, id)
				table.insert(huntVar.targetPriority, priority)
			end -- end if inserted = false
		end -- end if not table.contains
	end -- end if tableSize
end -- end function

function targetSet()
  send("cq all")
  tempTrigger("[System]: All queued commands cleared.", [[gooey.funcs.deletelineP()]], 1)
	if not table.is_empty(huntVar.targetQueue) then				
		huntVar.currentTarget = huntVar.targetQueue[1]
		huntVar.currentPriority = huntVar.targetPriority[1]
		table.remove(huntVar.targetQueue, 1)
		table.remove(huntVar.targetPriority, 1)
		target = huntVar.currentTarget
		huntVar.targetGone = false
	if gooey then 
		gooey.funcs.setTarget(target)
    if gooey.vars.hunt.ak then
      gooey.addons.hunt.letUsKill("on")
    end
	end
		if huntVar.echo then
			if huntVar.echoto == "" then
				cecho("&lt;blue:green&gt;Target: "..target)
			else
				send(huntVar.echoto.." Target: "..target)
			end
		end
	end
end

function showHuntTargs()
	if table.contains(fixedHuntVar.areaList, huntVar.currentArea) and table.size(fixedHuntVar.areaList[huntVar.currentArea]) &gt; 0 then
		for i, j in ipairs(fixedHuntVar.areaDenizens) do
			local check = "   "
			local raise = "   "
			local lower = "   "
			local checked = false
			if table.contains(huntVar.userAreaDenizens, j) then
				check = " X "
				checked = true
			end
			cecho("&lt;dark_slate_gray&gt;[")
			fg("white")
			echoLink(check, "toggleTarget(\""..j.."\")", "Click to add or remove "..j.." from the list!", true)
			cecho("&lt;dark_slate_gray&gt;] [")
			if i &gt; 1 then
				raise = " ^ "
				echoLink(raise, [[swapPriority(]]..i..[[, ]]..i..[[-1, "]]..j..[[")]], "Click to move "..j.." up the priority list!", true)
			else
				echo(raise)
			end
			cecho("&lt;dark_slate_gray&gt;] [")
			if i &lt; table.maxn(fixedHuntVar.areaDenizens) then
				lower = " v "
				echoLink(lower, [[swapPriority(]]..i..[[, ]]..i..[[+1, "]]..j..[[")]], "Click to move "..j.." down the priority list.", true)
			else
				echo(lower)
			end
			cecho("&lt;dark_slate_gray&gt;] ")
			if checked then
				cecho("&lt;white&gt;"..j.."\n")
			else
				cecho("&lt;light_slate_grey&gt;"..j.."\n")
			end
		end
		cecho("&lt;dark_slate_gray&gt;[")
		fg("green")
		echoLink(" Check All ", "toggleAll(\"on\")", "Click to check all targets in the area", true)
		cecho("&lt;dark_slate_gray&gt;] [")
		fg("red")
		echoLink(" Uncheck All ", "toggleAll(\"off\")", "Click to check all targets in the area", true)
		cecho("&lt;dark_slate_gray&gt;]\n")
		send(" ")
	else
		cecho("&lt;white&gt;No hunting list found for this area!\n")
	end
end

function toggleTarget(name)
	if table.contains(huntVar.userAreaDenizens, name) then
		for k, v in ipairs(huntVar.userAreaDenizens) do
			if v == name then
				table.remove(huntVar.userAreaDenizens, k)
			end
		end
	else
		local position = 0
		for i, j in ipairs(fixedHuntVar.areaDenizens) do
			if j == name then
				table.insert(huntVar.userAreaDenizens, position+1, name)
			elseif table.contains(huntVar.userAreaDenizens, j) then
				position = position + 1
			end
		end
	end
	showHuntTargs()
end

function swapPriority(numToSwap, num, name)
	local tempName = ""
	local index = table.index_of(huntVar.userAreaDenizens, name)
	local difference = num - numToSwap
	if fixedHuntVar.areaDenizens[num] == huntVar.userAreaDenizens[index + difference] then
		tempName = huntVar.userAreaDenizens[index]
		huntVar.userAreaDenizens[index] = huntVar.userAreaDenizens[index + difference]
		huntVar.userAreaDenizens[index + difference] = tempName
	end
	tempName = fixedHuntVar.areaDenizens[numToSwap]
	fixedHuntVar.areaDenizens[numToSwap] = fixedHuntVar.areaDenizens[num]
	fixedHuntVar.areaDenizens[num] = tempName
	showHuntTargs()
end

function toggleAll(mode)
	if mode == "on" then
		for k, v in ipairs(fixedHuntVar.areaDenizens) do
			if huntVar.userAreaDenizens[k] ~= v then
				table.insert(huntVar.userAreaDenizens, k, v)
			end
		end
	else
		for i = 1, table.maxn(huntVar.userAreaDenizens) do
			table.remove(huntVar.userAreaDenizens, 1)
		end
	end	
	showHuntTargs()
end

function huntTableCheck()
	for k, v in pairs(areaList) do
		if not table.contains(huntVar.userAreaList, k) then
			fixedHuntVar.areaList[k] = huntTableCopy(areaList[k])
			huntVar.userAreaList[k] = huntTableCopy(areaList[k])
		end
	end
end

function huntTableCopy(t)
  local t2 = {}
  for k,v in pairs(t) do
    t2[k] = v
  end
  return t2
end

function huntToggle(mode)
	if mode == "on" then
		huntVar.on = true
		cecho("&lt;white&gt;Hunting Script has been turned on.\n")
	else
		huntVar.on = false
		cecho("&lt;white&gt;Hunting Script has been turned off.\n")
	end
end

function addTargets()
	cecho("&lt;white&gt;Denizens that can be added:")
	for k, v in ipairs(gmcp.Char.Items.List.items) do
		if v.attrib == "m" then
			if not table.contains(fixedHuntVar.areaList[huntVar.currentArea], v.name) then
				local add = " + "
				cecho("\n&lt;dark_slate_gray&gt;[")
				echoLink(add, [[addTarg("]]..v.name..[[")]], "Click to add "..v.name.." to the denizen table!", true)
				cecho("&lt;dark_slate_gray&gt;] &lt;white&gt;"..v.name)
			end
		end
	end
	send(" ")
end

function addTarg(fullName)
	if not table.contains(fixedHuntVar.areaList[huntVar.currentArea], fullName) then
		table.insert(fixedHuntVar.areaList[huntVar.currentArea], fullName)
		table.insert(huntVar.userAreaList[huntVar.currentArea], fullName)
	end
	addTargets()
end

function removeTargets()
	cecho("&lt;white&gt;Denizens that can be removed:")
	for k, v in ipairs(fixedHuntVar.areaList[huntVar.currentArea]) do
		local remove = " - "
		cecho("\n&lt;dark_slate_gray&gt;[")
		echoLink(remove, [[removeTarg("]]..v..[[")]], "Click to remove "..v.." from the denizen table!", true)
		cecho("&lt;dark_slate_gray&gt;] &lt;white&gt;"..v)
	end
	send(" ")
end

function removeTarg(name)
	local index = table.index_of(fixedHuntVar.areaList[huntVar.currentArea], name)
	table.remove(fixedHuntVar.areaList[huntVar.currentArea], index)
	if table.contains(huntVar.userAreaList[huntVar.currentArea], name) then
		table.remove(huntVar.userAreaList[huntVar.currentArea], index)
	end
	removeTargets()
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<Script isActive="yes" isFolder="no">
					<name>areaList</name>
					<packageName></packageName>
					<script>areaList = areaList or {
["Manara Burrow"] = {"a vicious gnoll soldier", "a smirking gnoll slaver", "a flail-wielding gnoll sentry", "a sneering gnoll guard", "an apathetic gnoll sentinel", "an arrogant gnoll woman", "a water-bearing Mingruk woman", "a thin Mingruk woman"},
["the ruins of Phereklos"] = {"a multi-headed water hydra", "a hideous, writhing squid", "a large bull shark", "a black sea bass", "an enormous gulper eel", "a blue-spotted stingray", "a translucent jellyfish", "a bleeding salt water cod", "a school of clownfish", "a brilliantly coloured sea anemone"},
["the Caverns of Nuskuwe"] = {"the Wyrm Lord", "a fire wyrm", "an ancient wyrm", "a pregnant wyrm", "a crimson pyrapede", "a wyrm whelp", "a rock leech", "a rock beetle", "a crimson angler", "the Chieftain of Nuskuwe", "the Shaman of Nuskuwe", "a shaman's apprentice", "the stonemason of Nuskuwe", "a Nuskuwen hero", "a Nuskuwen man", "a Nuskuwen woman", "an ailing Nuskuwen elder", "a Nuskuwen child", "a surly Nuskuwen youth"},
["the Ruins of Morindar"] = {"a hideous nel'dorath", "a cursed revenant", "a hunchbacked feyr", "a feral gangrel", "a corpulent rilma worm", "a fearsome cave hunter", "a greyish-green culuma", "a shimmering gloomwing moth", "an armoured nahar", "a menacing gargoyle", "a jagged quorin"},
["the Isle of New Hope"] = {"a silver panther", "a colony of fruit bats", "a snow-white mazaran", "a russet mazaran", "an ebony mazaran", "a painted mazaran", "a saltwater crocodile", "a female baboon", "a feral dog"},
["the Mhojave Desert"] = {"a thoqqua", "an unformed thing of chaos", "a monitor lizard", "a slope-backed hyena", "a desert fox", "a rattlesnake", "a sidewinder", "a gecko lizard", "a hardy jarbo", "a giant red scorpion", "a yellow scorpion", "a large black scorpion"},
["the Northreach Forest"] = {"a brown wolf", "a white tailed doe", "a grizzly bear", "a large buck", "a speckled fawn", "a shaggy bobcat", "a black wolf", "an incorporeal shadow"},
["the Darkenwood Forest"] = {"a dark arachnoi man", "a dark arachnoi woman", "a huge pulsating spider", "a ghastly apparition", "an incorporeal shadow", "a midnight stag", "a cave bear"},
["the Azdun Dungeon"] = {"Lachesis, the Spider Queen", "a guardian spider", "a huge pulsating spider", "a large pulsating spider", "a medium pulsating spider", "a vampire", "Xylthus the Outcast", "a revolting ghoul", "a ghast", "a wraith", "a decaying zombie", "a wight", "a mummy", "a hill giant", "a cave bear", "an ankheg", "a giant bat", "a goblin ghoul", "a goblin zombie", "a hobgoblin warrior", "a goblin sergeant", "a goblin soldier", "a goblin smith", "a goblin foreman", "a goblin miner", "a goblin slave"},
["the Azdun Catacombs"] = {"Malvoc, the unholy", "Ulgase, the lich crone", "a decaying lich", "a cursed phantasm", "a shambling zombie"},
["the Vashnar Mountains"] = {"a muscular mountain lion", "a bighorn sheep"},
["a filthy goblin village"] = {"a goblin chieftain", "the goblin matron", "the goblin shaman", "the goblin lieutenant", "an elderly goblin", "a goblin guard", "a goblin youth", "a goblin girl", "an energetic goblin boy", "a small goblin boy"},
["the Barony of Dun Valley"] = {"Vukub Ysin'zhu, the Ogre Baron", "an ogre captain", "an orc captain", "Balam Agab, the ogre archmage", "Log'obi, an ogre shaman", "Xulu, an orc witchdoctor", "an ogre sentry", "an ogre knight", "an orc guard", "an orc sergeant", "an ogre cook", "an orc cook", "an orc soldier", "an ogre bowman", "an orc archer", "a drunk orc", "an orc blacksmith", "an ogre firetender", "an ogre weaponsmith", "an ogre huntress", "an ogre warrior", "a female orc", "an adolescent female orc", "a juvenile orc", "a catfish", "an enormous swamp wyvern", "a giant water strider", "a spinorthos", "a warthog", "a mud crab", "a giant mud beetle", "a plague rat", "a mist wraith", "a swamp dryad", "a lost soul", "a cloud of gnats", "a muscular mountain lion", "a bighorn sheep", "a sleek jaguar", "the Great Bull Elephant", "a greyish green crocodile", "a male gorilla", "a large, fat hippo", "a crab", "a dangerous water snake", "a poisonous snake", "a beautiful yellow-eared parrot"},
["Moghedu"] = {"Sir Temelin, Knight Commander of Moghedu", "a mhun mage", "the Great Mhunna", "Commander Kalesh", "Sir Mertyn, Knight of Moghedu", "an elite mhun keeper", "a mhun knight", "a mhun bodyguard", "the mhun cook", "a mhun architect", "the mhun Captain of the Guard", "a Moghedu blacksmith", "a master mhun demolitionist", "a mhun demolitionist", "a mhun scholar", "a mhun guard", "a mhun warrior", "a mhun labourer", "a master mhun miner", "a mhun miner", "a mhun merchant", "a mhun guard trainee", "a mhun scout", "a mhun woman", "an adolescent mhun", "a lithe mhun child"},
["the Dakhota Hills"] = {"a massive gour", "a grey wolf"},
["Tir Murann"] = {"Rakrr, the Vertani swordsmaster", "Daqsool, the Qoul of Tir Murann", "Dynas, the gour trainer", "Iayh, a mage of House Feranki", "Vewig, the Magelord of House Tsez", "Rohase, Captain of the Guard", "Rakwor, the Vertani Barkeep", "Ohmut, the Vertan craftswoman", "a House Tsez air mage", "a Vertani guard", "a drunken Vertani", "Ver'osy, the Vertani priestess", "Ghaser, the Vertani cook", "a massive gour", "Byor, a Vertani youth", "a hulking striped moirah", "a massive xabat"},
["Quartz Peak"] = {"the wrogroth", "Leesha, the ursu packmother", "Toogar, the ursu shaman", "Burgam, the hunter", "Turga, the ursu midwife", "an ursu man", "Trag, the taryen wise man", "a taryen man", "Gillib, a young ursu", "Gnral, the taryen chieftain", "Kurgo, the Ursu chief"},
["the village of Qurnok"] = {"Rurnog, the Herpetologist", "Ulvna, the witch of Qurnok", "Ganorg, the Qurnok shaman", "Nel'ga, the wife of Ganorg", "Aldroga, the Dendrologist", "a huge, ferocious crocodile", "a Qurnok warrior", "a Qurnok guard", "a Qurnok woman", "a young troll girl", "a mischievous troll boy", "an enormous anaconda", "a vicious water moccasin", "a large muskrat", "a large toad", "a large swarm of flies"},
["the Siroccian Mountains"] = {"a foul-smelling orc", "a vicious wolverine", "a large treesnake", "a white-striped skunk"},
["an Orcish outpost"] = {"Grashna, the tanner", "Thrakma, the butcher", "Gothmog, the orc witch doctor", "an orc bodyguard", "an orc soldier", "a diminutive orc servant", "an orc woman", "a ragged orc child", "a mountain goat"},
["a Dwarven camp"] = {"a senior miner", "a common mine labourer", "a resting miner", "Velga, the inventory woman", "Grimbold, the dwarf cook", "Olgmir, a local drunkard", "Urthel, a dwarf woman", "a dwarf girl", "a dwarf nurse", "an injured dwarf", "a dwarf miner", "a sifting dwarf", "a dwarf gatekeeper", "a Sirrocian fighting cat", "the mine foreman", "Holgir, the narcissist", "Viggo, a dwarf boy", "Adalgar, chieftain of the Siroccian encampment",},
["the Sea Lion Cove"] = {"an albino vampire spider", "a giant vampire spider", "a vampire spider", "a vampire spider hatchling", "a man-eating shark", "a scarred sea lion", "a female sea lion", "a barnacle encrusted oyster", "a red king crab", "a sea lion pup", "a baby sea turtle", "a playful sea sprite"},
["the village of Tasur'ke"] = {"a man-eating shark", "a barnacle encrusted oyster", "a bottlenose dolphin"},
["Sparrow's Rest"] = {"an ethereal spirit wolf", "a shrieking magpie", "a sleek, vicious red fox", "a large sapphire-winged sparrow"},
["the Granite Hills"] = {"Hurthorg the hill giant", "Raethon, a female hill giant", "a tremendous hill giant", "a female hill giant", "a hill giant child", "Hoarug, a whimpering giant child"},
["the Western Ithmia"] = {"a flower maiden"},
["the Isle of Harae"] = {"a bone golem", "a poharaehe", "a wasp queen", "a wasp soldier", "a wasp drone"},
["the Eastern shore"] = {"a king barracuda", "a barnacle encrusted oyster", "a striped dolphin"},
["the Lupine Hunting Grounds"] = {"a fell shewolf", "a fell werewolf", "a sleek black werepanther", "a fierce black panther", "a pregnant panther", "a weretigress", "an irate mountain goat", "a massive vakha", "a large bainligor", "a massive gohlbrorn", "a giant fire eel", "an elder centaur priestess", "a wild centaur", "a giant red scorpion", "a slope-backed hyena", "a massive brown boar", "a fearsome lion", "a slender snake", "a wide-eyed primate", "a centaur colt", "a long, horned snake", "a forest basilisk", "a hardy jarbo", },
["Green Lake"] = {"a massive bear", "a large fox", "a python", "a huge mosquito", "a mud eel", "a tawny pelican", "a slimy catfish", "a massive freshwater clam", "a spiny toad"},
["the Mesmerium"] = {"a dream horror"},
["the Dardanic Grasslands"] = {"a shaggy buffalo", "a savannah grizzly", "a savannah lioness", "a savannah lion", "a green-banded amphisbaena", "a shepherd", "a sheep", "a woolly barmotez", "a tsetse fly",},
["the Village of Bitterfork"] = {"Melancton, the Mayor", "Belen, the shaman", "Vanac, the leatherworker", "Thaleia", "Lyen, a chubby innkeeper", "a bear hunter", "a wiry fisherman", "a village man", "a village woman", "a grubby child",},
["the Sangre Plains"] = {"Kuralil, the Light-Footed", "Methats, the Divine Wind", "Selinde, an Arcadian royal guard", "the Flowing Robes Champion", "Atlantia", "a mischievous ward", "an Arcadian royal guard", "an armoured Exemplar", "a mounted Exemplar", "a robed Exemplar", "a bow-wielding Exemplar", "a studious Adept", "an eager Adept", "a young Adept", "a rugged buffalo", "a sleek antelope", "a vulture", "a sheep", "a groundhog",},
["Forest Watch"] = {"a slugbeast", "the Zombie Lord", "a zombie noble", "a ghoul smith", "a dryad zombie", "the Buckawn Lord", "a young buckawn witchdoctor", "a buckawn apprentice", "a buckawn royal guard", "a buckawn swordsman", "a buckawn youth", },
["the Valley of Actar"] = {"a snowy owl", "a creamy white goat", "an alert deer", "a large rabbit with one black ear", "a brown floppy-eared rabbit", "a crow", "Merrygold, the village elder", "Tobold, a robust halfling man", "Bodo, a halfling guard", "Biba, a halfling woman", "a harried halfling woman", "a halfling woman", "a halfling fisherman", "a studious, young halfling", "a short halfling", "a cute halfling girl", "a tiny halfling child",},
["the Lost City of Kasmarkin"] = {"a mummified troll guardian", "a ghostly troll senator", "a marsh ooze",},
["the Aalen Forest"] = {"Alduril, the head ranger", "Stlerin, the guard", "a Tsol'aa ranger", "Ta'hena, the Tsol'aa sage", "Zeuris, the Tsol'aa baker", "Celaabi, the Tsol'aa Queen Mother", "Jaaran, Tsol'aa guard", "an ancient tsol'aa", "Anaari, the lyricist", "Kassan, the healer", "Tsuane, the fletcher", "Kallion, the adolescent", "Thaa'lis, the elder druid", "Ta'lissu, the tattoo artist", "Tsellias the Tsol'aa alchemist", "Caletar the Collector", "Tsalinas, the weaver", "Keleyn, Tsol'aa guard", "Tu'eras, the Tsol'aa King", },
["Mount Piraeus"] = {"an ageing mountain lion", "a king salmon", "a small beaver", "a cyclops guard", "Themus, a young cyclops shepherd", "a cyclops woman", "Steropes, the cyclops smith", "Dora, a cyclops cook", "Arges, Chieftain of the Cyclopes", "Hynes, the cyclops mechanic", },
["a network of caves beneath New Thera"] = {"an elder Qui'sas", "Isiva, the Blood Maiden", "Dakrol, the Swiftblade", "a master assassin", "a Quisalis overseer", "a Qui'sas hunter", "a Qui'sas assassin", "Nevon Talkar", "a minor earth elemental", "Westriv Talkar", "Varenia, the Venomous", "a Quisalis assassin", "a Quisalis sentry", "an Initiate of the Mark", "a filthy rat", },
["the Den of the Quisalis"] = {"a master assassin", "a Qui'sas assassin", "Westriv Talkar", "Varenia, the Venomous", "a Quisalis assassin", "a Quisalis sentry", "an Initiate of the Mark", "a filthy rat", },
["Xhaiden Dale"] = {"a wild caribou", "a red-eyed crane", "a star-nosed mole", "a white coyote", "a Jiva monk of the Obele", "Irsich, the Mahjed of the Obele", "Colonius, the Gardener", "Olvic, the Historian", "Escine, the Deacon", "Palusta, the stonemason", "Vetiver van Veen", "Laukemper, Provost of Onorel", "Tooske, the Provost's wife", "Ebnis, the Onorel fisher", "a bulky yak", "Didi Ghengo", "Franz Elestahr", "Pirin, an elderly woman", "a colossal water strider", "a gargantuan ishkynd worm", "a Ganeve warrior", "Thorben Rezesh, Ganeve Man-At-Arms", "Sarat, Mistress of Necromancy", "Nevio Rezesh", },
["the Caves of Delmarin"] = {"a dyissan warrior",},
["the Keep of Belladona"] = {"Hecuba, the Witch of Darkness and Chaos", "Mistandraxus, the flame drake", "Quel'zar, the Surgeon", "Glixx, the mutant", "Tigrinya, the Librarian", "Naggamantex, the torturer", "Grollum, the Sentinel", "Gloom, the Occultist", "Glixx, the Mutant", "Smythe, the dwarven trainer", "Geh'shya, the Black Dragon", "a manticore", "a two-headed ogre", "Minoria, handmaiden of Belladona", "Malorea, Handmaiden of Belladona", "Eritrea, Handmaiden of Belladona", "Ephesia, Handmaiden of Belladona", "Derryk, the eunuch", "Cosmina, the Saint", "Belladona, the Demon Whore", "Helf'ga, the ogress cook", "Grothgar, the ogre sergeant", "Tara, the peasant", "Smirnick, the Serpentlord", "Sylvos, the Weak", "a mist-walker", "a dark minotaur", "a courtier", "an imp", "a black hell-hound", "a fearsome crocodile", "a spectral guardian", "a giant leech", "a giant toad"},
["the Creville Asylum"] = {"Screw-eye, the inmate superior", "a hooded man", "a sullen atavian inmate", "Wlor, the asylum watchman", "a one-eyed, convulsing priest", "a mutated horkvali inmate", "a sneering psychopathic inmate", "a grotesque xorani inmate", "Darien, the shock therapist", "a young shaman inmate", "a shivering dwarf with a dull pick axe", "Suire, a mauled, narcissistic siren", "Ulthor, the coroner", "an axe-wielding dwarven patient", "a burly troll dweller", "a maniacal atavian inmate", "a cannibalistic lunatic", "a restless, drugged druid", "Xzavien, the scientist", "a blood-spattered jester", "a crawling Tsol'aa inmate", "a deranged rajamalan dweller", "a shady dealer", "Villinix, the herbalist", "a doctor with numerous facial wounds", "a grinning imp", "a feral grey lynx", "a fearful surgeon", "a blind, knife-wielding woman", "a great horned owl", "a massive rat snake", "a ragged vulture", "a long-tailed weasel", "a beaten prisoner", "an injured maid", "a restrained nurse", "a terror-stricken nurse", "a delirious receptionist", "an emaciated squirrel", "a swarm of black flies", "an enormous black rat", "a deeply wounded nurse", "a bloated female cockroach", "a fleshy white maggot",},
["the sewers of Ashtan"] = {"a murderous thug", "a black rat", "a rat", "an old rat", "a young rat", "a baby rat",},
["the sewers of Cyrene"] = {"a blood leech", "a giant blood leech", "a black rat", "a rat", "an old rat", "a young rat", "a baby rat",},
["the Dungeon of the Beastlords"] = {"a bestial, two-headed canine", "a mysterious cloaked figure", "a vicious, three-headed cerberus", "Glash, the three-headed cerberus", "a crazed ritualist", "Jarxrit", "a cowled initiate", "a bloodied acolyte", "Inish, the head cultist", "a richly dressed attendant", "a sect ritualist", "Hellitha, the High Priestess", "Grithaxodon, the Beast", "Bearnath, the Beast Cultist", "a warrior ophidian", "the ophidian chieftain, Skt'all", "a juvenile ophidian", "a female ophidian"},
["the Southern Vashnar Mountains"] = {"a bighorn sheep", "a mountain grizzly", "a mountain drake",},

-- Off Plane
["deep below the sea"] = {"a malevolent sea dragon", "a gigantic sea spider", "a duskfin tuna", "a redfin tuna", "a pale, four-fin ray", "a coelacanth", "a spotted fangtooth"},
["Tenwat Prison"] = {"Saunders, the prison warden", "Alsilan, the condemned", "a creaking rust golem", "a crazed prison guard", "a berserk prisoner", "a howling blood mastiff", "a screaming head", "a wall of limbs", "a pair of grasping hands", "a pulsing artery"},
["Colchis"] = {"a giant sea serpent", "Frewynne, the Warrior Chieftess", "Vendril, Master Assassin", "Vorin, High Shaman", "Thorlis, the Warrior Chieftain", "Vray, a fortress servant", "Siathana, the Healer", "a cloaked assassin", "a weathered fisherman", "a Colchian warrior", "a Colchian warrioress"},
["the Port of Umbrin"] = {"Freyil Marteila", "High General Boracin", "Colonel Antariz", "Colonel Survane", "Colonel Meliane", "Major Poatril", "Major Avanguird", "Lieutenant Mavlait", "Master Healer Rivtan", "an Umbrinite raider", "an Umbrinite crossbowman", "an Umbrinite marksman", "an Umbrinite combat medic", "an Umbrinite conscript", "an Umbrinite trainee", "Reliar, the Umbrinite Merchant"},
["the Underworld"] = {"a steel-encased Death Knight", "a deadly obsidian scorpion", "a pale-skinned, humanoid vampire", "a transparent, glowing wight", "a colossal, hulking ghoul", "a ponderous ictheli", "a rotting zombie", "an intensely bright wisp", "a luminescent ghost", "a clattering skeleton"},
["Zanzibaar"] = {"Djulsan, King of Zanzibaar", "a royal guard of Zanzibaar", "Tiamenjiara, the court conjuror", "Alsimhinda, Queen of Zanzibaar", "Makran, an island trader", "Prince Sindharkan", "Fimsirun, a foreign prince", "Akhadd, a visiting noble", "a bare-chested sailor", "a skulking thief", "a burly dockhand", "a palace servant", "Semmor, the dhow-maker", "an island man", "an island woman", "an islander in a dhow", "an island child", "a Baarian tiger", "a giant tortoise", "a sleek mongoose", "a silvery scombra", "a sea nettle", "a ghost crab", "a spotted porpoise", "Lordan Colse", "a surly smuggler", "a pretty wench",},
["the Ruins of Morindar"] = {"a hideous nel'dorath", "a cursed revenant", "a feral gangrel", "a hunchbacked feyr", "a corpulent rilma worm", "a fearsome cave hunter", "an armoured nahar", "a shimmering gloomwing moth", "a greyish-green culuma", "a menacing gargoyle", "a jagged quorin", "Ramainen Tarcalion, Outrider Ascendant", "Lavarin Pelendur, the Shah", "Ilucara Pelendur, Advisor to the Shah",},
["Annwyn"] = {"a fairy Knight of Sidhe", "a Fomori of Unsidhe", "an Unsidhe Banshee", "a fairy Lady of Sidhe", "a crazed kelpie", "a wild kelpie", "a lake fairy", "a cunning black wolf", "a majestic lion", "a moon bear", "a fairy mistress", "a swamp dweller", },
["the Isle of Polyargos"] = {"Kru'lax, the Harpy Queen", "a filthy harpy", "an old leper", "a pathetic leper", "a leper child", "a barnacle encrusted oyster",},
["the Caverns of Riagath"] = {"Rurogan, Lord of the Rucktawn", "Farshen", "Xifeni the Wise", "Tylorga, Captain of the Guard", "Lolath", "Aline", "Kisheth", "a gigantic angler fish", "Shial, shaman of the Gyrog", "Leiga, the Gyrog matriarch", "Rinaga", "Ikaride", "a burly troll guard", "a sturdy troll woman", "Munfawa, a hunchbacked troll", "Tannel", "Elder Tilath", "Ninea", "a kalok"},
["the Artists' Collective Trading Post"] = {"a taciturn merchant", "a travelling merchant", "Kalieth, the perfumier","Tarani, a Tsol'aa artisan","Rotha, a young merchant"},
["Martei Memorial Tradepost"] = {"Islaban, the tanner", "Seril, a Shastaan merchant", "Deggan, a Jaruvian craftsman", "Brendel, the fishmonger", "Maerlyle, a young housewife", "a travelling merchant", "a taciturn merchant",},
["Rheodad"] = {"a woolly guanaco","a shaggy rhea","a forest lynx","a rheodine hare","a silver-back hare","a swarm of mosquitoes","a double-crested cormorant","a little sandpiper","a playful sea otter","a sapphire penguin","a nesting sapphire penguin"},
["Wegava Valley"] = {"Jawara, the razahr strategist", "Fela, Patriarch of the razahr", "Bahati, mate of Fela", "Chisulo, the razahr smith", "a large male razahr", "a hulking female razahr", "a razahr hatchling", "Oeru, a burly young gnoll", "Nukilik, the gnollish tyrant", "Cupun, the gnollish smith", "Chena, the healer", "a fierce gnoll sentinel", "a gnoll woman", "a young gnoll", "Sefu, the slave", "a frowning deniigi", "a fluffy arneck", "Akiak, the outcast", "Jafari", "a gnoll fisherman", "a plump ptarmigan", "the Mahk", "a large grey sturgeon",},
["the Village of Aran'riod"] = {"A'issem, Chieftess of the Yriluawe", "the Yriluawen warrior, O'sild", "A'roden, the Mistress of Threads", "A'dene, Priestess of the Holy Three", "A'leess, Oracle of the Yriluawe", "O'mem, the shepherd", "the stablehand, O'suiwr", "A'urnir, the beadworker", "O'ising, Yriluawe shaman", "the trader, O'inead", "the cook, O'seru", "a Yriluawen warrior", "an Elder of the Yriluawe", "a man of the Yriluawe", "a woman of the Yriluawe", "a Yriluawen boy", "a Yriluawen girl", "a war steed", "a wild and savage pony", "a sheep"},
["the Istar Jungle"] = {"an armoured boalisk", "a monstrous gamling spider", "a giant gwaeron", "a brightly feathered olbi", "a foot-pad lizard", "a bearded pig", "an agile kamatlan", "a blue-crowned ifrit"},
["Istarion"] = {"a whisper spider", "a watch spider", "a sword spider", "a whisper spiderling", "a watch spiderling", "a sword spiderling",},
["the Ulangi Isles"] = {"the forest lich Melkhiour", "the King Stag", "Balai the Scorned", "a majestic moose", "a large buck", "a feisty badger", "a gorgeous pheasant", "a speckled fawn", "a white tailed doe", "a shaggy bobcat", "Kr'Tachi the General", "a horkval guard", "a horkval worker", "a horkval drone", "the Horkval Queen", "a barnacle encrusted oyster", "Oorangu the Wise", "a grook scholar", "a grook woman", "a grook child"},
["the Port of Mysia"] = {"Greybeard, an aged pirate", "Trixy, Siren of Mysia", "Anan, Priest of Mysia", "Niran, the first mate", "Delmar, a pirate with a peg-leg", "Favian, a towering bartender", "Steele, the Mysian Cook", "Enys, a denounced cleric", "Captain Kelley, Mayor of Mysia", "Cassian, a blue-robed mage", "Devon, a bow-legged pirate", "a pirate lass", "a pirate with an eye-patch", "a scantily dressed prostitute", "a drunken pirate", "Tai, the spider monkey",},
["Hriddan Settlement"] = {"a crystalline ice demon", "Kolyartus, the Blizzard", "a Hriddan warrior", "Arn Drubak", "Osta Fretta", "Gar Nodak, Chieftain of the Hriddan", "a minotaur calf", "a female minotaur", "a tundra wolf", "Grutan Sustrae", "Grut Vlugar, the Bone Dancer", "a woolly mammoth", "a snow white hare", "Osta Murtai", "Rak Gorlan, the hunter"},
["Clockwork Isle"] = {"a wire-frame man", "a large squid", "a suit of guardian armour", "a drudge goon", "an animated porcelain doll"},
["Suliel Island"] = {"a polar bear", "a gelid hydra", "a malevolent iridwyn", "a slender arctic fox", "a greater yawo", "a silvery normine", "a speckled harp seal", "a docile tundra wolf", "a hulking omatu", "a gentle female reindeer", "a hardy reindeer", "a village woman", "Radhen, the fisherman", "Jadha, the carpenter", "a playful young boy", "a warmly dressed fisherman", "Avhor, the village chieftain", "Eldharen, the healer", "a playful young boy", "Vhilen, the head fisherman", "a mercenary guard", "a Sulien infantryman", "a mercenary captain", "Laniq, the Craftsman", "Garadh, the Hunter", "Dharia, the Sulien cook", "Teroq, the trainer", "Zhingidh, the Keeper", "Miren, the watchman", "a lokela beast", "a sluggish yawo", "a statue of an ice golem", "an ice sculpture", "a mercenary warrior", "Anaman, the warrior", "Crissa, the warrioress", "Emo, the architect", "Kindor, the master trainer", "Oliviar, the overseer", "Velkan, the Dwarven blacksmith", "a playful young girl", "Loridha, the huntress"},

-- Meropis
["the Northern Vasnari Mountains"] = {"a rabid grizzly bear", "an enormous cave bat", "a disfigured ram", "a bloodthirsty jackdaw", "a savage morsuleus", "a masked ogre", "a disgusting goblin", "a hulking hobgoblin", "an ice hellion", "a water leech", "a scruffy brigand", "a fierce brigand", "a golden gryphon", "a mother gryphon", "a young gryphon", "Tenith'oru"},
["Sirocco Fortress"] = {"Duke Semiro", "Duchess Alorina", "Daerlain, an elderly noblewoman", "Jadorno, a cloaked nobleman", "Chancellor Ashem", "the Captain of the Guard", "the fortress steward", "Halohan, a humble cleric", "a bearded cook", "a proud ducal guard", "a knight of the Siroccian Order", "a stout footsoldier", "a fortress guardsman", "an alert watchman", "a keen-eyed archer", "Samial, a sleek Rajamala", "a huge, writhing serpent", "a rotund prison guard"},
["the Mirror Caves"] = {"a massive jade spider", "a malevolent echo", "a giant quartz beetle", "a ghost bat", "a rope lichen", "a plated fernbeast", "a rockhide basilisk", "a bioluminescent ooze", "a lost spirit", "a crystal georith", "an aged Sileg", "an adult Sileg", "a juvenile Sileg"},
["the Mines of Iskadar"] = {"Bartok Stonefist, Leader of the Blackfire clan", "Glath Ironhammer, Leader of the Bloodstone clan", "High Priest Asdath", "Breana Ironhammer", "Thraken, the Bloodstone shaman", "Brok, the Blackfire shaman", "a dwarven priest", "a priest", "a nervous acolyte", "an alert dwarven guard", "a delirious miner", "Grelda Stonefist", "a blood-soaked dwarven miner", "a dirt-encrusted miner", "a bloodstained miner", "a dishevelled dwarven miner", "a convulsing miner", "a vomiting miner", "a young dwarven miner", "an adolescent miner", "an injured miner"},
["the Central Vasnari Mountains"] = {"a rabid grizzly bear", "an enormous cave bat", "a disfigured ram", "a bloodthirsty jackdaw"},
["Judgement Mountain"] = {"Grandmaster Kevadrin", "Marna", "Ciglo, the historian", "Davkas", "Qiland", "a stern monk", "a humble monk", "a diligent monk", "a young monk", "Begath, the Migri mage", "Dakk, leader of the Migri", "a Migri warrior", "an undead minion"},
["the salt mines of Ulsyndar"] = {"Anwell, commander of the prison guard", "Anttan, the mess cook", "an Ulsyndar guard", "an off-duty prison guard", "a prison miner", "a disgruntled salt miner"},
["The Gulf of Nilakantha"] = {"a gigantic sea spider", "a redfin tuna", "a hammerhead shark", "a whiptail stingray", "a massive jellyfish"},
["the Coastal Highway"] = {"a mounted Asteri knight", "a proud ducal guard", "a weathered guard", "a sneaky bandit"},
["Grukai Swamp"] = {"a sinister glubber", "a giant puffball", "a vicious dulosi majorus", "an aggressive dulosi minorus", "an energetic red turtle", "a putrid green crab", "a giant leech", "an enormous anaconda", "a mud urchin", "a thornback frog", "a crocodile", "a school of vicious piranha", "a vicious swarm of acacidic ants", "a multicoloured boa constrictor", "a reedy green buom", "a transparent cahno", "an azure koparfish", "a bunyip", "a swarm of mosquitoes", "a serpentine tssalo", "a tentacled polyp", "a shark-like junda"},
["the Battlesite of Mourning Pass"] = {"a heavily armoured warrior sylphid beetle", "a lost knight errant", "a winged worker sylphid beetle", "a queen sylphid beetle", "a larval sylphid queen", "Knight Commander Lord Ethran Rani", "Commander Farista Errikale", "Commander Malrian Kyra", "a sturdy knight", "a proud knight errant", "an injured knight", "a dishevelled young squire", "a battered Ashtani lieutenant", "a bedraggled Ashtani foot soldier"},
["the Northern Atrousian Jungle"] = {"a disfigured ogre", "Hul'fro, a towering ogre", "a domesticated water buffalo",},
["the Remains of Dralhu Hryre"] = {"Eraon, the armourer", "Matriarch Trisa", "Overseer Breoln", "Patriarch Deniar", "Winre, the bird keeper", "a brown-haired trainee", "a dirty blond-haired trainee", "Patriarch Grethan", "a Dralhuan guard", "a Dralhuan man", "a Dralhuan woman", "an elderly apothecary", "an energetic young boy", },
};


areaListPrio = {
["Istarion"] = {"188306",},
};</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
		</ScriptGroup>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Addon - dendb</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>gooey DenDB</name>
				<packageName></packageName>
				<script>gooey = gooey or {}
gooey.dendb = gooey.dendb or {}
gooey.dendb.db = gooey.dendb.db or {}

function gooey.dendb.managedb(thing)
  if gmcp and gmcp.Room and gmcp.Room.Info then
  gooey.dendb.db[gmcp.Room.Info.area] = gooey.dendb.db[gmcp.Room.Info.area] or {}
    if not string.find(thing, "homunculus") and 
      thing ~= "an aklan servitor"
    then
      gooey.dendb.db[gmcp.Room.Info.area][thing] = gooey.dendb.db[gmcp.Room.Info.area][thing] or {}
      if not table.contains(gooey.dendb.db[gmcp.Room.Info.area][thing], gmcp.Room.Info.num) then
        table.insert(gooey.dendb.db[gmcp.Room.Info.area][thing], gmcp.Room.Info.num)
      end
    end
  end
end</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
		<Script isActive="yes" isFolder="no">
			<name>resetmarkx</name>
			<packageName></packageName>
			<script>function resetmarkx()
  markx = 0
end</script>
			<eventHandlerList>
				<string>gmcp.Char</string>
				<string>gmcp.Room.Info</string>
				<string>gmcp.IRE</string>
			</eventHandlerList>
		</Script>
	</ScriptPackage>
	<KeyPackage>
		<KeyGroup isActive="yes" isFolder="yes">
			<name>normalkeys</name>
			<packageName>Movement</packageName>
			<script></script>
			<command></command>
			<keyCode>0</keyCode>
			<keyModifier>0</keyModifier>
			<KeyGroup isActive="yes" isFolder="yes">
				<name>Movement</name>
				<packageName></packageName>
				<script></script>
				<command></command>
				<keyCode>-1</keyCode>
				<keyModifier>0</keyModifier>
				<Key isActive="yes" isFolder="no">
					<name>north</name>
					<packageName></packageName>
					<script></script>
					<command>n</command>
					<keyCode>56</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>south</name>
					<packageName></packageName>
					<script>	</script>
					<command>s</command>
					<keyCode>50</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>east</name>
					<packageName></packageName>
					<script></script>
					<command>e</command>
					<keyCode>54</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>west</name>
					<packageName></packageName>
					<script></script>
					<command>w</command>
					<keyCode>52</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>northwest</name>
					<packageName></packageName>
					<script></script>
					<command>nw</command>
					<keyCode>55</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>northeast</name>
					<packageName></packageName>
					<script></script>
					<command>ne</command>
					<keyCode>57</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>southeast</name>
					<packageName></packageName>
					<script></script>
					<command>se</command>
					<keyCode>51</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>southwest</name>
					<packageName></packageName>
					<script></script>
					<command>sw</command>
					<keyCode>49</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>in</name>
					<packageName></packageName>
					<script></script>
					<command>in</command>
					<keyCode>47</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>out</name>
					<packageName></packageName>
					<script></script>
					<command>out</command>
					<keyCode>42</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>up</name>
					<packageName></packageName>
					<script></script>
					<command>up</command>
					<keyCode>45</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>down</name>
					<packageName></packageName>
					<script></script>
					<command>down</command>
					<keyCode>43</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>look</name>
					<packageName></packageName>
					<script></script>
					<command>l</command>
					<keyCode>53</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
			</KeyGroup>
			<KeyGroup isActive="yes" isFolder="yes">
				<name>Glide (SHIFT)</name>
				<packageName></packageName>
				<script></script>
				<command></command>
				<keyCode>-1</keyCode>
				<keyModifier>0</keyModifier>
				<Key isActive="yes" isFolder="no">
					<name>north</name>
					<packageName></packageName>
					<script>if cls == "sentinel" then 
getmorph("sprint")
end

if not ctrlmode then 
  ctrlmode = "glide" 
end

if ctrlmode == "glide" then
  if cls == "serpent" then 
  send("evade n")
  else
  send("glide n")
  end
elseif ctrlmode == "leap" then
  send("queue addclear eqbal leap n")
elseif ctrlmode == "sprint" then
  send("sprint n")
end
</script>
					<command></command>
					<keyCode>16777235</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>south</name>
					<packageName></packageName>
					<script>if cls == "sentinel" then 
getmorph("sprint")
end

if not ctrlmode then 
  ctrlmode = "glide" 
end

if ctrlmode == "glide" then
  if cls == "serpent" then 
  send("evade s")
  else
  send("glide s")
  end
elseif ctrlmode == "leap" then
  send("queue addclear eqbal leap s")
elseif ctrlmode == "sprint" then
  send("sprint s")
end
</script>
					<command></command>
					<keyCode>16777237</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>east</name>
					<packageName></packageName>
					<script>if cls == "sentinel" then 
getmorph("sprint")
end

if not ctrlmode then 
  ctrlmode = "glide" 
end

if ctrlmode == "glide" then
  if cls == "serpent" then 
  send("evade e")
  else
  send("glide e")
  end
elseif ctrlmode == "leap" then
  send("queue addclear eqbal leap e")
elseif ctrlmode == "sprint" then
  if gmcp.Room.Info.num ~= 52190 then
  send("sprint e")
  else 
  send("sprint e 2")
  end
end
</script>
					<command></command>
					<keyCode>16777236</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>west</name>
					<packageName></packageName>
					<script>if cls == "sentinel" then 
getmorph("sprint")
end

if not ctrlmode then 
  ctrlmode = "glide" 
end

if ctrlmode == "glide" then
  if cls == "serpent" then 
  send("evade w")
  else
  send("glide w")
  end
elseif ctrlmode == "leap" then
  send("queue addclear eqbal leap w")
elseif ctrlmode == "sprint" then
  if gmcp.Room.Info.num ~= 52162 then
  send("sprint w")
  else 
  send("sprint w 2")
  end
end
</script>
					<command></command>
					<keyCode>16777234</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>northwest</name>
					<packageName></packageName>
					<script>if cls == "sentinel" then 
getmorph("sprint")
end

if not ctrlmode then 
  ctrlmode = "glide" 
end

if ctrlmode == "glide" then
  if cls == "serpent" then 
  send("evade nw")
  else
  send("glide nw")
  end
elseif ctrlmode == "leap" then
  send("queue addclear eqbal leap nw")
elseif ctrlmode == "sprint" then
  send("sprint nw")
end
</script>
					<command></command>
					<keyCode>16777232</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>northeast</name>
					<packageName></packageName>
					<script>if cls == "sentinel" then 
getmorph("sprint")
end

if not ctrlmode then 
  ctrlmode = "glide" 
end

if ctrlmode == "glide" then
  if cls == "serpent" then 
  send("evade ne")
  else
  send("glide ne")
  end
elseif ctrlmode == "leap" then
  send("queue addclear eqbal leap ne")
elseif ctrlmode == "sprint" then
  send("sprint ne")
end
</script>
					<command></command>
					<keyCode>16777238</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>southeast</name>
					<packageName></packageName>
					<script>if cls == "sentinel" then 
getmorph("sprint")
end

if not ctrlmode then 
  ctrlmode = "glide" 
end

if ctrlmode == "glide" then
  if cls == "serpent" then 
  send("evade se")
  else
  send("glide se")
  end
elseif ctrlmode == "leap" then
  send("queue addclear eqbal leap se")
elseif ctrlmode == "sprint" then
  send("sprint se")
end
</script>
					<command></command>
					<keyCode>16777239</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>southwest</name>
					<packageName></packageName>
					<script>if cls == "sentinel" then 
getmorph("sprint")
end

if not ctrlmode then 
  ctrlmode = "glide" 
end

if ctrlmode == "glide" then
  if cls == "serpent" then 
  send("evade sw")
  else
  send("glide sw")
  end
elseif ctrlmode == "leap" then
  send("queue addclear eqbal leap sw")
elseif ctrlmode == "sprint" then
  send("sprint sw")
end
</script>
					<command></command>
					<keyCode>16777233</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>up</name>
					<packageName></packageName>
					<script>if cls == "sentinel" then 
getmorph("sprint")
end

if not ctrlmode then 
  ctrlmode = "glide" 
end

if ctrlmode == "glide" then
  if cls == "serpent" then 
  send("evade up")
  else
  send("glide up")
  end
elseif ctrlmode == "leap" then
  send("queue addclear eqbal leap up")
elseif ctrlmode == "sprint" then
  send("sprint up")
end
</script>
					<command>glide up</command>
					<keyCode>45</keyCode>
					<keyModifier>570425344</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>down</name>
					<packageName></packageName>
					<script>if cls == "sentinel" then 
getmorph("sprint")
end

if not ctrlmode then 
  ctrlmode = "glide" 
end

if ctrlmode == "glide" then
  if cls == "serpent" then 
  send("evade down")
  else
  send("glide down")
  end
elseif ctrlmode == "leap" then
  send("queue addclear eqbal leap down")
elseif ctrlmode == "sprint" then
  send("sprint down")
end
</script>
					<command></command>
					<keyCode>43</keyCode>
					<keyModifier>570425344</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>out</name>
					<packageName></packageName>
					<script>if cls == "sentinel" then 
getmorph("sprint")
end

if not ctrlmode then 
  ctrlmode = "glide" 
end

if ctrlmode == "glide" then
  if cls == "serpent" then 
  send("evade out")
  else
  send("glide out")
  end
elseif ctrlmode == "leap" then
  send("queue addclear eqbal leap out")
elseif ctrlmode == "sprint" then
  send("sprint out")
end
</script>
					<command></command>
					<keyCode>42</keyCode>
					<keyModifier>570425344</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>in</name>
					<packageName></packageName>
					<script>if cls == "sentinel" then 
getmorph("sprint")
end

if not ctrlmode then 
  ctrlmode = "glide" 
end

if ctrlmode == "glide" then
  if cls == "serpent" then 
  send("evade in")
  else
  send("glide in")
  end
elseif ctrlmode == "leap" then
  send("queue addclear eqbal leap in")
elseif ctrlmode == "sprint" then
  send("sprint in")
end
</script>
					<command></command>
					<keyCode>47</keyCode>
					<keyModifier>570425344</keyModifier>
				</Key>
			</KeyGroup>
			<KeyGroup isActive="yes" isFolder="yes">
				<name>Squint (CTRL)</name>
				<packageName></packageName>
				<script></script>
				<command></command>
				<keyCode>-1</keyCode>
				<keyModifier>0</keyModifier>
				<Key isActive="yes" isFolder="no">
					<name>sq down</name>
					<packageName></packageName>
					<script></script>
					<command>sq down</command>
					<keyCode>43</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>sq up</name>
					<packageName></packageName>
					<script></script>
					<command>sq up</command>
					<keyCode>45</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>sq out</name>
					<packageName></packageName>
					<script></script>
					<command>sq out</command>
					<keyCode>42</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>sq in</name>
					<packageName></packageName>
					<script></script>
					<command>sq in</command>
					<keyCode>47</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>sq sw</name>
					<packageName></packageName>
					<script></script>
					<command>sq sw</command>
					<keyCode>49</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>sq se</name>
					<packageName></packageName>
					<script></script>
					<command>sq se</command>
					<keyCode>51</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>sq ne</name>
					<packageName></packageName>
					<script></script>
					<command>sq ne</command>
					<keyCode>57</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>sq nw</name>
					<packageName></packageName>
					<script></script>
					<command>sq nw</command>
					<keyCode>55</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>sq west</name>
					<packageName></packageName>
					<script></script>
					<command>sq west</command>
					<keyCode>52</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>sq east</name>
					<packageName></packageName>
					<script></script>
					<command>sq east</command>
					<keyCode>54</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>sq south</name>
					<packageName></packageName>
					<script></script>
					<command>sq south</command>
					<keyCode>50</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>sq north</name>
					<packageName></packageName>
					<script></script>
					<command>sq north</command>
					<keyCode>56</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
			</KeyGroup>
			<KeyGroup isActive="yes" isFolder="yes">
				<name>Leap</name>
				<packageName></packageName>
				<script></script>
				<command></command>
				<keyCode>-1</keyCode>
				<keyModifier>0</keyModifier>
				<Key isActive="yes" isFolder="no">
					<name>leap down</name>
					<packageName></packageName>
					<script></script>
					<command>leap down</command>
					<keyCode>43</keyCode>
					<keyModifier>637534208</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>leap up</name>
					<packageName></packageName>
					<script></script>
					<command>leap up</command>
					<keyCode>45</keyCode>
					<keyModifier>637534208</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>sq out</name>
					<packageName></packageName>
					<script></script>
					<command>sq out</command>
					<keyCode>42</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>sq in</name>
					<packageName></packageName>
					<script></script>
					<command>sq in</command>
					<keyCode>47</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>sq sw</name>
					<packageName></packageName>
					<script></script>
					<command>sq sw</command>
					<keyCode>49</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>sq se</name>
					<packageName></packageName>
					<script></script>
					<command>sq se</command>
					<keyCode>51</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>sq ne</name>
					<packageName></packageName>
					<script></script>
					<command>sq ne</command>
					<keyCode>57</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>sq nw</name>
					<packageName></packageName>
					<script></script>
					<command>sq nw</command>
					<keyCode>55</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>leap west</name>
					<packageName></packageName>
					<script></script>
					<command>leap west</command>
					<keyCode>16777236</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>leap east</name>
					<packageName></packageName>
					<script></script>
					<command>leap east</command>
					<keyCode>16777236</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>sq south</name>
					<packageName></packageName>
					<script></script>
					<command>sq south</command>
					<keyCode>50</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>sq north</name>
					<packageName></packageName>
					<script></script>
					<command>sq north</command>
					<keyCode>56</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
			</KeyGroup>
			<KeyGroup isActive="no" isFolder="yes">
				<name>Tumble</name>
				<packageName></packageName>
				<script></script>
				<command></command>
				<keyCode>-1</keyCode>
				<keyModifier>0</keyModifier>
				<Key isActive="yes" isFolder="no">
					<name>tumble down</name>
					<packageName></packageName>
					<script></script>
					<command>queue add eb!t tumble down</command>
					<keyCode>43</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>tumble up</name>
					<packageName></packageName>
					<script></script>
					<command>queue add eb!t tumble up</command>
					<keyCode>45</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>tumble out</name>
					<packageName></packageName>
					<script></script>
					<command>queue add eb!t tumble out</command>
					<keyCode>42</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>tumble in</name>
					<packageName></packageName>
					<script></script>
					<command>queue add eb!t tumble in</command>
					<keyCode>47</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>tumble sw</name>
					<packageName></packageName>
					<script></script>
					<command>queue add eb!t tumble sw</command>
					<keyCode>49</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>tumble se</name>
					<packageName></packageName>
					<script></script>
					<command>queue add eb!t tumble se</command>
					<keyCode>51</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>tumble ne</name>
					<packageName></packageName>
					<script></script>
					<command>queue add eb!t tumble ne</command>
					<keyCode>57</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>tumble nw</name>
					<packageName></packageName>
					<script></script>
					<command>queue add eb!t tumble nw</command>
					<keyCode>55</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>tumble west</name>
					<packageName></packageName>
					<script></script>
					<command>queue add eb!t tumble west</command>
					<keyCode>52</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>tumble east</name>
					<packageName></packageName>
					<script></script>
					<command>queue add eb!t tumble east</command>
					<keyCode>54</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>tumble south</name>
					<packageName></packageName>
					<script></script>
					<command>queue add eb!t tumble south</command>
					<keyCode>50</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>tumble north</name>
					<packageName></packageName>
					<script></script>
					<command>queue add eb!t tumble north</command>
					<keyCode>56</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
			</KeyGroup>
			<KeyGroup isActive="yes" isFolder="yes">
				<name>Battlerage keys</name>
				<packageName>BattleRage_GUI</packageName>
				<script></script>
				<command></command>
				<keyCode>0</keyCode>
				<keyModifier>0</keyModifier>
				<KeyGroup isActive="yes" isFolder="yes">
					<name>Battlerage</name>
					<packageName></packageName>
					<script></script>
					<command></command>
					<keyCode>-1</keyCode>
					<keyModifier>0</keyModifier>
					<Key isActive="yes" isFolder="no">
						<name>Battlerage 1</name>
						<packageName></packageName>
						<script>send(gooey.data.hunt.rageKeys[1])</script>
						<command></command>
						<keyCode>16777264</keyCode>
						<keyModifier>0</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>Battlerage 2</name>
						<packageName></packageName>
						<script>send(gooey.data.hunt.rageKeys[2])</script>
						<command></command>
						<keyCode>16777265</keyCode>
						<keyModifier>0</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>Battlerage 3</name>
						<packageName></packageName>
						<script>send(gooey.data.hunt.rageKeys[3])</script>
						<command></command>
						<keyCode>16777266</keyCode>
						<keyModifier>0</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>Battlerage 4</name>
						<packageName></packageName>
						<script>send(gooey.data.hunt.rageKeys[4])</script>
						<command></command>
						<keyCode>16777267</keyCode>
						<keyModifier>0</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>Battlerage 5</name>
						<packageName></packageName>
						<script>send(gooey.data.hunt.rageKeys[5])</script>
						<command></command>
						<keyCode>16777268</keyCode>
						<keyModifier>0</keyModifier>
					</Key>
					<Key isActive="yes" isFolder="no">
						<name>Battlerage 6</name>
						<packageName></packageName>
						<script>send(gooey.data.hunt.rageKeys[6])</script>
						<command></command>
						<keyCode>16777269</keyCode>
						<keyModifier>0</keyModifier>
					</Key>
				</KeyGroup>
			</KeyGroup>
			<Key isActive="yes" isFolder="no">
				<name>Fly</name>
				<packageName></packageName>
				<script>send("queue addclear eqbal fly")</script>
				<command></command>
				<keyCode>16777275</keyCode>
				<keyModifier>0</keyModifier>
			</Key>
			<KeyGroup isActive="yes" isFolder="yes">
				<name>hunting</name>
				<packageName></packageName>
				<script></script>
				<command></command>
				<keyCode>-1</keyCode>
				<keyModifier>0</keyModifier>
				<Key isActive="yes" isFolder="no">
					<name>Start the killing spree</name>
					<packageName></packageName>
					<script>send("kill "..gooey.vars.target)</script>
					<command></command>
					<keyCode>48</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>flee</name>
					<packageName></packageName>
					<script>keneanung.bashing.flee()</script>
					<command></command>
					<keyCode>46</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
			</KeyGroup>
			<Key isActive="yes" isFolder="no">
				<name>Cycle target</name>
				<packageName></packageName>
				<script>gooey.funcs.hunt.cycleTargets()</script>
				<command></command>
				<keyCode>96</keyCode>
				<keyModifier>0</keyModifier>
			</Key>
		</KeyGroup>
		<KeyGroup isActive="no" isFolder="yes">
			<name>seafaringkeys</name>
			<packageName></packageName>
			<script></script>
			<command></command>
			<keyCode>-1</keyCode>
			<keyModifier>0</keyModifier>
			<KeyGroup isActive="yes" isFolder="yes">
				<name>Monsterhunt</name>
				<packageName></packageName>
				<script></script>
				<command></command>
				<keyCode>-1</keyCode>
				<keyModifier>0</keyModifier>
				<Key isActive="yes" isFolder="no">
					<name>Start shooting</name>
					<packageName></packageName>
					<script>shootmonsters()</script>
					<command></command>
					<keyCode>16777264</keyCode>
					<keyModifier>0</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>Sit</name>
					<packageName></packageName>
					<script>stopshooting()</script>
					<command></command>
					<keyCode>16777265</keyCode>
					<keyModifier>0</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>To dip or not to dip</name>
					<packageName></packageName>
					<script>novat = not novat
cecho("\n&lt;ansiYellow&gt;"..(novat and "Dipping" or "Not dipping"))</script>
					<command></command>
					<keyCode>16777267</keyCode>
					<keyModifier>0</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>Sleep</name>
					<packageName></packageName>
					<script>if sleeping == true then send("wake") 
else 
expandAlias("sleep")
end</script>
					<command></command>
					<keyCode>16777274</keyCode>
					<keyModifier>0</keyModifier>
				</Key>
			</KeyGroup>
			<KeyGroup isActive="yes" isFolder="yes">
				<name>Walk like you own it</name>
				<packageName></packageName>
				<script></script>
				<command></command>
				<keyCode>-1</keyCode>
				<keyModifier>0</keyModifier>
				<Key isActive="yes" isFolder="no">
					<name>down</name>
					<packageName></packageName>
					<script></script>
					<command>down</command>
					<keyCode>43</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>up</name>
					<packageName></packageName>
					<script></script>
					<command>up</command>
					<keyCode>45</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>out</name>
					<packageName></packageName>
					<script></script>
					<command>out</command>
					<keyCode>42</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>in</name>
					<packageName></packageName>
					<script></script>
					<command>in</command>
					<keyCode>47</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>sw</name>
					<packageName></packageName>
					<script></script>
					<command>sw</command>
					<keyCode>49</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>se</name>
					<packageName></packageName>
					<script></script>
					<command>se</command>
					<keyCode>51</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>ne</name>
					<packageName></packageName>
					<script></script>
					<command>ne</command>
					<keyCode>57</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>nw</name>
					<packageName></packageName>
					<script></script>
					<command>nw</command>
					<keyCode>55</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>west</name>
					<packageName></packageName>
					<script></script>
					<command>west</command>
					<keyCode>52</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>east</name>
					<packageName></packageName>
					<script></script>
					<command>east</command>
					<keyCode>54</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>south</name>
					<packageName></packageName>
					<script></script>
					<command>south</command>
					<keyCode>50</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>north</name>
					<packageName></packageName>
					<script></script>
					<command>north</command>
					<keyCode>56</keyCode>
					<keyModifier>603979776</keyModifier>
				</Key>
			</KeyGroup>
			<KeyGroup isActive="yes" isFolder="yes">
				<name>wavecall</name>
				<packageName></packageName>
				<script></script>
				<command></command>
				<keyCode>-1</keyCode>
				<keyModifier>0</keyModifier>
				<Key isActive="yes" isFolder="no">
					<name>sw</name>
					<packageName></packageName>
					<script>wcdir = "sw"
wavecalldistance = wavecalldistance or 0
wavecalldistance = wavecalldistance+1
dwavecall(wcdir, wavecalldistance)</script>
					<command></command>
					<keyCode>16777233</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>se</name>
					<packageName></packageName>
					<script>wcdir = "se"
wavecalldistance = wavecalldistance or 0
wavecalldistance = wavecalldistance + 1
dwavecall(wcdir, wavecalldistance)</script>
					<command></command>
					<keyCode>16777239</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>ne</name>
					<packageName></packageName>
					<script>wcdir = "ne"
wavecalldistance = wavecalldistance or 0
wavecalldistance = wavecalldistance+1
dwavecall(wcdir, wavecalldistance)</script>
					<command></command>
					<keyCode>16777238</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>nw</name>
					<packageName></packageName>
					<script>wcdir = "nw"
wavecalldistance = wavecalldistance or 0
wavecalldistance = wavecalldistance+1
dwavecall(wcdir, wavecalldistance)</script>
					<command></command>
					<keyCode>16777232</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>west</name>
					<packageName></packageName>
					<script>wcdir = "w"
wavecalldistance = wavecalldistance or 0
wavecalldistance = wavecalldistance+1
dwavecall(wcdir, wavecalldistance)</script>
					<command></command>
					<keyCode>16777234</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>east</name>
					<packageName></packageName>
					<script>wcdir = "e"
wavecalldistance = wavecalldistance or 0
wavecalldistance = wavecalldistance+1
dwavecall(wcdir, wavecalldistance)</script>
					<command></command>
					<keyCode>16777236</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>south</name>
					<packageName></packageName>
					<script>wcdir = "s"
wavecalldistance = wavecalldistance or 0
wavecalldistance = wavecalldistance+1
dwavecall(wcdir, wavecalldistance)</script>
					<command></command>
					<keyCode>16777237</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>north</name>
					<packageName></packageName>
					<script>wcdir = "n"
wavecalldistance = wavecalldistance or 0
wavecalldistance = wavecalldistance+1
dwavecall(wcdir, wavecalldistance)</script>
					<command></command>
					<keyCode>16777235</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>wc</name>
					<packageName></packageName>
					<script>send("invoke wavecall "..wcdir.." "..wavecalldistance)
wavecalldistance = 0
zone4movementcounter = zone4movementcounter or 0
if counting then 
  if string.find(direction, "n") then
  zone4movementcounter = zone4movementcounter-1
  elseif string.find(direction, "s") then
  zone4movementcounter = zone4movementcounter+1
  end 
end


</script>
					<command></command>
					<keyCode>16777227</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
				<Key isActive="yes" isFolder="no">
					<name>Cancel wavecall</name>
					<packageName></packageName>
					<script>wavecalldistance = 0
cecho(" &lt;olive_drab&gt;-&gt;&gt;&lt;DarkOrange&gt; CANCELLING&lt;dark_green&gt; wavecall\n")
send("cq ship")
sq.ClearQueue()</script>
					<command></command>
					<keyCode>16777223</keyCode>
					<keyModifier>536870912</keyModifier>
				</Key>
			</KeyGroup>
			<Key isActive="yes" isFolder="no">
				<name>north</name>
				<packageName></packageName>
				<script>monstering = monstering or false
steer = { "course", "bring her to the", "turn to"}

if monstering then sq.AddAction("say "..steer[math.random(1, #steer)] .." north")
else sq.AddAction("ship turn n") end</script>
				<command></command>
				<keyCode>56</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>south</name>
				<packageName></packageName>
				<script>monstering = monstering or false
steer = { "course", "bring her to the", "turn to"}

if monstering then sq.AddAction("say "..steer[math.random(1, #steer)] .." south")
else sq.AddAction("ship turn s") end</script>
				<command></command>
				<keyCode>50</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>east</name>
				<packageName></packageName>
				<script>monstering = monstering or false
steer = { "course", "bring her to the", "turn to"}

if monstering then sq.AddAction("say "..steer[math.random(1, #steer)] .." east")
else sq.AddAction("ship turn e") end</script>
				<command></command>
				<keyCode>54</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>west</name>
				<packageName></packageName>
				<script>monstering = monstering or false
steer = { "course", "bring her to the", "turn to"}

if monstering then sq.AddAction("say "..steer[math.random(1, #steer)] .." west")
else sq.AddAction("ship turn w") end</script>
				<command></command>
				<keyCode>52</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>northeast</name>
				<packageName></packageName>
				<script>monstering = monstering or false
steer = { "course", "bring her to the", "turn to"}

if monstering then sq.AddAction("say "..steer[math.random(1, #steer)] .." northeast")
else sq.AddAction("ship turn ne") end</script>
				<command></command>
				<keyCode>57</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>southeast</name>
				<packageName></packageName>
				<script>monstering = monstering or false
steer = { "course", "bring her to the", "turn to"}

if monstering then sq.AddAction("say "..steer[math.random(1, #steer)] .." southeast")
else sq.AddAction("ship turn se") end</script>
				<command></command>
				<keyCode>51</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>southwest</name>
				<packageName></packageName>
				<script>monstering = monstering or false
steer = { "course", "bring her to the", "turn to"}

if monstering then sq.AddAction("say "..steer[math.random(1, #steer)] .." southwest")
else sq.AddAction("ship turn sw") end</script>
				<command></command>
				<keyCode>49</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>northwest</name>
				<packageName></packageName>
				<script>monstering = monstering or false
steer = { "course", "bring her to the", "turn to"}

if monstering then sq.AddAction("say "..steer[math.random(1, #steer)] .." northwest")
else sq.AddAction("ship turn nw") end</script>
				<command></command>
				<keyCode>55</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="no" isFolder="no">
				<name>north-northwest</name>
				<packageName></packageName>
				<script></script>
				<command>ship turn nnw</command>
				<keyCode>55</keyCode>
				<keyModifier>603979776</keyModifier>
			</Key>
			<Key isActive="no" isFolder="no">
				<name>west-northwest</name>
				<packageName></packageName>
				<script></script>
				<command>ship turn wnw</command>
				<keyCode>16777232</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="no" isFolder="no">
				<name>west-southwest</name>
				<packageName></packageName>
				<script></script>
				<command>ship turn wsw</command>
				<keyCode>16777233</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="no" isFolder="no">
				<name>south-southwest</name>
				<packageName></packageName>
				<script></script>
				<command>ship turn ssw</command>
				<keyCode>49</keyCode>
				<keyModifier>603979776</keyModifier>
			</Key>
			<Key isActive="no" isFolder="no">
				<name>south-southeast</name>
				<packageName></packageName>
				<script></script>
				<command>ship turn sse</command>
				<keyCode>51</keyCode>
				<keyModifier>603979776</keyModifier>
			</Key>
			<Key isActive="no" isFolder="no">
				<name>east-southeast</name>
				<packageName></packageName>
				<script></script>
				<command>ship turn ese</command>
				<keyCode>16777239</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="no" isFolder="no">
				<name>east-northeast</name>
				<packageName></packageName>
				<script></script>
				<command>ship turn ene</command>
				<keyCode>16777238</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="no" isFolder="no">
				<name>north-northeast</name>
				<packageName></packageName>
				<script></script>
				<command>ship turn nne</command>
				<keyCode>57</keyCode>
				<keyModifier>603979776</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>raise anchor</name>
				<packageName></packageName>
				<script>raise = { "weigh", "weigh the", "raise", "raise the"}
--send("queue add ship say "..raise[math.random(1, #raise)] .." anchor")

sq.AddAction("say "..raise[math.random(1, #raise)] .." anchor")</script>
				<command></command>
				<keyCode>48</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>lower anchor</name>
				<packageName></packageName>
				<script>lower = { "drop", "drop the", "lower", "lower the"}
--send("queue add ship say "..lower[math.random(1, #lower)] .." anchor")
sq.AddAction("say "..lower[math.random(1, #lower)] .." anchor")</script>
				<command></command>
				<keyCode>48</keyCode>
				<keyModifier>603979776</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>row</name>
				<packageName></packageName>
				<script>
if sleeping == true then send("wake") end
row = {"row", "man the oars"}
--send("queue add ship say "..row[math.random(1, 2)])
sq.AddAction("say "..row[math.random(1, 2)])
</script>
				<command></command>
				<keyCode>47</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>raise plank</name>
				<packageName></packageName>
				<script>--send("queue add ship ship raise plank")
sq.AddAction("ship raise plank")</script>
				<command></command>
				<keyCode>46</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>lower plank</name>
				<packageName></packageName>
				<script>--send("queue add ship ship lower plank")
sq.AddAction("ship lower plank")</script>
				<command></command>
				<keyCode>46</keyCode>
				<keyModifier>603979776</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>full sails</name>
				<packageName></packageName>
				<script>lower = { "set", "full"}

--send("queue add ship say "..lower[math.random(1, #lower)] .." sails")
sq.AddAction("say "..lower[math.random(1, #lower)] .." sails")</script>
				<command></command>
				<keyCode>43</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>strike sails</name>
				<packageName></packageName>
				<script>strikesails = { "strike", "strike the"}

sq.AddAction("say "..strikesails[math.random(1, #strikesails)] .." sails")

</script>
				<command></command>
				<keyCode>43</keyCode>
				<keyModifier>570425344</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>full stop</name>
				<packageName></packageName>
				<script>send("cq ship")

if sleeping == true then send("wake") end
-- send("queue add ship say all stop")
sq.AddAction("say all stop")</script>
				<command></command>
				<keyCode>45</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>Look</name>
				<packageName></packageName>
				<script></script>
				<command>ql</command>
				<keyCode>53</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>repair</name>
				<packageName></packageName>
				<script></script>
				<command>ship repair all</command>
				<keyCode>16777275</keyCode>
				<keyModifier>0</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>Stop repairing</name>
				<packageName></packageName>
				<script></script>
				<command>ship repair none</command>
				<keyCode>16777275</keyCode>
				<keyModifier>67108864</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>Stop rowig</name>
				<packageName></packageName>
				<script>
--send("say stop rowing")
sq.AddAction("say stop rowing")</script>
				<command></command>
				<keyCode>47</keyCode>
				<keyModifier>570425344</keyModifier>
			</Key>
			<Key isActive="yes" isFolder="no">
				<name>stop turning</name>
				<packageName></packageName>
				<script>--send("ship stop turning")
sq.AddAction("ship stop turning")</script>
				<command></command>
				<keyCode>42</keyCode>
				<keyModifier>536870912</keyModifier>
			</Key>
		</KeyGroup>
	</KeyPackage>
	<HelpPackage>
		<helpURL></helpURL>
	</HelpPackage>
</MudletPackage>
